'use client';

import { useEffect, useRef, useState } from 'react';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import './leaflet-override.css';
import styles from './pandemic-vulnerability.module.css';

// Fix Leaflet default icon issue
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon-2x.png',
  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon.png',
  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-shadow.png',
});

// Comprehensive historical outbreak data with origins and spread patterns
const outbreakData = [
  {
    name: 'COVID-19',
    origin: { lat: 30.5928, lng: 114.3055, location: 'Wuhan, China' },
    startDate: '2019-12',
    spread: [
      { lat: 35.6762, lng: 139.6503, location: 'Tokyo, Japan', date: '2020-01' },
      { lat: 37.5665, lng: 126.9780, location: 'Seoul, South Korea', date: '2020-01' },
      { lat: 47.6062, lng: -122.3321, location: 'Seattle, USA', date: '2020-01' },
      { lat: 45.4642, lng: 9.1900, location: 'Milan, Italy', date: '2020-02' },
      { lat: 40.7128, lng: -74.0060, location: 'New York, USA', date: '2020-03' },
      { lat: -23.5505, lng: -46.6333, location: 'São Paulo, Brazil', date: '2020-03' },
    ],
    category: 'Respiratory',
    severity: 'Pandemic'
  },
  {
    name: 'SARS',
    origin: { lat: 23.1291, lng: 113.2644, location: 'Guangdong, China' },
    startDate: '2002-11',
    spread: [
      { lat: 22.3193, lng: 114.1694, location: 'Hong Kong', date: '2003-02' },
      { lat: 1.3521, lng: 103.8198, location: 'Singapore', date: '2003-03' },
      { lat: 43.6532, lng: -79.3832, location: 'Toronto, Canada', date: '2003-03' }
    ],
    category: 'Respiratory',
    severity: 'Epidemic'
  },
  {
    name: 'H1N1 Swine Flu',
    origin: { lat: 25.6866, lng: -100.3161, location: 'Monterrey, Mexico' },
    startDate: '2009-03',
    spread: [
      { lat: 32.7767, lng: -96.7970, location: 'Dallas, USA', date: '2009-04' },
      { lat: 40.7128, lng: -74.0060, location: 'New York, USA', date: '2009-04' },
      { lat: 51.5074, lng: -0.1278, location: 'London, UK', date: '2009-04' }
    ],
    category: 'Respiratory',
    severity: 'Pandemic'
  },
  {
    name: 'Ebola (West Africa)',
    origin: { lat: 8.4606, lng: -11.7799, location: 'Conakry, Guinea' },
    startDate: '2014-03',
    spread: [
      { lat: 6.4281, lng: -9.4295, location: 'Monrovia, Liberia', date: '2014-06' },
      { lat: 8.4840, lng: -13.2299, location: 'Freetown, Sierra Leone', date: '2014-05' }
    ],
    category: 'Hemorrhagic Fever',
    severity: 'Epidemic'
  },
  {
    name: 'Zika Virus',
    origin: { lat: -15.8267, lng: -47.9218, location: 'Brasília, Brazil' },
    startDate: '2015-05',
    spread: [
      { lat: 4.7110, lng: -74.0721, location: 'Bogotá, Colombia', date: '2015-10' },
      { lat: 25.7617, lng: -80.1918, location: 'Miami, USA', date: '2016-07' }
    ],
    category: 'Vector-borne',
    severity: 'Epidemic'
  }
];

// Comprehensive pandemic vulnerability data for major countries
const generatePandemicData = (scenario, isOptimistic) => {
  const baseData = [
    // North America
    { country: 'United States', lat: 37.0902, lng: -95.7129, healthcareCapacity: 78, socialVulnerability: 45, economicResilience: 82, population: 331900000 },
    { country: 'Canada', lat: 56.1304, lng: -106.3468, healthcareCapacity: 87, socialVulnerability: 30, economicResilience: 83, population: 38200000 },
    { country: 'Mexico', lat: 23.6345, lng: -102.5528, healthcareCapacity: 48, socialVulnerability: 62, economicResilience: 52, population: 128900000 },
    
    // South America
    { country: 'Brazil', lat: -14.2350, lng: -51.9253, healthcareCapacity: 52, socialVulnerability: 68, economicResilience: 48, population: 215000000 },
    { country: 'Argentina', lat: -38.4161, lng: -63.6167, healthcareCapacity: 65, socialVulnerability: 55, economicResilience: 55, population: 45000000 },
    { country: 'Chile', lat: -35.6751, lng: -71.5430, healthcareCapacity: 75, socialVulnerability: 45, economicResilience: 68, population: 19000000 },
    { country: 'Colombia', lat: 4.5709, lng: -74.2973, healthcareCapacity: 55, socialVulnerability: 65, economicResilience: 50, population: 51000000 },
    
    // Europe
    { country: 'United Kingdom', lat: 55.3781, lng: -3.4360, healthcareCapacity: 85, socialVulnerability: 38, economicResilience: 76, population: 67500000 },
    { country: 'Germany', lat: 51.1657, lng: 10.4515, healthcareCapacity: 88, socialVulnerability: 32, economicResilience: 84, population: 83200000 },
    { country: 'France', lat: 46.2276, lng: 2.2137, healthcareCapacity: 86, socialVulnerability: 35, economicResilience: 78, population: 67700000 },
    { country: 'Italy', lat: 41.8719, lng: 12.5674, healthcareCapacity: 82, socialVulnerability: 42, economicResilience: 68, population: 59000000 },
    { country: 'Spain', lat: 40.4637, lng: -3.7492, healthcareCapacity: 84, socialVulnerability: 40, economicResilience: 70, population: 47400000 },
    { country: 'Russia', lat: 61.5240, lng: 105.3188, healthcareCapacity: 65, socialVulnerability: 52, economicResilience: 58, population: 146000000 },
    
    // Asia-Pacific
    { country: 'China', lat: 35.8617, lng: 104.1954, healthcareCapacity: 72, socialVulnerability: 55, economicResilience: 75, population: 1412000000 },
    { country: 'India', lat: 20.5937, lng: 78.9629, healthcareCapacity: 35, socialVulnerability: 75, economicResilience: 55, population: 1420000000 },
    { country: 'Indonesia', lat: -0.7893, lng: 113.9213, healthcareCapacity: 38, socialVulnerability: 70, economicResilience: 50, population: 275000000 },
    { country: 'Japan', lat: 36.2048, lng: 138.2529, healthcareCapacity: 90, socialVulnerability: 48, economicResilience: 88, population: 125000000 },
    { country: 'South Korea', lat: 35.9078, lng: 127.7669, healthcareCapacity: 87, socialVulnerability: 35, economicResilience: 85, population: 51700000 },
    { country: 'Australia', lat: -25.2744, lng: 133.7751, healthcareCapacity: 89, socialVulnerability: 28, economicResilience: 87, population: 25900000 },
    { country: 'New Zealand', lat: -40.9006, lng: 174.8860, healthcareCapacity: 92, socialVulnerability: 25, economicResilience: 88, population: 5100000 },
    
    // Africa
    { country: 'South Africa', lat: -30.5595, lng: 22.9375, healthcareCapacity: 45, socialVulnerability: 72, economicResilience: 48, population: 60000000 },
    { country: 'Nigeria', lat: 9.0820, lng: 8.6753, healthcareCapacity: 25, socialVulnerability: 85, economicResilience: 38, population: 211400000 },
    { country: 'Egypt', lat: 26.8206, lng: 30.8025, healthcareCapacity: 42, socialVulnerability: 68, economicResilience: 45, population: 104300000 },
    { country: 'Kenya', lat: -0.0236, lng: 37.9062, healthcareCapacity: 35, socialVulnerability: 75, economicResilience: 42, population: 54000000 },
    
    // Middle East
    { country: 'Saudi Arabia', lat: 23.8859, lng: 45.0792, healthcareCapacity: 72, socialVulnerability: 45, economicResilience: 68, population: 35000000 },
    { country: 'Iran', lat: 32.4279, lng: 53.6880, healthcareCapacity: 58, socialVulnerability: 62, economicResilience: 45, population: 85000000 },
    { country: 'Turkey', lat: 38.9637, lng: 35.2433, healthcareCapacity: 68, socialVulnerability: 50, economicResilience: 58, population: 85000000 },
    { country: 'Israel', lat: 31.0461, lng: 34.8516, healthcareCapacity: 88, socialVulnerability: 35, economicResilience: 82, population: 9000000 },
    { country: 'UAE', lat: 23.4241, lng: 53.8478, healthcareCapacity: 85, socialVulnerability: 32, economicResilience: 85, population: 10000000 }
  ];

  // Apply scenario adjustments
  return baseData.map(country => {
    let adjustmentFactor = 1;
    if (scenario === '2030') {
      adjustmentFactor = isOptimistic ? 0.9 : 1.15;
    } else if (scenario === '2050') {
      adjustmentFactor = isOptimistic ? 0.85 : 1.3;
    }

    const vulnerabilityIndex = Math.round(
      ((100 - country.healthcareCapacity) * 0.4 + 
       country.socialVulnerability * 0.4 + 
       (100 - country.economicResilience) * 0.2) * adjustmentFactor
    );

    const riskLevel = 
      vulnerabilityIndex >= 80 ? 'VeryHigh' :
      vulnerabilityIndex >= 60 ? 'High' :
      vulnerabilityIndex >= 40 ? 'Medium' :
      vulnerabilityIndex >= 20 ? 'Low' : 'VeryLow';

    return {
      ...country,
      vulnerabilityIndex: Math.min(100, vulnerabilityIndex),
      riskLevel
    };
  });
};

// Helper function to get vulnerability color
function getVulnerabilityColor(vulnerabilityIndex) {
  if (vulnerabilityIndex >= 80) return '#FF4444'; // Very High - Red
  if (vulnerabilityIndex >= 60) return '#FF9800'; // High - Orange  
  if (vulnerabilityIndex >= 40) return '#FFD700'; // Medium - Yellow
  if (vulnerabilityIndex >= 20) return '#90EE90'; // Low - Light Green
  return '#2E8B57'; // Very Low - Green
}

export default function VulnerabilityMapImproved({ scenario, isOptimistic, onCountrySelect }) {
  const mapRef = useRef(null);
  const mapInstanceRef = useRef(null);
  const layersRef = useRef({
    countries: null,
    outbreaks: null,
    geoJson: null
  });
  const [mapError, setMapError] = useState(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    if (!mapRef.current || mapInstanceRef.current) return;

    try {
      // Initialize map
      mapInstanceRef.current = L.map(mapRef.current, {
        center: [20, 0],
        zoom: 2,
        minZoom: 2,
        maxZoom: 6,
        worldCopyJump: true
      });

      // Add dark tile layer
      L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {
        attribution: '© OpenStreetMap contributors © CARTO',
        maxZoom: 19
      }).addTo(mapInstanceRef.current);

      // Create layer groups
      layersRef.current.countries = L.layerGroup().addTo(mapInstanceRef.current);
      layersRef.current.outbreaks = L.layerGroup().addTo(mapInstanceRef.current);
      layersRef.current.geoJson = L.layerGroup().addTo(mapInstanceRef.current);

      setIsLoading(false);
    } catch (error) {
      console.error('Error initializing map:', error);
      setMapError('Failed to initialize map');
      setIsLoading(false);
    }

    return () => {
      if (mapInstanceRef.current) {
        mapInstanceRef.current.remove();
        mapInstanceRef.current = null;
      }
    };
  }, []);

  useEffect(() => {
    if (!mapInstanceRef.current || !layersRef.current.countries) return;

    // Clear existing layers
    Object.values(layersRef.current).forEach(layer => {
      if (layer) layer.clearLayers();
    });

    // Get vulnerability data
    const data = generatePandemicData(scenario, isOptimistic);

    // First, add circle markers for all countries (as a base layer)
    data.forEach(country => {
      const color = getVulnerabilityColor(country.vulnerabilityIndex);
      const radius = Math.min(20, Math.max(8, Math.sqrt(country.population) / 1500));
      
      const marker = L.circleMarker([country.lat, country.lng], {
        radius: radius,
        fillColor: color,
        color: '#ffffff',
        weight: 2,
        opacity: 0.9,
        fillOpacity: 0.7
      });

      const popupContent = `
        <div style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; min-width: 250px; padding: 10px;">
          <h3 style="margin: 0 0 10px 0; color: #121625; font-size: 16px;">${country.country}</h3>
          <div style="font-size: 13px; line-height: 1.5; color: #1a1f35;">
            <div style="margin-bottom: 6px;"><strong>Vulnerability Index:</strong> ${country.vulnerabilityIndex}</div>
            <div style="margin-bottom: 6px;"><strong>Healthcare Capacity:</strong> ${country.healthcareCapacity}</div>
            <div style="margin-bottom: 6px;"><strong>Social Vulnerability:</strong> ${country.socialVulnerability}</div>
            <div style="margin-bottom: 6px;"><strong>Economic Resilience:</strong> ${country.economicResilience}</div>
            <div style="margin-bottom: 6px;"><strong>Risk Level:</strong> <span style="color: ${color}; font-weight: 600;">${country.riskLevel}</span></div>
            <div style="margin-top: 8px; padding-top: 8px; border-top: 1px solid #e0e0e0;">
              <strong>Population:</strong> ${(country.population / 1000000).toFixed(1)}M
            </div>
          </div>
        </div>
      `;

      marker.bindPopup(popupContent, {
        maxWidth: 300,
        className: 'custom-popup'
      });

      marker.on('click', () => {
        if (onCountrySelect) {
          onCountrySelect({
            name: country.country,
            healthcareCapacity: country.healthcareCapacity,
            socialVulnerability: country.socialVulnerability,
            economicResilience: country.economicResilience,
            riskLevel: country.riskLevel,
            vulnerabilityIndex: country.vulnerabilityIndex
          });
        }
      });

      marker.addTo(layersRef.current.countries);
    });

    // Add outbreak markers
    outbreakData.forEach(outbreak => {
      // Add origin marker with special styling
      const originIcon = L.divIcon({
        html: `
          <div style="
            width: 20px; 
            height: 20px; 
            background: #FF4444; 
            border: 3px solid #ffffff; 
            border-radius: 50%; 
            box-shadow: 0 0 10px rgba(255, 68, 68, 0.6);
            animation: pulse 2s infinite;
          "></div>
          <style>
            @keyframes pulse {
              0% { box-shadow: 0 0 0 0 rgba(255, 68, 68, 0.7); }
              70% { box-shadow: 0 0 0 10px rgba(255, 68, 68, 0); }
              100% { box-shadow: 0 0 0 0 rgba(255, 68, 68, 0); }
            }
          </style>
        `,
        className: 'outbreak-origin',
        iconSize: [20, 20],
        iconAnchor: [10, 10]
      });

      const originMarker = L.marker([outbreak.origin.lat, outbreak.origin.lng], { 
        icon: originIcon,
        zIndexOffset: 1000 
      });

      const originPopup = `
        <div style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; min-width: 280px; padding: 15px;">
          <h3 style="margin: 0 0 10px 0; color: #FF4444; font-size: 18px;">🦠 ${outbreak.name}</h3>
          <div style="font-size: 14px; line-height: 1.5; color: #1a1f35;">
            <div style="margin-bottom: 8px;"><strong>Origin:</strong> ${outbreak.origin.location}</div>
            <div style="margin-bottom: 8px;"><strong>First Detected:</strong> ${outbreak.startDate}</div>
            <div style="margin-bottom: 8px;"><strong>Category:</strong> ${outbreak.category}</div>
            <div style="margin-bottom: 8px;"><strong>Severity:</strong> <span style="color: #FF4444; font-weight: 600;">${outbreak.severity}</span></div>
            <div style="margin-top: 12px; padding: 8px; background: #f8f9fa; border-radius: 4px; font-size: 12px;">
              <strong>Spread Pattern:</strong> Spread to ${outbreak.spread.length} major locations
            </div>
          </div>
        </div>
      `;

      originMarker.bindPopup(originPopup, {
        maxWidth: 350,
        className: 'outbreak-popup'
      });

      originMarker.addTo(layersRef.current.outbreaks);

      // Add spread pattern lines
      outbreak.spread.forEach((location, index) => {
        // Create spread marker
        const spreadIcon = L.divIcon({
          html: `
            <div style="
              width: 12px; 
              height: 12px; 
              background: #FF9800; 
              border: 2px solid #ffffff; 
              border-radius: 50%;
              opacity: 0.8;
            "></div>
          `,
          className: 'outbreak-spread',
          iconSize: [12, 12],
          iconAnchor: [6, 6]
        });

        const spreadMarker = L.marker([location.lat, location.lng], { 
          icon: spreadIcon,
          zIndexOffset: 500 
        });

        const spreadPopup = `
          <div style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; min-width: 220px; padding: 12px;">
            <h4 style="margin: 0 0 8px 0; color: #FF9800; font-size: 16px;">${outbreak.name} Spread</h4>
            <div style="font-size: 13px; line-height: 1.4; color: #1a1f35;">
              <div style="margin-bottom: 6px;"><strong>Location:</strong> ${location.location}</div>
              <div style="margin-bottom: 6px;"><strong>Detected:</strong> ${location.date}</div>
            </div>
          </div>
        `;

        spreadMarker.bindPopup(spreadPopup);
        spreadMarker.addTo(layersRef.current.outbreaks);

        // Create curved line from origin to spread location
        const latlngs = [
          [outbreak.origin.lat, outbreak.origin.lng],
          [location.lat, location.lng]
        ];

        const spreadLine = L.polyline(latlngs, {
          color: '#FF9800',
          weight: 2,
          opacity: 0.6,
          dashArray: '5, 5',
          smoothFactor: 1.5
        });

        spreadLine.addTo(layersRef.current.outbreaks);
      });
    });

    // Optionally try to load GeoJSON for better country boundaries
    // Using a fallback approach
    const loadGeoJSON = async () => {
      try {
        const response = await fetch('https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_110m_admin_0_countries.geojson');
        if (!response.ok) {
          throw new Error('Failed to fetch GeoJSON');
        }
        const geoData = await response.json();

        // Enhanced country name mapping
        const countryNameMap = {
          'United States of America': 'United States',
          'United States': 'United States',
          'Russian Federation': 'Russia',
          'Russia': 'Russia',
          'United Kingdom': 'United Kingdom',
          'South Korea': 'South Korea',
          'Republic of Korea': 'South Korea',
          'Iran': 'Iran',
          'Islamic Republic of Iran': 'Iran',
          'China': 'China',
          'People\'s Republic of China': 'China',
          'UAE': 'UAE',
          'United Arab Emirates': 'UAE'
        };

        const countryDataMap = {};
        data.forEach(country => {
          countryDataMap[country.country] = country;
          // Also add mapped names
          Object.entries(countryNameMap).forEach(([key, value]) => {
            if (value === country.country) {
              countryDataMap[key] = country;
            }
          });
        });

        const geoJsonLayer = L.geoJSON(geoData, {
          style: function(feature) {
            const countryName = feature.properties.NAME || feature.properties.NAME_EN || feature.properties.ADMIN;
            const countryData = countryDataMap[countryName] || 
                             countryDataMap[feature.properties.NAME_EN] ||
                             countryDataMap[feature.properties.ADMIN];
            
            if (countryData) {
              const color = getVulnerabilityColor(countryData.vulnerabilityIndex);
              return {
                fillColor: color,
                weight: 1,
                opacity: 0.8,
                color: '#ffffff',
                fillOpacity: 0.6
              };
            } else {
              return {
                fillColor: '#64748b',
                weight: 1,
                opacity: 0.3,
                color: '#ffffff',
                fillOpacity: 0.2
              };
            }
          },
          onEachFeature: function(feature, layer) {
            const countryName = feature.properties.NAME || feature.properties.NAME_EN || feature.properties.ADMIN;
            const countryData = countryDataMap[countryName] || 
                               countryDataMap[feature.properties.NAME_EN] ||
                               countryDataMap[feature.properties.ADMIN];
            
            if (countryData) {
              const color = getVulnerabilityColor(countryData.vulnerabilityIndex);
              layer.bindPopup(`
                <div style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; min-width: 250px; padding: 10px;">
                  <h3 style="margin: 0 0 10px 0; color: #121625; font-size: 16px;">${countryData.country}</h3>
                  <div style="font-size: 13px; line-height: 1.5; color: #1a1f35;">
                    <div style="margin-bottom: 6px;"><strong>Vulnerability Index:</strong> ${countryData.vulnerabilityIndex}</div>
                    <div style="margin-bottom: 6px;"><strong>Healthcare Capacity:</strong> ${countryData.healthcareCapacity}</div>
                    <div style="margin-bottom: 6px;"><strong>Social Vulnerability:</strong> ${countryData.socialVulnerability}</div>
                    <div style="margin-bottom: 6px;"><strong>Economic Resilience:</strong> ${countryData.economicResilience}</div>
                    <div style="margin-bottom: 6px;"><strong>Risk Level:</strong> <span style="color: ${color}; font-weight: 600;">${countryData.riskLevel}</span></div>
                  </div>
                </div>
              `);

              // Add click handler
              layer.on('click', () => {
                if (onCountrySelect) {
                  onCountrySelect({
                    name: countryData.country,
                    healthcareCapacity: countryData.healthcareCapacity,
                    socialVulnerability: countryData.socialVulnerability,
                    economicResilience: countryData.economicResilience,
                    riskLevel: countryData.riskLevel,
                    vulnerabilityIndex: countryData.vulnerabilityIndex
                  });
                }
              });

              // Add hover effects
              layer.on({
                mouseover: function(e) {
                  const layer = e.target;
                  layer.setStyle({
                    weight: 3,
                    color: '#00e0ff',
                    fillOpacity: 0.8
                  });
                },
                mouseout: function(e) {
                  geoJsonLayer.resetStyle(e.target);
                }
              });
            }
          }
        });

        geoJsonLayer.addTo(layersRef.current.geoJson);
      } catch (error) {
        console.warn('Failed to load GeoJSON boundaries, using circle markers only:', error);
        // Circle markers are already added as fallback
      }
    };

    loadGeoJSON();

  }, [scenario, isOptimistic, onCountrySelect]);

  if (mapError) {
    return (
      <div style={{
        width: '100%',
        height: '100%',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        background: '#1a1f35',
        borderRadius: '8px',
        color: '#f1f1f1'
      }}>
        <div style={{ textAlign: 'center' }}>
          <p style={{ fontSize: '18px', marginBottom: '10px' }}>⚠️ Map Error</p>
          <p style={{ fontSize: '14px', color: '#b0b0b0' }}>{mapError}</p>
        </div>
      </div>
    );
  }

  if (isLoading) {
    return (
      <div style={{
        width: '100%',
        height: '100%',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        background: '#1a1f35',
        borderRadius: '8px',
        color: '#f1f1f1'
      }}>
        <div style={{ textAlign: 'center' }}>
          <div className="loading-animation">
            <div></div>
            <div></div>
            <div></div>
            <div></div>
          </div>
          <p style={{ marginTop: '20px' }}>Loading map...</p>
        </div>
      </div>
    );
  }

  return (
    <>
      <div ref={mapRef} style={{ width: '100%', height: '100%', borderRadius: '8px' }} />
      <style jsx global>{`
        .custom-popup .leaflet-popup-content-wrapper {
          background: white;
          color: #333;
          box-shadow: 0 3px 14px rgba(0,0,0,0.4);
          border-radius: 8px;
        }
        .custom-popup .leaflet-popup-content {
          margin: 0;
        }
        .custom-popup .leaflet-popup-tip {
          background: white;
        }
        .outbreak-popup .leaflet-popup-content-wrapper {
          background: #fff5f5;
          border: 1px solid #ffcccc;
        }
        .outbreak-popup .leaflet-popup-tip {
          background: #fff5f5;
        }
      `}</style>
    </>
  );
}