'use client';

import { useEffect, useRef } from 'react';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import styles from './pandemic-vulnerability.module.css';

// Fix Leaflet default icon issue
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon-2x.png',
  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon.png',
  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-shadow.png',
});

// Comprehensive historical outbreak data with origins and spread patterns
const outbreakData = [
  {
    name: 'COVID-19',
    origin: { lat: 30.5928, lng: 114.3055, location: 'Wuhan, China' },
    startDate: '2019-12',
    spread: [
      { lat: 35.6762, lng: 139.6503, location: 'Tokyo, Japan', date: '2020-01' },
      { lat: 37.5665, lng: 126.9780, location: 'Seoul, South Korea', date: '2020-01' },
      { lat: 13.7563, lng: 100.5018, location: 'Bangkok, Thailand', date: '2020-01' },
      { lat: 47.6062, lng: -122.3321, location: 'Seattle, USA', date: '2020-01' },
      { lat: 45.4642, lng: 9.1900, location: 'Milan, Italy', date: '2020-02' },
      { lat: 48.8566, lng: 2.3522, location: 'Paris, France', date: '2020-02' },
      { lat: 52.5200, lng: 13.4050, location: 'Berlin, Germany', date: '2020-02' },
      { lat: 40.7128, lng: -74.0060, location: 'New York, USA', date: '2020-03' },
      { lat: 51.5074, lng: -0.1278, location: 'London, UK', date: '2020-03' },
      { lat: -23.5505, lng: -46.6333, location: 'São Paulo, Brazil', date: '2020-03' },
      { lat: 28.6139, lng: 77.2090, location: 'New Delhi, India', date: '2020-03' },
      { lat: -33.8688, lng: 151.2093, location: 'Sydney, Australia', date: '2020-03' },
      { lat: 55.7558, lng: 37.6173, location: 'Moscow, Russia', date: '2020-03' },
      { lat: -26.2041, lng: 28.0473, location: 'Johannesburg, South Africa', date: '2020-03' }
    ],
    peakDate: '2021-01',
    category: 'Respiratory',
    severity: 'Pandemic'
  },
  {
    name: 'SARS',
    origin: { lat: 23.1291, lng: 113.2644, location: 'Guangdong, China' },
    startDate: '2002-11',
    spread: [
      { lat: 22.3193, lng: 114.1694, location: 'Hong Kong', date: '2003-02' },
      { lat: 1.3521, lng: 103.8198, location: 'Singapore', date: '2003-03' },
      { lat: 43.6532, lng: -79.3832, location: 'Toronto, Canada', date: '2003-03' },
      { lat: 21.0285, lng: 105.8542, location: 'Hanoi, Vietnam', date: '2003-02' },
      { lat: 25.0330, lng: 121.5654, location: 'Taipei, Taiwan', date: '2003-03' }
    ],
    peakDate: '2003-05',
    category: 'Respiratory',
    severity: 'Epidemic'
  },
  {
    name: 'MERS-CoV',
    origin: { lat: 24.7136, lng: 46.6753, location: 'Riyadh, Saudi Arabia' },
    startDate: '2012-06',
    spread: [
      { lat: 24.4539, lng: 54.3773, location: 'Abu Dhabi, UAE', date: '2013-04' },
      { lat: 33.6844, lng: 73.0479, location: 'Islamabad, Pakistan', date: '2014-05' },
      { lat: 37.5665, lng: 126.9780, location: 'Seoul, South Korea', date: '2015-05' },
      { lat: 33.8869, lng: 9.5375, location: 'Tunis, Tunisia', date: '2013-05' },
      { lat: 51.5074, lng: -0.1278, location: 'London, UK', date: '2012-09' }
    ],
    peakDate: '2015-06',
    category: 'Respiratory',
    severity: 'Epidemic'
  },
  {
    name: 'H1N1 Swine Flu',
    origin: { lat: 25.6866, lng: -100.3161, location: 'Monterrey, Mexico' },
    startDate: '2009-03',
    spread: [
      { lat: 32.7767, lng: -96.7970, location: 'Dallas, USA', date: '2009-04' },
      { lat: 40.7128, lng: -74.0060, location: 'New York, USA', date: '2009-04' },
      { lat: 51.5074, lng: -0.1278, location: 'London, UK', date: '2009-04' },
      { lat: 35.6762, lng: 139.6503, location: 'Tokyo, Japan', date: '2009-05' },
      { lat: -34.6037, lng: -58.3816, location: 'Buenos Aires, Argentina', date: '2009-06' },
      { lat: -33.8688, lng: 151.2093, location: 'Sydney, Australia', date: '2009-06' },
      { lat: 28.6139, lng: 77.2090, location: 'New Delhi, India', date: '2009-07' }
    ],
    peakDate: '2009-10',
    category: 'Respiratory',
    severity: 'Pandemic'
  },
  {
    name: 'Zika Virus',
    origin: { lat: -15.8267, lng: -47.9218, location: 'Brasília, Brazil' },
    startDate: '2015-05',
    spread: [
      { lat: 4.7110, lng: -74.0721, location: 'Bogotá, Colombia', date: '2015-10' },
      { lat: 10.4806, lng: -66.9036, location: 'Caracas, Venezuela', date: '2015-12' },
      { lat: 25.7617, lng: -80.1918, location: 'Miami, USA', date: '2016-07' },
      { lat: 18.4655, lng: -66.1057, location: 'San Juan, Puerto Rico', date: '2016-01' },
      { lat: 9.7489, lng: -83.7534, location: 'San José, Costa Rica', date: '2016-01' },
      { lat: 13.6929, lng: -89.2182, location: 'San Salvador, El Salvador', date: '2015-11' },
      { lat: 14.0723, lng: -87.1921, location: 'Tegucigalpa, Honduras', date: '2015-12' }
    ],
    peakDate: '2016-02',
    category: 'Vector-borne',
    severity: 'Epidemic'
  },
  {
    name: 'Ebola (West Africa)',
    origin: { lat: 8.4606, lng: -11.7799, location: 'Conakry, Guinea' },
    startDate: '2014-03',
    spread: [
      { lat: 6.4281, lng: -9.4295, location: 'Monrovia, Liberia', date: '2014-06' },
      { lat: 8.4840, lng: -13.2299, location: 'Freetown, Sierra Leone', date: '2014-05' },
      { lat: 32.7767, lng: -96.7970, location: 'Dallas, USA', date: '2014-09' },
      { lat: 40.6782, lng: -73.9442, location: 'New York, USA', date: '2014-10' },
      { lat: 40.4168, lng: -3.7038, location: 'Madrid, Spain', date: '2014-10' },
      { lat: 5.3596, lng: -4.0083, location: 'Abidjan, Côte d\'Ivoire', date: '2014-08' }
    ],
    peakDate: '2014-10',
    category: 'Hemorrhagic Fever',
    severity: 'Epidemic'
  },
  {
    name: 'Ebola (DRC)',
    origin: { lat: 1.2921, lng: 29.4372, location: 'Beni, DRC' },
    startDate: '2018-08',
    spread: [
      { lat: -4.3217, lng: 15.3074, location: 'Kinshasa, DRC', date: '2018-08' },
      { lat: -1.9706, lng: 30.1044, location: 'Goma, DRC', date: '2019-07' },
      { lat: 0.3476, lng: 32.5825, location: 'Kampala, Uganda', date: '2019-06' }
    ],
    peakDate: '2019-04',
    category: 'Hemorrhagic Fever',
    severity: 'Epidemic'
  },
  {
    name: 'H5N1 Avian Influenza',
    origin: { lat: 22.3193, lng: 114.1694, location: 'Hong Kong' },
    startDate: '1997-05',
    spread: [
      { lat: 21.0285, lng: 105.8542, location: 'Hanoi, Vietnam', date: '2003-12' },
      { lat: 13.7563, lng: 100.5018, location: 'Bangkok, Thailand', date: '2004-01' },
      { lat: -6.2088, lng: 106.8456, location: 'Jakarta, Indonesia', date: '2005-07' },
      { lat: 39.9042, lng: 116.4074, location: 'Beijing, China', date: '2005-11' },
      { lat: 30.0444, lng: 31.2357, location: 'Cairo, Egypt', date: '2006-02' },
      { lat: 41.0082, lng: 28.9784, location: 'Istanbul, Turkey', date: '2006-01' }
    ],
    peakDate: '2006-03',
    category: 'Respiratory',
    severity: 'Epidemic'
  },
  {
    name: 'Mpox (Monkeypox)',
    origin: { lat: -4.3217, lng: 15.3074, location: 'Kinshasa, DRC' },
    startDate: '2022-05',
    spread: [
      { lat: 51.5074, lng: -0.1278, location: 'London, UK', date: '2022-05' },
      { lat: 40.7128, lng: -74.0060, location: 'New York, USA', date: '2022-05' },
      { lat: 52.5200, lng: 13.4050, location: 'Berlin, Germany', date: '2022-05' },
      { lat: 55.7558, lng: 37.6173, location: 'Moscow, Russia', date: '2022-06' },
      { lat: 40.4168, lng: -3.7038, location: 'Madrid, Spain', date: '2022-05' },
      { lat: 45.4642, lng: 9.1900, location: 'Milan, Italy', date: '2022-05' },
      { lat: 25.7617, lng: -80.1918, location: 'Miami, USA', date: '2022-06' },
      { lat: -23.5505, lng: -46.6333, location: 'São Paulo, Brazil', date: '2022-06' }
    ],
    peakDate: '2022-08',
    category: 'Skin/Systemic',
    severity: 'Epidemic'
  },
  {
    name: 'Cholera (Yemen)',
    origin: { lat: 15.3694, lng: 44.1910, location: 'Sana\'a, Yemen' },
    startDate: '2016-10',
    spread: [
      { lat: 12.7794, lng: 45.0367, location: 'Aden, Yemen', date: '2017-04' },
      { lat: 15.5527, lng: 48.5164, location: 'Taiz, Yemen', date: '2017-05' },
      { lat: 16.0300, lng: 43.2500, location: 'Hodeidah, Yemen', date: '2017-06' }
    ],
    peakDate: '2017-12',
    category: 'Enteric',
    severity: 'Epidemic'
  },
  {
    name: 'Yellow Fever (Angola)',
    origin: { lat: -8.8390, lng: 13.2894, location: 'Luanda, Angola' },
    startDate: '2015-12',
    spread: [
      { lat: -4.3217, lng: 15.3074, location: 'Kinshasa, DRC', date: '2016-03' },
      { lat: 0.3476, lng: 32.5825, location: 'Kampala, Uganda', date: '2016-04' },
      { lat: 39.9042, lng: 116.4074, location: 'Beijing, China', date: '2016-03' }
    ],
    peakDate: '2016-06',
    category: 'Vector-borne',
    severity: 'Epidemic'
  },
  {
    name: 'Chikungunya',
    origin: { lat: -20.3484, lng: 57.5522, location: 'Mauritius' },
    startDate: '2005-03',
    spread: [
      { lat: -21.1151, lng: 55.5364, location: 'Réunion, France', date: '2005-04' },
      { lat: 12.9716, lng: 77.5946, location: 'Bangalore, India', date: '2006-02' },
      { lat: 13.0827, lng: 80.2707, location: 'Chennai, India', date: '2006-07' },
      { lat: 18.5204, lng: 73.8567, location: 'Pune, India', date: '2006-09' }
    ],
    peakDate: '2006-03',
    category: 'Vector-borne',
    severity: 'Epidemic'
  },
  {
    name: 'Marburg Virus',
    origin: { lat: 0.3476, lng: 32.5825, location: 'Kampala, Uganda' },
    startDate: '2012-10',
    spread: [
      { lat: 1.3733, lng: 32.2903, location: 'Kabale, Uganda', date: '2012-11' },
      { lat: 0.3136, lng: 32.5811, location: 'Entebbe, Uganda', date: '2012-11' }
    ],
    peakDate: '2012-12',
    category: 'Hemorrhagic Fever',
    severity: 'Outbreak'
  }
];

// Comprehensive pandemic vulnerability data for all major countries
const generatePandemicData = (scenario, isOptimistic) => {
  const baseData = [
    // North America
    { country: 'United States', lat: 37.0902, lng: -95.7129, healthcareCapacity: 78, socialVulnerability: 45, economicResilience: 82, population: 331900000 },
    { country: 'Canada', lat: 56.1304, lng: -106.3468, healthcareCapacity: 87, socialVulnerability: 30, economicResilience: 83, population: 38200000 },
    { country: 'Mexico', lat: 23.6345, lng: -102.5528, healthcareCapacity: 48, socialVulnerability: 62, economicResilience: 52, population: 128900000 },
    
    // South America
    { country: 'Brazil', lat: -14.2350, lng: -51.9253, healthcareCapacity: 52, socialVulnerability: 68, economicResilience: 48, population: 215000000 },
    { country: 'Argentina', lat: -38.4161, lng: -63.6167, healthcareCapacity: 65, socialVulnerability: 55, economicResilience: 55, population: 45000000 },
    { country: 'Chile', lat: -35.6751, lng: -71.5430, healthcareCapacity: 75, socialVulnerability: 45, economicResilience: 68, population: 19000000 },
    { country: 'Colombia', lat: 4.5709, lng: -74.2973, healthcareCapacity: 55, socialVulnerability: 65, economicResilience: 50, population: 51000000 },
    { country: 'Peru', lat: -9.1900, lng: -75.0152, healthcareCapacity: 45, socialVulnerability: 70, economicResilience: 42, population: 33000000 },
    { country: 'Venezuela', lat: 6.4238, lng: -66.5897, healthcareCapacity: 30, socialVulnerability: 80, economicResilience: 25, population: 28000000 },
    { country: 'Ecuador', lat: -1.8312, lng: -78.1834, healthcareCapacity: 50, socialVulnerability: 68, economicResilience: 45, population: 18000000 },
    
    // Europe
    { country: 'United Kingdom', lat: 55.3781, lng: -3.4360, healthcareCapacity: 85, socialVulnerability: 38, economicResilience: 76, population: 67500000 },
    { country: 'Germany', lat: 51.1657, lng: 10.4515, healthcareCapacity: 88, socialVulnerability: 32, economicResilience: 84, population: 83200000 },
    { country: 'France', lat: 46.2276, lng: 2.2137, healthcareCapacity: 86, socialVulnerability: 35, economicResilience: 78, population: 67700000 },
    { country: 'Italy', lat: 41.8719, lng: 12.5674, healthcareCapacity: 82, socialVulnerability: 42, economicResilience: 68, population: 59000000 },
    { country: 'Spain', lat: 40.4637, lng: -3.7492, healthcareCapacity: 84, socialVulnerability: 40, economicResilience: 70, population: 47400000 },
    { country: 'Poland', lat: 51.9194, lng: 19.1451, healthcareCapacity: 68, socialVulnerability: 45, economicResilience: 65, population: 38000000 },
    { country: 'Netherlands', lat: 52.1326, lng: 5.2913, healthcareCapacity: 89, socialVulnerability: 28, economicResilience: 85, population: 17400000 },
    { country: 'Belgium', lat: 50.5039, lng: 4.4699, healthcareCapacity: 85, socialVulnerability: 35, economicResilience: 78, population: 11500000 },
    { country: 'Sweden', lat: 60.1282, lng: 18.6435, healthcareCapacity: 92, socialVulnerability: 25, economicResilience: 88, population: 10400000 },
    { country: 'Norway', lat: 60.4720, lng: 8.4689, healthcareCapacity: 94, socialVulnerability: 22, economicResilience: 92, population: 5400000 },
    { country: 'Denmark', lat: 56.2639, lng: 9.5018, healthcareCapacity: 91, socialVulnerability: 26, economicResilience: 86, population: 5800000 },
    { country: 'Finland', lat: 61.9241, lng: 25.7482, healthcareCapacity: 90, socialVulnerability: 28, economicResilience: 85, population: 5500000 },
    { country: 'Switzerland', lat: 46.8182, lng: 8.2275, healthcareCapacity: 95, socialVulnerability: 20, economicResilience: 95, population: 8700000 },
    { country: 'Austria', lat: 47.5162, lng: 14.5501, healthcareCapacity: 88, socialVulnerability: 30, economicResilience: 82, population: 9000000 },
    
    // Eastern Europe
    { country: 'Russia', lat: 61.5240, lng: 105.3188, healthcareCapacity: 65, socialVulnerability: 52, economicResilience: 58, population: 146000000 },
    { country: 'Ukraine', lat: 48.3794, lng: 31.1656, healthcareCapacity: 55, socialVulnerability: 65, economicResilience: 35, population: 44000000 },
    { country: 'Romania', lat: 45.9432, lng: 24.9668, healthcareCapacity: 60, socialVulnerability: 58, economicResilience: 55, population: 19000000 },
    { country: 'Czech Republic', lat: 49.8175, lng: 15.4730, healthcareCapacity: 78, socialVulnerability: 40, economicResilience: 72, population: 10700000 },
    { country: 'Hungary', lat: 47.1625, lng: 19.5033, healthcareCapacity: 72, socialVulnerability: 45, economicResilience: 68, population: 9700000 },
    
    // Asia-Pacific
    { country: 'China', lat: 35.8617, lng: 104.1954, healthcareCapacity: 72, socialVulnerability: 55, economicResilience: 75, population: 1412000000 },
    { country: 'India', lat: 20.5937, lng: 78.9629, healthcareCapacity: 35, socialVulnerability: 75, economicResilience: 55, population: 1420000000 },
    { country: 'Indonesia', lat: -0.7893, lng: 113.9213, healthcareCapacity: 38, socialVulnerability: 70, economicResilience: 50, population: 275000000 },
    { country: 'Pakistan', lat: 30.3753, lng: 69.3451, healthcareCapacity: 32, socialVulnerability: 78, economicResilience: 40, population: 230000000 },
    { country: 'Bangladesh', lat: 23.6850, lng: 90.3563, healthcareCapacity: 25, socialVulnerability: 85, economicResilience: 35, population: 169400000 },
    { country: 'Japan', lat: 36.2048, lng: 138.2529, healthcareCapacity: 90, socialVulnerability: 48, economicResilience: 88, population: 125000000 },
    { country: 'Philippines', lat: 12.8797, lng: 121.7740, healthcareCapacity: 42, socialVulnerability: 72, economicResilience: 48, population: 110000000 },
    { country: 'Vietnam', lat: 14.0583, lng: 108.2772, healthcareCapacity: 55, socialVulnerability: 58, economicResilience: 62, population: 98000000 },
    { country: 'Turkey', lat: 38.9637, lng: 35.2433, healthcareCapacity: 68, socialVulnerability: 50, economicResilience: 58, population: 85000000 },
    { country: 'Iran', lat: 32.4279, lng: 53.6880, healthcareCapacity: 58, socialVulnerability: 62, economicResilience: 45, population: 85000000 },
    { country: 'Thailand', lat: 15.8700, lng: 100.9925, healthcareCapacity: 68, socialVulnerability: 52, economicResilience: 65, population: 70000000 },
    { country: 'South Korea', lat: 35.9078, lng: 127.7669, healthcareCapacity: 87, socialVulnerability: 35, economicResilience: 85, population: 51700000 },
    { country: 'Myanmar', lat: 21.9162, lng: 95.9560, healthcareCapacity: 28, socialVulnerability: 82, economicResilience: 25, population: 55000000 },
    { country: 'South Africa', lat: -30.5595, lng: 22.9375, healthcareCapacity: 45, socialVulnerability: 72, economicResilience: 48, population: 60000000 },
    { country: 'Kenya', lat: -0.0236, lng: 37.9062, healthcareCapacity: 35, socialVulnerability: 75, economicResilience: 42, population: 54000000 },
    { country: 'Uganda', lat: 1.3733, lng: 32.2903, healthcareCapacity: 30, socialVulnerability: 80, economicResilience: 38, population: 47000000 },
    { country: 'Tanzania', lat: -6.3690, lng: 34.8888, healthcareCapacity: 32, socialVulnerability: 78, economicResilience: 40, population: 62000000 },
    { country: 'Algeria', lat: 28.0339, lng: 1.6596, healthcareCapacity: 55, socialVulnerability: 62, economicResilience: 48, population: 45000000 },
    { country: 'Morocco', lat: 31.7917, lng: -7.0926, healthcareCapacity: 52, socialVulnerability: 65, economicResilience: 50, population: 37000000 },
    { country: 'Angola', lat: -11.2027, lng: 17.8739, healthcareCapacity: 28, socialVulnerability: 82, economicResilience: 35, population: 33000000 },
    { country: 'Mozambique', lat: -18.6657, lng: 35.5296, healthcareCapacity: 25, socialVulnerability: 85, economicResilience: 30, population: 32000000 },
    { country: 'Madagascar', lat: -18.7669, lng: 46.8691, healthcareCapacity: 22, socialVulnerability: 88, economicResilience: 28, population: 28000000 },
    { country: 'Cameroon', lat: 7.3697, lng: 12.3547, healthcareCapacity: 30, socialVulnerability: 80, economicResilience: 35, population: 27000000 },
    { country: 'Niger', lat: 17.6078, lng: 8.0817, healthcareCapacity: 18, socialVulnerability: 92, economicResilience: 22, population: 25000000 },
    { country: 'Burkina Faso', lat: 12.2383, lng: -1.5616, healthcareCapacity: 20, socialVulnerability: 90, economicResilience: 25, population: 22000000 },
    { country: 'Mali', lat: 17.5707, lng: -3.9962, healthcareCapacity: 22, socialVulnerability: 88, economicResilience: 28, population: 21000000 },
    { country: 'Malawi', lat: -13.2543, lng: 34.3015, healthcareCapacity: 25, socialVulnerability: 85, economicResilience: 30, population: 20000000 },
    { country: 'Zambia', lat: -13.1339, lng: 27.8493, healthcareCapacity: 28, socialVulnerability: 82, economicResilience: 32, population: 19000000 },
    { country: 'Senegal', lat: 14.4974, lng: -14.4524, healthcareCapacity: 35, socialVulnerability: 75, economicResilience: 40, population: 17000000 },
    { country: 'Chad', lat: 15.4542, lng: 18.7322, healthcareCapacity: 15, socialVulnerability: 95, economicResilience: 18, population: 17000000 },
    { country: 'Somalia', lat: 5.1521, lng: 46.1996, healthcareCapacity: 12, socialVulnerability: 98, economicResilience: 15, population: 16000000 },
    { country: 'Zimbabwe', lat: -19.0154, lng: 29.1549, healthcareCapacity: 22, socialVulnerability: 88, economicResilience: 25, population: 15000000 },
    { country: 'Guinea', lat: 9.9456, lng: -9.6966, healthcareCapacity: 20, socialVulnerability: 90, economicResilience: 22, population: 13000000 },
    { country: 'Rwanda', lat: -1.9403, lng: 29.8739, healthcareCapacity: 45, socialVulnerability: 68, economicResilience: 52, population: 13000000 },
    { country: 'Benin', lat: 9.3077, lng: 2.3158, healthcareCapacity: 25, socialVulnerability: 85, economicResilience: 30, population: 12000000 },
    { country: 'Tunisia', lat: 33.8869, lng: 9.5375, healthcareCapacity: 65, socialVulnerability: 55, economicResilience: 58, population: 12000000 },
    { country: 'Burundi', lat: -3.3731, lng: 29.9189, healthcareCapacity: 18, socialVulnerability: 92, economicResilience: 20, population: 12000000 },
    { country: 'South Sudan', lat: 6.8770, lng: 31.3070, healthcareCapacity: 10, socialVulnerability: 98, economicResilience: 12, population: 11000000 },
    { country: 'Sierra Leone', lat: 8.4606, lng: -11.7799, healthcareCapacity: 20, socialVulnerability: 90, economicResilience: 25, population: 8000000 },
    { country: 'Togo', lat: 8.6195, lng: 0.8248, healthcareCapacity: 22, socialVulnerability: 88, economicResilience: 28, population: 8000000 },
    { country: 'Libya', lat: 26.3351, lng: 17.2283, healthcareCapacity: 38, socialVulnerability: 72, economicResilience: 35, population: 7000000 },
    { country: 'Liberia', lat: 6.4281, lng: -9.4295, healthcareCapacity: 18, socialVulnerability: 92, economicResilience: 22, population: 5000000 },
    
    // Middle East
    { country: 'Saudi Arabia', lat: 23.8859, lng: 45.0792, healthcareCapacity: 72, socialVulnerability: 45, economicResilience: 68, population: 35000000 },
    { country: 'Iraq', lat: 33.2232, lng: 43.6793, healthcareCapacity: 35, socialVulnerability: 75, economicResilience: 30, population: 41000000 },
    { country: 'Afghanistan', lat: 33.9391, lng: 67.7100, healthcareCapacity: 15, socialVulnerability: 95, economicResilience: 18, population: 40000000 },
    { country: 'Yemen', lat: 15.5527, lng: 48.5164, healthcareCapacity: 12, socialVulnerability: 98, economicResilience: 15, population: 30000000 },
    { country: 'Syria', lat: 34.8021, lng: 38.9968, healthcareCapacity: 25, socialVulnerability: 85, economicResilience: 22, population: 18000000 },
    { country: 'Jordan', lat: 30.5852, lng: 36.2384, healthcareCapacity: 62, socialVulnerability: 58, economicResilience: 55, population: 10000000 },
    { country: 'Lebanon', lat: 33.8547, lng: 35.8623, healthcareCapacity: 55, socialVulnerability: 65, economicResilience: 35, population: 7000000 },
    { country: 'Israel', lat: 31.0461, lng: 34.8516, healthcareCapacity: 88, socialVulnerability: 35, economicResilience: 82, population: 9000000 },
    { country: 'Palestine', lat: 31.9522, lng: 35.2332, healthcareCapacity: 45, socialVulnerability: 75, economicResilience: 30, population: 5000000 },
    { country: 'Kuwait', lat: 29.3117, lng: 47.4818, healthcareCapacity: 78, socialVulnerability: 40, economicResilience: 75, population: 4000000 },
    { country: 'United Arab Emirates', lat: 23.4241, lng: 53.8478, healthcareCapacity: 85, socialVulnerability: 32, economicResilience: 85, population: 10000000 },
    { country: 'Qatar', lat: 25.3548, lng: 51.1839, healthcareCapacity: 88, socialVulnerability: 25, economicResilience: 92, population: 3000000 },
    { country: 'Oman', lat: 21.4735, lng: 55.9754, healthcareCapacity: 72, socialVulnerability: 45, economicResilience: 68, population: 5000000 },
    { country: 'Bahrain', lat: 25.9304, lng: 50.6378, healthcareCapacity: 82, socialVulnerability: 35, economicResilience: 78, population: 2000000 },
    
    // Oceania
    { country: 'Australia', lat: -25.2744, lng: 133.7751, healthcareCapacity: 89, socialVulnerability: 28, economicResilience: 87, population: 25900000 },
    { country: 'New Zealand', lat: -40.9006, lng: 174.8860, healthcareCapacity: 92, socialVulnerability: 25, economicResilience: 88, population: 5100000 },
    { country: 'Papua New Guinea', lat: -6.3150, lng: 143.9555, healthcareCapacity: 22, socialVulnerability: 88, economicResilience: 28, population: 9000000 },
    { country: 'Fiji', lat: -16.7784, lng: 179.4144, healthcareCapacity: 58, socialVulnerability: 62, economicResilience: 55, population: 900000 },
    
    // Central Asia
    { country: 'Kazakhstan', lat: 48.0196, lng: 66.9237, healthcareCapacity: 58, socialVulnerability: 58, economicResilience: 55, population: 19000000 },
    { country: 'Uzbekistan', lat: 41.3775, lng: 64.5853, healthcareCapacity: 48, socialVulnerability: 68, economicResilience: 45, population: 34000000 },
    { country: 'Kyrgyzstan', lat: 41.2044, lng: 74.7661, healthcareCapacity: 52, socialVulnerability: 65, economicResilience: 42, population: 7000000 },
    { country: 'Tajikistan', lat: 38.8610, lng: 71.2761, healthcareCapacity: 45, socialVulnerability: 72, economicResilience: 38, population: 10000000 },
    { country: 'Turkmenistan', lat: 38.9697, lng: 59.5563, healthcareCapacity: 55, socialVulnerability: 62, economicResilience: 48, population: 6000000 }
  ];

  // Apply scenario adjustments
  return baseData.map(country => {
    let adjustmentFactor = 1;
    if (scenario === '2030') {
      adjustmentFactor = isOptimistic ? 0.9 : 1.15;
    } else if (scenario === '2050') {
      adjustmentFactor = isOptimistic ? 0.85 : 1.3;
    }

    const vulnerabilityIndex = Math.round(
      ((100 - country.healthcareCapacity) * 0.4 + 
       country.socialVulnerability * 0.4 + 
       (100 - country.economicResilience) * 0.2) * adjustmentFactor
    );

    const riskLevel = 
      vulnerabilityIndex >= 80 ? 'VeryHigh' :
      vulnerabilityIndex >= 60 ? 'High' :
      vulnerabilityIndex >= 40 ? 'Medium' :
      vulnerabilityIndex >= 20 ? 'Low' : 'VeryLow';

    return {
      ...country,
      vulnerabilityIndex: Math.min(100, vulnerabilityIndex),
      riskLevel
    };
  });
};

export default function VulnerabilityMap({ scenario, isOptimistic, onCountrySelect }) {
  const mapRef = useRef(null);
  const mapInstanceRef = useRef(null);
  const markersRef = useRef([]);

  useEffect(() => {
    if (!mapRef.current || mapInstanceRef.current) return;

    // Initialize map
    mapInstanceRef.current = L.map(mapRef.current, {
      center: [20, 0],
      zoom: 2,
      minZoom: 2,
      maxZoom: 6,
      worldCopyJump: true
    });

    // Add dark tile layer
    L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {
      attribution: '© OpenStreetMap contributors © CARTO'
    }).addTo(mapInstanceRef.current);

    return () => {
      if (mapInstanceRef.current) {
        mapInstanceRef.current.remove();
        mapInstanceRef.current = null;
      }
    };
  }, []);

  useEffect(() => {
    if (!mapInstanceRef.current) return;

    // Clear existing layers
    markersRef.current.forEach(layer => layer.remove());
    markersRef.current = [];

    // Get vulnerability data
    const data = generatePandemicData(scenario, isOptimistic);

    // Load GeoJSON for country boundaries
    fetch('https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_110m_admin_0_countries.geojson')
      .then(response => response.json())
      .then(geoData => {
        const countryLayer = L.geoJSON(geoData, {
          style: function(feature) {
            const countryName = feature.properties.NAME || feature.properties.NAME_EN || feature.properties.ADMIN;
            const countryData = findCountryInData(countryName, data);
            
            if (countryData) {
              const color = getVulnerabilityColor(countryData.vulnerabilityIndex);
              return {
                fillColor: color,
                weight: 1,
                opacity: 0.8,
                color: '#ffffff',
                fillOpacity: 0.7
              };
            } else {
              return {
                fillColor: '#64748b',
                weight: 1,
                opacity: 0.3,
                color: '#ffffff',
                fillOpacity: 0.2
              };
            }
          },
          onEachFeature: function(feature, layer) {
            const countryName = feature.properties.NAME || feature.properties.NAME_EN || feature.properties.ADMIN;
            const countryData = findCountryInData(countryName, data);
            
            if (countryData) {
              const color = getVulnerabilityColor(countryData.vulnerabilityIndex);
              layer.bindPopup(`
                <div style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; min-width: 250px; padding: 10px;">
                  <h3 style="margin: 0 0 10px 0; color: #121625; font-size: 16px;">${countryData.country}</h3>
                  <div style="font-size: 13px; line-height: 1.5; color: #1a1f35;">
                    <div style="margin-bottom: 6px;"><strong>Vulnerability Index:</strong> ${countryData.vulnerabilityIndex}</div>
                    <div style="margin-bottom: 6px;"><strong>Healthcare Capacity:</strong> ${countryData.healthcareCapacity}</div>
                    <div style="margin-bottom: 6px;"><strong>Social Vulnerability:</strong> ${countryData.socialVulnerability}</div>
                    <div style="margin-bottom: 6px;"><strong>Economic Resilience:</strong> ${countryData.economicResilience}</div>
                    <div style="margin-bottom: 6px;"><strong>Risk Level:</strong> <span style="color: ${color}; font-weight: 600;">${countryData.riskLevel}</span></div>
                  </div>
                </div>
              `);

              // Add click handler
              layer.on('click', () => {
                onCountrySelect({
                  name: countryData.country,
                  healthcareCapacity: countryData.healthcareCapacity,
                  socialVulnerability: countryData.socialVulnerability,
                  economicResilience: countryData.economicResilience,
                  riskLevel: countryData.riskLevel,
                  vulnerabilityIndex: countryData.vulnerabilityIndex
                });
              });
            }

            // Add hover effects
            layer.on({
              mouseover: function(e) {
                const layer = e.target;
                layer.setStyle({
                  weight: 3,
                  color: '#00e0ff',
                  fillOpacity: 0.9
                });
              },
              mouseout: function(e) {
                countryLayer.resetStyle(e.target);
              }
            });
          }
        }).addTo(mapInstanceRef.current);

        markersRef.current.push(countryLayer);

        // Add outbreak origins and spread patterns overlay
        outbreakData.forEach(outbreak => {
          // Add origin marker with special styling
          const originIcon = L.divIcon({
            html: `<div style="
              width: 20px; 
              height: 20px; 
              background: #FF4444; 
              border: 3px solid #ffffff; 
              border-radius: 50%; 
              box-shadow: 0 0 10px rgba(255, 68, 68, 0.6);
              animation: pulse 2s infinite;
            "></div>
            <style>
            @keyframes pulse {
              0% { box-shadow: 0 0 0 0 rgba(255, 68, 68, 0.7); }
              70% { box-shadow: 0 0 0 10px rgba(255, 68, 68, 0); }
              100% { box-shadow: 0 0 0 0 rgba(255, 68, 68, 0); }
            }
            </style>`,
            className: 'outbreak-origin',
            iconSize: [20, 20],
            iconAnchor: [10, 10]
          });

          const originMarker = L.marker([outbreak.origin.lat, outbreak.origin.lng], { 
            icon: originIcon,
            zIndexOffset: 1000 
          }).addTo(mapInstanceRef.current);

          originMarker.bindPopup(`
            <div style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; min-width: 280px; padding: 15px;">
              <h3 style="margin: 0 0 10px 0; color: #FF4444; font-size: 18px;">🦠 ${outbreak.name}</h3>
              <div style="font-size: 14px; line-height: 1.5; color: #1a1f35;">
                <div style="margin-bottom: 8px;"><strong>Origin:</strong> ${outbreak.origin.location}</div>
                <div style="margin-bottom: 8px;"><strong>First Detected:</strong> ${outbreak.startDate}</div>
                <div style="margin-bottom: 8px;"><strong>Peak:</strong> ${outbreak.peakDate}</div>
                <div style="margin-bottom: 8px;"><strong>Category:</strong> ${outbreak.category}</div>
                <div style="margin-bottom: 8px;"><strong>Severity:</strong> <span style="color: #FF4444; font-weight: 600;">${outbreak.severity}</span></div>
                <div style="margin-top: 12px; padding: 8px; background: #f8f9fa; border-radius: 4px; font-size: 12px;">
                  <strong>Spread Pattern:</strong> Spread to ${outbreak.spread.length} major locations within ${
                    Math.ceil((new Date(outbreak.peakDate + '-01') - new Date(outbreak.startDate + '-01')) / (1000 * 60 * 60 * 24 * 30))
                  } months
                </div>
              </div>
            </div>
          `);

          markersRef.current.push(originMarker);

          // Add spread pattern lines and markers
          outbreak.spread.forEach((location, index) => {
            // Create spread marker
            const spreadIcon = L.divIcon({
              html: `<div style="
                width: 12px; 
                height: 12px; 
                background: #FF9800; 
                border: 2px solid #ffffff; 
                border-radius: 50%;
                opacity: 0.8;
              "></div>`,
              className: 'outbreak-spread',
              iconSize: [12, 12],
              iconAnchor: [6, 6]
            });

            const spreadMarker = L.marker([location.lat, location.lng], { 
              icon: spreadIcon,
              zIndexOffset: 500 
            }).addTo(mapInstanceRef.current);

            spreadMarker.bindPopup(`
              <div style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; min-width: 220px; padding: 12px;">
                <h4 style="margin: 0 0 8px 0; color: #FF9800; font-size: 16px;">${outbreak.name} Spread</h4>
                <div style="font-size: 13px; line-height: 1.4; color: #1a1f35;">
                  <div style="margin-bottom: 6px;"><strong>Location:</strong> ${location.location}</div>
                  <div style="margin-bottom: 6px;"><strong>Detected:</strong> ${location.date}</div>
                </div>
              </div>
            `);

            markersRef.current.push(spreadMarker);

            // Create line from origin to spread location
            const spreadLine = L.polyline([
              [outbreak.origin.lat, outbreak.origin.lng],
              [location.lat, location.lng]
            ], {
              color: '#FF9800',
              weight: 2,
              opacity: 0.6,
              dashArray: '5, 5'
            }).addTo(mapInstanceRef.current);

            markersRef.current.push(spreadLine);

            // Add lines between spread locations to show progression
            if (index > 0) {
              const prevLocation = outbreak.spread[index - 1];
              const connectionLine = L.polyline([
                [prevLocation.lat, prevLocation.lng],
                [location.lat, location.lng]
              ], {
                color: '#FFC107',
                weight: 1,
                opacity: 0.4,
                dashArray: '3, 3'
              }).addTo(mapInstanceRef.current);

              markersRef.current.push(connectionLine);
            }
          });
        });
      })
      .catch(error => {
        console.error('Error loading country boundaries:', error);
        // Fallback to circle markers if GeoJSON fails
        data.forEach(country => {
          const color = getVulnerabilityColor(country.vulnerabilityIndex);
          const marker = L.circleMarker([country.lat, country.lng], {
            radius: Math.min(20, Math.max(8, Math.sqrt(country.population) / 1500)),
            fillColor: color,
            color: '#ffffff',
            weight: 2,
            opacity: 1,
            fillOpacity: 0.8
          }).addTo(mapInstanceRef.current);

          marker.bindPopup(`
            <div style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; min-width: 250px; padding: 10px;">
              <h3 style="margin: 0 0 10px 0; color: #121625; font-size: 16px;">${country.country}</h3>
              <div style="font-size: 13px; line-height: 1.5; color: #1a1f35;">
                <div style="margin-bottom: 6px;"><strong>Vulnerability Index:</strong> ${country.vulnerabilityIndex}</div>
                <div style="margin-bottom: 6px;"><strong>Healthcare Capacity:</strong> ${country.healthcareCapacity}</div>
                <div style="margin-bottom: 6px;"><strong>Social Vulnerability:</strong> ${country.socialVulnerability}</div>
                <div style="margin-bottom: 6px;"><strong>Economic Resilience:</strong> ${country.economicResilience}</div>
                <div style="margin-bottom: 6px;"><strong>Risk Level:</strong> <span style="color: ${color}; font-weight: 600;">${country.riskLevel}</span></div>
              </div>
            </div>
          `);

          markersRef.current.push(marker);
        });
      });
  }, [scenario, isOptimistic, onCountrySelect]);

  // Helper function to find country data
  function findCountryInData(geoJsonName, data) {
    // Direct match
    let country = data.find(d => d.country === geoJsonName);
    if (country) return country;
    
    // Common name variations
    const nameMap = {
      'United States of America': 'United States',
      'Russian Federation': 'Russia',
      'Korea, Republic of': 'South Korea',
      'Korea, Dem. People\'s Rep.': 'North Korea',
      'Iran, Islamic Rep.': 'Iran',
      'Venezuela, RB': 'Venezuela',
      'Bolivia, Plurinational State of': 'Bolivia',
      'Tanzania, United Republic of': 'Tanzania',
      'Congo, Dem. Rep.': 'Democratic Republic of Congo',
      'Congo, Rep.': 'Congo',
      'Syrian Arab Republic': 'Syria',
      'Yemen, Rep.': 'Yemen',
      'Lao PDR': 'Laos',
      'Myanmar (Burma)': 'Myanmar',
      'Côte d\'Ivoire': 'Ivory Coast',
      'Macedonia': 'North Macedonia'
    };
    
    const mappedName = nameMap[geoJsonName];
    if (mappedName) {
      country = data.find(d => d.country === mappedName);
      if (country) return country;
    }
    
    // Partial matching
    return data.find(d => 
      d.country.toLowerCase().includes(geoJsonName.toLowerCase()) ||
      geoJsonName.toLowerCase().includes(d.country.toLowerCase())
    );
  }

  // Helper function to get vulnerability color
  function getVulnerabilityColor(vulnerabilityIndex) {
    if (vulnerabilityIndex >= 80) return '#FF4444'; // Very High - Red
    if (vulnerabilityIndex >= 60) return '#FF9800'; // High - Orange  
    if (vulnerabilityIndex >= 40) return '#FFD700'; // Medium - Yellow
    if (vulnerabilityIndex >= 20) return '#90EE90'; // Low - Light Green
    return '#2E8B57'; // Very Low - Green
  }

  return <div ref={mapRef} style={{ width: '100%', height: '100%', borderRadius: '8px' }} />;
}