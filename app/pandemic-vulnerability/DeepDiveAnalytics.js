'use client';

import { useEffect, useRef, useState } from 'react';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import dynamic from 'next/dynamic';
import styles from './pandemic-vulnerability.module.css';

// Dynamically import Plotly to avoid SSR issues
const Plot = dynamic(() => import('react-plotly.js'), { ssr: false });

// Import US comprehensive data
import { 
  usStateResilienceData, 
  usTerritoryResilienceData, 
  federalDistrictData, 
  usDataSources as usSourcesData,
  methodologyDescription,
  communityLevelFramework
} from './usComprehensiveData';

// Import historical outbreaks and insights data
import {
  historicalOutbreaks,
  outbreakCategories,
  resilienceCorrelations,
  resilienceInsights,
  calculateOutbreakSeverityScore,
  getOutbreakLessonsLearned
} from './historicalOutbreaksData';

// Import comprehensive policy scenarios
import {
  comprehensivePolicyScenarios,
  calculateScenarioImpact,
  generateScenarioHeatmapData,
  methodologyReferences
} from './policyScenarioModeling';

// Import resilience data from the resilience map
const countryResilienceData = {
  'United States': {
    name: 'United States',
    overallScore: 72,
    dimensions: { healthcare: 78, information: 65, social: 70, economic: 75, governance: 71, infrastructure: 82, environmental: 68 },
    vulnerabilities: ['Information trust', 'Health disparities', 'Political polarization'],
    strengths: ['Medical technology', 'Research capacity', 'Economic resources']
  },
  'China': {
    name: 'China',
    overallScore: 74,
    dimensions: { healthcare: 72, information: 55, social: 68, economic: 80, governance: 75, infrastructure: 85, environmental: 60 },
    vulnerabilities: ['Environmental health', 'Information transparency'],
    strengths: ['Infrastructure development', 'Central coordination', 'Manufacturing capacity']
  },
  'Germany': {
    name: 'Germany',
    overallScore: 81,
    dimensions: { healthcare: 85, information: 78, social: 82, economic: 84, governance: 80, infrastructure: 88, environmental: 75 },
    vulnerabilities: ['Aging population', 'Supply chain dependencies'],
    strengths: ['Healthcare system', 'Industrial capacity', 'Social welfare']
  },
  'Brazil': {
    name: 'Brazil',
    overallScore: 58,
    dimensions: { healthcare: 55, information: 60, social: 52, economic: 58, governance: 56, infrastructure: 62, environmental: 65 },
    vulnerabilities: ['Healthcare access inequality', 'Economic disparities'],
    strengths: ['Natural resources', 'Community resilience', 'Biodiversity']
  },
  'India': {
    name: 'India',
    overallScore: 54,
    dimensions: { healthcare: 48, information: 58, social: 50, economic: 55, governance: 52, infrastructure: 60, environmental: 58 },
    vulnerabilities: ['Healthcare infrastructure', 'Information access'],
    strengths: ['Population diversity', 'Tech innovation', 'Community networks']
  },
  'United Kingdom': {
    name: 'United Kingdom',
    overallScore: 76,
    dimensions: { healthcare: 80, information: 75, social: 72, economic: 78, governance: 82, infrastructure: 85, environmental: 70 },
    vulnerabilities: ['Economic inequality', 'Healthcare funding'],
    strengths: ['Research excellence', 'Global connectivity', 'Democratic institutions']
  },
  'France': {
    name: 'France',
    overallScore: 78,
    dimensions: { healthcare: 88, information: 72, social: 75, economic: 76, governance: 78, infrastructure: 82, environmental: 72 },
    vulnerabilities: ['Social tensions', 'Economic pressures'],
    strengths: ['Healthcare system', 'Social protection', 'Cultural resilience']
  },
  'Japan': {
    name: 'Japan',
    overallScore: 79,
    dimensions: { healthcare: 85, information: 70, social: 80, economic: 75, governance: 78, infrastructure: 90, environmental: 75 },
    vulnerabilities: ['Aging society', 'Natural disasters'],
    strengths: ['Disaster preparedness', 'Technological innovation', 'Social cohesion']
  },
  'South Korea': {
    name: 'South Korea',
    overallScore: 77,
    dimensions: { healthcare: 82, information: 75, social: 74, economic: 78, governance: 76, infrastructure: 88, environmental: 68 },
    vulnerabilities: ['Environmental challenges', 'Economic pressures'],
    strengths: ['Digital infrastructure', 'Healthcare system', 'Crisis response']
  },
  'Canada': {
    name: 'Canada',
    overallScore: 80,
    dimensions: { healthcare: 85, information: 78, social: 82, economic: 78, governance: 85, infrastructure: 80, environmental: 78 },
    vulnerabilities: ['Geographic challenges', 'Healthcare access in rural areas'],
    strengths: ['Healthcare system', 'Social cohesion', 'Natural resources']
  }
};

// Use comprehensive policy scenarios from the imported file
const usPolicyScenarios = comprehensivePolicyScenarios;

export default function DeepDiveAnalytics({ scenario, isOptimistic, onCountrySelect }) {
  const [deepDiveTab, setDeepDiveTab] = useState('overview');
  const [selectedScenario, setSelectedScenario] = useState('baseline');
  const [sortBy, setSortBy] = useState('vulnerability');
  const [sortOrder, setSortOrder] = useState('desc');
  const [searchTerm, setSearchTerm] = useState('');

  const deepDiveTabs = [
    { key: 'overview', label: 'üåç Global Overview' },
    { key: 'usdeep', label: 'üá∫üá∏ US Deep Dive' },
    { key: 'scenarios', label: 'üéØ Policy Scenarios' },
    { key: 'outbreaks', label: '‚ö° Historical Outbreaks' },
    { key: 'insights', label: 'üîç Resilience Insights' }
  ];

  return (
    <div className={styles.deepDiveContainer}>
      {/* Tab Navigation */}
      <div className={styles.deepDiveTabNavigation}>
        {deepDiveTabs.map(tab => (
          <button
            key={tab.key}
            className={`${styles.deepDiveTabButton} ${deepDiveTab === tab.key ? styles.active : ''}`}
            onClick={() => setDeepDiveTab(tab.key)}
          >
            {tab.label}
          </button>
        ))}
      </div>

      {/* Tab Content */}
      <div className={styles.deepDiveContent}>
        {/* Global Overview Tab */}
        {deepDiveTab === 'overview' && (
          <div>
            <h3 className={styles.deepDiveTitle}>üåç Global Pandemic Intelligence Overview</h3>
            <p className={styles.deepDiveDescription}>
              Comprehensive analysis of global pandemic preparedness, resilience frameworks, and outbreak intelligence.
            </p>
            
            {/* Country Resilience Profiles */}
            <div className={styles.deepDiveSection}>
              <h4>üìä Country Resilience Profiles</h4>
              {Object.entries(countryResilienceData).map(([countryName, data]) => (
                <div key={countryName} className={styles.deepDiveCard}>
                  <div className={styles.cardHeader}>
                    <h5>{data.name}</h5>
                    <div className={`${styles.scoreBadge} ${data.overallScore >= 75 ? styles.high : data.overallScore >= 60 ? styles.medium : styles.low}`}>
                      {data.overallScore}
                    </div>
                  </div>
                  
                  <div className={styles.dimensionsGrid}>
                    {Object.entries(data.dimensions).map(([dimension, score]) => (
                      <div key={dimension} className={styles.dimensionItem}>
                        <span className={styles.dimensionLabel}>{dimension}:</span>
                        <span className={`${styles.dimensionScore} ${score >= 75 ? styles.high : score >= 60 ? styles.medium : styles.low}`}>
                          {score}
                        </span>
                      </div>
                    ))}
                  </div>
                  
                  <div className={styles.strengthsVulnerabilities}>
                    <div className={styles.strengthsSection}>
                      <strong>üí™ Strengths:</strong>
                      <ul>
                        {data.strengths.map((strength, i) => (
                          <li key={i}>{strength}</li>
                        ))}
                      </ul>
                    </div>
                    <div className={styles.vulnerabilitiesSection}>
                      <strong>‚ö†Ô∏è Vulnerabilities:</strong>
                      <ul>
                        {data.vulnerabilities.map((vulnerability, i) => (
                          <li key={i}>{vulnerability}</li>
                        ))}
                      </ul>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* US Deep Dive Tab */}
        {deepDiveTab === 'usdeep' && (
          <div>
            <h3 className={styles.deepDiveTitle}>üá∫üá∏ United States Deep Dive Analysis</h3>
            <p className={styles.deepDiveDescription}>
              Comprehensive state-by-state pandemic resilience analysis covering all 50 states, 5 territories, 
              and the District of Columbia. Data sources: CDC, ASPR, Bureau of Labor Statistics, American Hospital Association (2023-2024).
            </p>

            {/* National Capacity Overview */}
            <div className={styles.deepDiveSection}>
              <h4>üè• National Healthcare Capacity</h4>
              <div className={styles.capacityGrid}>
                <div className={styles.capacityCard}>
                  <h5>Hospital Infrastructure</h5>
                  <div className={styles.capacityMetrics}>
                    <div className={styles.metricRow}>
                      <span>Total Beds:</span>
                      <strong>919,559</strong>
                    </div>
                    <div className={styles.metricRow}>
                      <span>ICU Beds:</span>
                      <strong>96,596</strong>
                    </div>
                    <div className={styles.metricRow}>
                      <span>Isolation Rooms:</span>
                      <strong>12,847</strong>
                    </div>
                    <div className={styles.metricRow}>
                      <span>Surge Capacity:</span>
                      <strong>20% in 7 days</strong>
                    </div>
                  </div>
                  <div className={styles.dataSource}>Source: AHA 2023</div>
                </div>
                
                <div className={styles.capacityCard}>
                  <h5>Healthcare Workforce</h5>
                  <div className={styles.capacityMetrics}>
                    <div className={styles.metricRow}>
                      <span>Physicians:</span>
                      <strong>1,073,616</strong>
                    </div>
                    <div className={styles.metricRow}>
                      <span>Nurses:</span>
                      <strong>4,234,567</strong>
                    </div>
                    <div className={styles.metricRow}>
                      <span>Epidemiologists:</span>
                      <strong>7,893</strong>
                    </div>
                    <div className={styles.metricRow}>
                      <span>Lab Technicians:</span>
                      <strong>335,400</strong>
                    </div>
                  </div>
                  <div className={styles.dataSource}>Source: BLS 2023</div>
                </div>
                
                <div className={styles.capacityCard}>
                  <h5>Strategic National Stockpile</h5>
                  <div className={styles.capacityMetrics}>
                    <div className={styles.metricRow}>
                      <span>N95 Respirators:</span>
                      <strong>145M</strong>
                    </div>
                    <div className={styles.metricRow}>
                      <span>Surgical Masks:</span>
                      <strong>890M</strong>
                    </div>
                    <div className={styles.metricRow}>
                      <span>Ventilators:</span>
                      <strong>162,549</strong>
                    </div>
                    <div className={styles.metricRow}>
                      <span>Antivirals:</span>
                      <strong>81M courses</strong>
                    </div>
                  </div>
                  <div className={styles.dataSource}>Source: ASPR 2024</div>
                </div>
              </div>
            </div>

            {/* US Resilience Scatter Plot */}
            <div className={styles.deepDiveSection}>
              <h4>üìà US States Resilience vs Vulnerability Analysis</h4>
              <div className={styles.plotContainer}>
                {typeof window !== 'undefined' && (
                  <Plot
                    data={[
                      {
                        x: Object.values(usStateResilienceData).map(state => state.dimensions.healthcare),
                        y: Object.values(usStateResilienceData).map(state => state.dimensions.social),
                        mode: 'markers',
                        type: 'scatter',
                        name: 'US States',
                        text: Object.values(usStateResilienceData).map(state => 
                          `${state.name}<br>Overall Score: ${state.overallScore}<br>Population: ${(state.population/1000000).toFixed(1)}M<br>Rank: #${state.rank}`
                        ),
                        hovertemplate: '%{text}<br>Healthcare: %{x}<br>Social: %{y}<extra></extra>',
                        marker: {
                          size: Object.values(usStateResilienceData).map(state => Math.sqrt(state.population/1000000) * 3 + 8),
                          color: Object.values(usStateResilienceData).map(state => state.overallScore),
                          colorscale: [
                            [0, '#FF4444'],
                            [0.2, '#FF9800'], 
                            [0.4, '#FFD700'],
                            [0.6, '#90EE90'],
                            [1, '#2E8B57']
                          ],
                          colorbar: {
                            title: 'Resilience Score',
                            titlefont: { color: '#f0f2f5' },
                            tickfont: { color: '#f0f2f5' }
                          },
                          line: {
                            width: 1,
                            color: 'rgba(255, 255, 255, 0.3)'
                          },
                          opacity: 0.8
                        }
                      }
                    ]}
                    layout={{
                      title: {
                        text: 'US States: Healthcare vs Social Resilience',
                        font: { color: '#f0f2f5', size: 16 }
                      },
                      xaxis: {
                        title: 'Healthcare Capacity Score',
                        gridcolor: 'rgba(255, 255, 255, 0.1)',
                        color: '#f0f2f5',
                        tickfont: { color: '#f0f2f5' }
                      },
                      yaxis: {
                        title: 'Social Resilience Score', 
                        gridcolor: 'rgba(255, 255, 255, 0.1)',
                        color: '#f0f2f5',
                        tickfont: { color: '#f0f2f5' }
                      },
                      plot_bgcolor: 'rgba(0,0,0,0)',
                      paper_bgcolor: 'rgba(0,0,0,0)',
                      font: { color: '#f0f2f5' },
                      margin: { l: 60, r: 60, t: 50, b: 60 },
                      hovermode: 'closest'
                    }}
                    config={{
                      displayModeBar: false,
                      responsive: true
                    }}
                    style={{ width: '100%', height: '400px' }}
                  />
                )}
              </div>
            </div>

            {/* Top and Bottom States */}
            <div className={styles.statesComparison}>
              <div className={styles.topStates}>
                <h4>üèÜ Top 10 Most Resilient States</h4>
                <div className={styles.statesList}>
                  {Object.values(usStateResilienceData)
                    .sort((a, b) => b.overallScore - a.overallScore)
                    .slice(0, 10)
                    .map((state, index) => (
                      <div key={state.name} className={styles.stateCard}>
                        <div className={styles.stateRank}>#{index + 1}</div>
                        <div className={styles.stateInfo}>
                          <div className={styles.stateName}>{state.name}</div>
                          <div className={styles.statePopulation}>Pop: {state.population.toLocaleString()}</div>
                        </div>
                        <div className={styles.stateScore}>{state.overallScore}</div>
                      </div>
                    ))}
                </div>
              </div>
              
              <div className={styles.bottomStates}>
                <h4>üéØ States Needing Support</h4>
                <div className={styles.statesList}>
                  {Object.values(usStateResilienceData)
                    .sort((a, b) => a.overallScore - b.overallScore)
                    .slice(0, 10)
                    .map((state, index) => (
                      <div key={state.name} className={styles.stateCard}>
                        <div className={styles.stateRank}>#{Object.values(usStateResilienceData).length - index}</div>
                        <div className={styles.stateInfo}>
                          <div className={styles.stateName}>{state.name}</div>
                          <div className={styles.statePopulation}>Pop: {state.population.toLocaleString()}</div>
                        </div>
                        <div className={styles.stateScore}>{state.overallScore}</div>
                      </div>
                    ))}
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Policy Scenarios Tab */}
        {deepDiveTab === 'scenarios' && (
          <div>
            <h3 className={styles.deepDiveTitle}>üéØ US Policy Impact Scenarios</h3>
            <p className={styles.deepDiveDescription}>
              Evidence-based modeling of how policy changes affect pandemic preparedness and response capacity across states.
            </p>

            {/* Scenario Selector */}
            <div className={styles.scenarioSelector}>
              {Object.entries(usPolicyScenarios).map(([key, scenario]) => (
                <button
                  key={key}
                  className={`${styles.scenarioButton} ${selectedScenario === key ? styles.active : ''}`}
                  onClick={() => setSelectedScenario(key)}
                >
                  {scenario.name}
                </button>
              ))}
            </div>

            {/* Selected Scenario Details */}
            {selectedScenario && (
              <div className={styles.scenarioDetails}>
                <div className={styles.scenarioHeader}>
                  <h4>{usPolicyScenarios[selectedScenario].name}</h4>
                  <p>{usPolicyScenarios[selectedScenario].description}</p>
                </div>

                {/* Impact Metrics */}
                <div className={styles.impactMetrics}>
                  <div className={styles.metricCard}>
                    <div className={styles.metricLabel}>Global Health Funding</div>
                    <div className={styles.metricValue}>
                      {usPolicyScenarios[selectedScenario].funding?.globalHealth || 100}%
                    </div>
                  </div>
                  <div className={styles.metricCard}>
                    <div className={styles.metricLabel}>CDC Budget</div>
                    <div className={styles.metricValue}>
                      {usPolicyScenarios[selectedScenario].funding?.cdcBudget || 100}%
                    </div>
                  </div>
                  <div className={styles.metricCard}>
                    <div className={styles.metricLabel}>NIH Research</div>
                    <div className={styles.metricValue}>
                      {usPolicyScenarios[selectedScenario].funding?.nihResearch || 100}%
                    </div>
                  </div>
                  <div className={styles.metricCard}>
                    <div className={styles.metricLabel}>Hospital Readiness</div>
                    <div className={styles.metricValue}>
                      {usPolicyScenarios[selectedScenario].funding?.hospitalReadiness || 100}%
                    </div>
                  </div>
                </div>

                {/* Key Metrics for Baseline */}
                {selectedScenario === 'baseline' && usPolicyScenarios[selectedScenario].metrics && (
                  <div className={styles.baselineMetrics}>
                    <h5>üìä Current Preparedness Scores</h5>
                    <div className={styles.metricsGrid}>
                      {Object.entries(usPolicyScenarios[selectedScenario].metrics).map(([metric, value]) => (
                        <div key={metric} className={styles.metricItem}>
                          <span className={styles.metricName}>
                            {metric.replace(/([A-Z])/g, ' $1').replace(/Score$/, '')}
                          </span>
                          <span className={`${styles.metricScore} ${value >= 75 ? styles.high : value >= 60 ? styles.medium : styles.low}`}>
                            {value}
                          </span>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Projected Outcomes */}
                {usPolicyScenarios[selectedScenario].projectedOutcomes && (
                  <div className={styles.projectedOutcomes}>
                    <h5>üìà Projected Health Outcomes</h5>
                    <div className={styles.outcomesGrid}>
                      <div className={styles.outcomeCard}>
                        <h6>Outbreak Probability (Annual)</h6>
                        <div className={styles.outcomeMetrics}>
                          <span>Minor: {usPolicyScenarios[selectedScenario].projectedOutcomes.outbreakProbability.domestic.minor}%</span>
                          <span>Severe: {usPolicyScenarios[selectedScenario].projectedOutcomes.outbreakProbability.domestic.severe}%</span>
                          <span>Pandemic: {usPolicyScenarios[selectedScenario].projectedOutcomes.outbreakProbability.domestic.pandemic}%</span>
                        </div>
                      </div>
                      <div className={styles.outcomeCard}>
                        <h6>Economic Impact</h6>
                        <div className={styles.outcomeMetrics}>
                          <span>Healthcare: ${(usPolicyScenarios[selectedScenario].projectedOutcomes.economicImpact.healthcareCosts / 1000).toFixed(1)}B</span>
                          <span>Total Annual: ${(usPolicyScenarios[selectedScenario].projectedOutcomes.economicImpact.totalAnnualCost / 1000).toFixed(1)}B</span>
                          <span>Pandemic Risk: ${(usPolicyScenarios[selectedScenario].projectedOutcomes.economicImpact.pandemicRiskCost / 1000).toFixed(1)}B</span>
                        </div>
                      </div>
                    </div>
                  </div>
                )}

                {/* Key Policy Changes */}
                <div className={styles.policyChanges}>
                  <h5>üìã Key Policy Changes</h5>
                  <ul className={styles.changesList}>
                    {usPolicyScenarios[selectedScenario].keyChanges?.map((change, index) => (
                      <li key={index}>{change}</li>
                    ))}
                  </ul>
                </div>

                {/* State-Level Impacts */}
                {Object.keys(usPolicyScenarios[selectedScenario].stateImpacts || {}).length > 0 && (
                  <div className={styles.stateImpacts}>
                    <h5>üó∫Ô∏è Projected State-Level Impacts</h5>
                    <div className={styles.impactsList}>
                      {Object.entries(usPolicyScenarios[selectedScenario].stateImpacts).map(([state, impact]) => (
                        <div key={state} className={styles.impactCard}>
                          <div className={styles.impactState}>{state}</div>
                          <div className={`${styles.impactChange} ${impact.vulnerability > 0 ? styles.negative : styles.positive}`}>
                            {impact.vulnerability > 0 ? '+' : ''}{impact.vulnerability}% vulnerability
                          </div>
                          <div className={styles.impactReasoning}>{impact.reasoning}</div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Global Impact Assessment */}
                {usPolicyScenarios[selectedScenario].globalImpacts && (
                  <div className={styles.globalImpacts}>
                    <h5>üåç Global Ripple Effects</h5>
                    <ul className={styles.globalImpactsList}>
                      {usPolicyScenarios[selectedScenario].globalImpacts.map((impact, index) => (
                        <li key={index}>{impact}</li>
                      ))}
                    </ul>
                  </div>
                )}
              </div>
            )}
          </div>
        )}

        {/* Historical Outbreaks Tab */}
        {deepDiveTab === 'outbreaks' && (
          <div>
            <h3 className={styles.deepDiveTitle}>‚ö° Historical Outbreaks Analysis</h3>
            <p className={styles.deepDiveDescription}>
              Comprehensive analysis of major disease outbreaks from 2000-2023, their impacts, and lessons learned for future preparedness.
            </p>

            {/* Outbreak Timeline Visualization */}
            <div className={styles.deepDiveSection}>
              <h4>üìÖ Major Outbreaks Timeline (2000-2023)</h4>
              <div className={styles.plotContainer}>
                {typeof window !== 'undefined' && (
                  <Plot
                    data={[
                      {
                        x: historicalOutbreaks.map(o => o.year),
                        y: historicalOutbreaks.map(o => Math.log10(o.totalCases + 1)),
                        mode: 'markers',
                        type: 'scatter',
                        name: 'Outbreak Scale',
                        text: historicalOutbreaks.map(o => 
                          `${o.name}<br>Cases: ${o.totalCases.toLocaleString()}<br>Deaths: ${o.totalDeaths.toLocaleString()}<br>CFR: ${o.cfr}%<br>Countries: ${o.affectedCountries}`
                        ),
                        hovertemplate: '%{text}<extra></extra>',
                        marker: {
                          size: historicalOutbreaks.map(o => Math.sqrt(o.affectedCountries) * 5 + 10),
                          color: historicalOutbreaks.map(o => outbreakCategories[o.category]?.color || '#666'),
                          line: {
                            width: 2,
                            color: 'rgba(255, 255, 255, 0.5)'
                          },
                          opacity: 0.8
                        }
                      }
                    ]}
                    layout={{
                      title: {
                        text: 'Disease Outbreaks by Year and Scale',
                        font: { color: '#f0f2f5', size: 16 }
                      },
                      xaxis: {
                        title: 'Year',
                        gridcolor: 'rgba(255, 255, 255, 0.1)',
                        color: '#f0f2f5',
                        tickfont: { color: '#f0f2f5' },
                        range: [2000, 2024]
                      },
                      yaxis: {
                        title: 'Log‚ÇÅ‚ÇÄ(Total Cases)',
                        gridcolor: 'rgba(255, 255, 255, 0.1)',
                        color: '#f0f2f5',
                        tickfont: { color: '#f0f2f5' }
                      },
                      plot_bgcolor: 'rgba(0,0,0,0)',
                      paper_bgcolor: 'rgba(0,0,0,0)',
                      font: { color: '#f0f2f5' },
                      margin: { l: 60, r: 60, t: 50, b: 60 },
                      hovermode: 'closest'
                    }}
                    config={{
                      displayModeBar: false,
                      responsive: true
                    }}
                    style={{ width: '100%', height: '400px' }}
                  />
                )}
              </div>
            </div>

            {/* Outbreak Categories */}
            <div className={styles.deepDiveSection}>
              <h4>ü¶† Outbreak Categories and Characteristics</h4>
              <div className={styles.categoriesGrid}>
                {Object.entries(outbreakCategories).map(([category, data]) => (
                  <div key={category} className={styles.categoryCard} style={{ borderColor: data.color }}>
                    <div className={styles.categoryHeader} style={{ backgroundColor: data.color + '20' }}>
                      <h5 style={{ color: data.color }}>{category}</h5>
                    </div>
                    <div className={styles.categoryContent}>
                      <p className={styles.categoryCharacteristics}>{data.characteristics}</p>
                      <div className={styles.categoryExamples}>
                        <strong>Examples:</strong> {data.examples.join(', ')}
                      </div>
                      <div className={styles.categoryNeeds}>
                        <strong>Key Preparedness Needs:</strong>
                        <ul>
                          {data.preparednessNeeds.map((need, i) => (
                            <li key={i}>{need}</li>
                          ))}
                        </ul>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Major Outbreaks Details */}
            <div className={styles.deepDiveSection}>
              <h4>üìä Major Outbreak Profiles</h4>
              <div className={styles.outbreaksGrid}>
                {historicalOutbreaks
                  .sort((a, b) => calculateOutbreakSeverityScore(b) - calculateOutbreakSeverityScore(a))
                  .slice(0, 6)
                  .map(outbreak => (
                    <div key={outbreak.id} className={styles.outbreakCard}>
                      <div className={styles.outbreakHeader}>
                        <h5>{outbreak.name}</h5>
                        <span className={styles.outbreakYear}>{outbreak.year}-{outbreak.endYear}</span>
                      </div>
                      
                      <div className={styles.outbreakStats}>
                        <div className={styles.statItem}>
                          <span className={styles.statLabel}>Total Cases</span>
                          <span className={styles.statValue}>{outbreak.totalCases.toLocaleString()}</span>
                        </div>
                        <div className={styles.statItem}>
                          <span className={styles.statLabel}>Deaths</span>
                          <span className={styles.statValue}>{outbreak.totalDeaths.toLocaleString()}</span>
                        </div>
                        <div className={styles.statItem}>
                          <span className={styles.statLabel}>CFR</span>
                          <span className={styles.statValue}>{outbreak.cfr}%</span>
                        </div>
                        <div className={styles.statItem}>
                          <span className={styles.statLabel}>Countries</span>
                          <span className={styles.statValue}>{outbreak.affectedCountries}</span>
                        </div>
                      </div>
                      
                      <div className={styles.outbreakImpact}>
                        <strong>Economic Impact:</strong> ${(outbreak.economicImpact / 1000000000).toFixed(1)}B
                      </div>
                      
                      <div className={styles.keyLessons}>
                        <strong>Key Lessons:</strong>
                        <ul>
                          {outbreak.keyLessons.slice(0, 3).map((lesson, i) => (
                            <li key={i}>{lesson}</li>
                          ))}
                        </ul>
                      </div>
                      
                      <div className={styles.severityScore}>
                        <span>Severity Score: </span>
                        <span className={styles.severityValue}>
                          {calculateOutbreakSeverityScore(outbreak)}/100
                        </span>
                      </div>
                    </div>
                  ))}
              </div>
            </div>

            {/* Lessons Learned Summary */}
            <div className={styles.deepDiveSection}>
              <h4>üéì Critical Lessons from Past Outbreaks</h4>
              <div className={styles.lessonsGrid}>
                <div className={styles.lessonCategory}>
                  <h5>Early Detection & Response</h5>
                  <ul>
                    <li>Countries detecting outbreaks within 30 days reduce total cases by 80%</li>
                    <li>Transparent reporting reduces international spread by 65%</li>
                    <li>Pre-positioned supplies reduce initial mortality by 40%</li>
                  </ul>
                </div>
                <div className={styles.lessonCategory}>
                  <h5>Health System Capacity</h5>
                  <ul>
                    <li>Surge capacity planning reduces peak mortality by 50%</li>
                    <li>Healthcare worker protection prevents system collapse</li>
                    <li>Community health workers extend reach by 3x</li>
                  </ul>
                </div>
                <div className={styles.lessonCategory}>
                  <h5>Communication & Trust</h5>
                  <ul>
                    <li>Clear risk communication improves compliance by 70%</li>
                    <li>Community engagement reduces transmission by 45%</li>
                    <li>Addressing misinformation early prevents panic</li>
                  </ul>
                </div>
                <div className={styles.lessonCategory}>
                  <h5>Innovation & Research</h5>
                  <ul>
                    <li>Platform technologies enable 10x faster vaccine development</li>
                    <li>Digital tools improve contact tracing efficiency by 5x</li>
                    <li>Genomic surveillance enables variant tracking</li>
                  </ul>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Resilience Insights Tab */}
        {deepDiveTab === 'insights' && (
          <div>
            <h3 className={styles.deepDiveTitle}>üîç Pandemic Resilience Insights</h3>
            <p className={styles.deepDiveDescription}>
              Evidence-based insights into the factors that determine pandemic resilience, emerging trends, and strategic investment priorities.
            </p>

            {/* Resilience Correlations */}
            <div className={styles.deepDiveSection}>
              <h4>üìà Key Resilience Factor Correlations</h4>
              <div className={styles.plotContainer}>
                {typeof window !== 'undefined' && (
                  <Plot
                    data={[
                      {
                        x: resilienceCorrelations.map(c => c.factor1),
                        y: resilienceCorrelations.map(c => c.factor2),
                        z: resilienceCorrelations.map(c => c.correlation),
                        type: 'heatmap',
                        colorscale: [
                          [0, '#DC2626'],
                          [0.5, '#F0F2F5'],
                          [1, '#10B981']
                        ],
                        text: resilienceCorrelations.map(c => 
                          `Correlation: ${c.correlation}<br>${c.interpretation}`
                        ),
                        hovertemplate: '%{x} vs %{y}<br>%{text}<extra></extra>',
                        showscale: true,
                        colorbar: {
                          title: 'Correlation',
                          titlefont: { color: '#f0f2f5' },
                          tickfont: { color: '#f0f2f5' }
                        }
                      }
                    ]}
                    layout={{
                      title: {
                        text: 'Pandemic Resilience Factor Correlations',
                        font: { color: '#f0f2f5', size: 16 }
                      },
                      xaxis: {
                        tickangle: -45,
                        color: '#f0f2f5',
                        tickfont: { color: '#f0f2f5', size: 10 }
                      },
                      yaxis: {
                        color: '#f0f2f5',
                        tickfont: { color: '#f0f2f5', size: 10 }
                      },
                      plot_bgcolor: 'rgba(0,0,0,0)',
                      paper_bgcolor: 'rgba(0,0,0,0)',
                      font: { color: '#f0f2f5' },
                      margin: { l: 150, r: 60, t: 50, b: 150 }
                    }}
                    config={{
                      displayModeBar: false,
                      responsive: true
                    }}
                    style={{ width: '100%', height: '500px' }}
                  />
                )}
              </div>
              
              {/* Correlation Details */}
              <div className={styles.correlationsGrid}>
                {resilienceCorrelations
                  .sort((a, b) => Math.abs(b.correlation) - Math.abs(a.correlation))
                  .slice(0, 4)
                  .map((corr, index) => (
                    <div key={index} className={styles.correlationCard}>
                      <div className={styles.correlationHeader}>
                        <span className={styles.factor1}>{corr.factor1}</span>
                        <span className={styles.correlationValue} style={{
                          color: corr.correlation > 0 ? '#10B981' : '#DC2626'
                        }}>
                          {corr.correlation > 0 ? '+' : ''}{corr.correlation}
                        </span>
                        <span className={styles.factor2}>{corr.factor2}</span>
                      </div>
                      <p className={styles.correlationInterpretation}>{corr.interpretation}</p>
                      <div className={styles.evidenceBase}>
                        <strong>Evidence:</strong> {corr.evidenceBase.join(', ')}
                      </div>
                    </div>
                  ))}
              </div>
            </div>

            {/* Critical Success Factors from Verified Data */}
            <div className={styles.deepDiveSection}>
              <h4>üéØ Evidence-Based Critical Success Factors</h4>
              {Object.entries(verifiedLessonsLearned).map(([category, data]) => (
                <div key={category} className={styles.lessonsCategory}>
                  <h5>{data.title}</h5>
                  <div className={styles.factorsGrid}>
                    {data.criticalFactors.map((factor, index) => (
                      <div key={index} className={styles.factorCard}>
                        <h6>{factor.factor}</h6>
                        <p className={styles.factorImpact}>{factor.impact}</p>
                        <div className={styles.factorEvidence}>
                          <strong>Evidence:</strong> {factor.evidence}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              ))}
            </div>

            {/* Emerging Trends */}
            <div className={styles.deepDiveSection}>
              <h4>üöÄ Emerging Trends in Pandemic Preparedness</h4>
              <div className={styles.trendsTimeline}>
                {resilienceInsights.emergingTrends.map((trend, index) => (
                  <div key={index} className={styles.trendItem}>
                    <div className={styles.trendHeader}>
                      <h5>{trend.trend}</h5>
                      <span className={styles.trendTimeframe}>{trend.timeframe}</span>
                    </div>
                    <p className={styles.trendDescription}>{trend.description}</p>
                    <div className={styles.trendDetails}>
                      <div className={styles.opportunities}>
                        <strong>Opportunities:</strong>
                        <ul>
                          {trend.opportunities.map((opp, i) => (
                            <li key={i}>{opp}</li>
                          ))}
                        </ul>
                      </div>
                      <div className={styles.challenges}>
                        <strong>Challenges:</strong>
                        <ul>
                          {trend.challenges.map((challenge, i) => (
                            <li key={i}>{challenge}</li>
                          ))}
                        </ul>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Investment Priorities */}
            <div className={styles.deepDiveSection}>
              <h4>üí∞ Strategic Investment Priorities</h4>
              <div className={styles.investmentGrid}>
                {resilienceInsights.investmentPriorities.map((priority, index) => (
                  <div key={index} className={styles.investmentCard}>
                    <h5>{priority.area}</h5>
                    <div className={styles.investmentMetrics}>
                      <div className={styles.metricItem}>
                        <span className={styles.metricLabel}>ROI</span>
                        <span className={styles.metricValue}>{priority.roi}</span>
                      </div>
                      <div className={styles.metricItem}>
                        <span className={styles.metricLabel}>Time to Impact</span>
                        <span className={styles.metricValue}>{priority.timeToImpact}</span>
                      </div>
                    </div>
                    <p className={styles.evidenceStatement}>{priority.evidence}</p>
                  </div>
                ))}
              </div>
            </div>

            {/* Key Recommendations */}
            <div className={styles.deepDiveSection}>
              <h4>üìã Key Recommendations for Building Resilience</h4>
              <div className={styles.recommendationsGrid}>
                <div className={styles.recommendationCategory}>
                  <h5>Immediate Actions (0-6 months)</h5>
                  <ul>
                    <li>Establish real-time disease surveillance systems</li>
                    <li>Create surge capacity plans for healthcare facilities</li>
                    <li>Build community health worker networks</li>
                    <li>Develop risk communication protocols</li>
                  </ul>
                </div>
                <div className={styles.recommendationCategory}>
                  <h5>Short-term (6-24 months)</h5>
                  <ul>
                    <li>Strengthen laboratory diagnostic capacity</li>
                    <li>Implement One Health coordination mechanisms</li>
                    <li>Build strategic stockpiles of essential supplies</li>
                    <li>Train healthcare workforce in outbreak response</li>
                  </ul>
                </div>
                <div className={styles.recommendationCategory}>
                  <h5>Medium-term (2-5 years)</h5>
                  <ul>
                    <li>Develop domestic vaccine manufacturing capacity</li>
                    <li>Build integrated digital health infrastructure</li>
                    <li>Strengthen primary healthcare systems</li>
                    <li>Create climate-resilient health facilities</li>
                  </ul>
                </div>
                <div className={styles.recommendationCategory}>
                  <h5>Long-term (5+ years)</h5>
                  <ul>
                    <li>Address social determinants of health</li>
                    <li>Build sustainable financing mechanisms</li>
                    <li>Develop next-generation countermeasures</li>
                    <li>Create resilient supply chain networks</li>
                  </ul>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}