'use client';

import { useEffect, useRef, useState } from 'react';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import { comprehensivePolicyScenarios } from './policyScenarioModeling.js';
import styles from './PolicyInvestmentDashboard.module.css';

// Fix Leaflet default icon issue
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon-2x.png',
  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon.png',
  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-shadow.png',
});

export default function PolicyScenarioMap({ scenarioId, onStateSelect, selectedState, showComparison = true }) {
  const mapRef = useRef(null);
  const mapInstanceRef = useRef(null);
  const stateLayerRef = useRef(null);
  const [mapReady, setMapReady] = useState(false);
  const [geoDataLoaded, setGeoDataLoaded] = useState(false);

  // State name mapping for GeoJSON compatibility
  const stateNameMapping = {
    'Alabama': 'Alabama',
    'Alaska': 'Alaska', 
    'Arizona': 'Arizona',
    'Arkansas': 'Arkansas',
    'California': 'California',
    'Colorado': 'Colorado',
    'Connecticut': 'Connecticut',
    'Delaware': 'Delaware',
    'Florida': 'Florida',
    'Georgia': 'Georgia',
    'Hawaii': 'Hawaii',
    'Idaho': 'Idaho',
    'Illinois': 'Illinois',
    'Indiana': 'Indiana',
    'Iowa': 'Iowa',
    'Kansas': 'Kansas',
    'Kentucky': 'Kentucky',
    'Louisiana': 'Louisiana',
    'Maine': 'Maine',
    'Maryland': 'Maryland',
    'Massachusetts': 'Massachusetts',
    'Michigan': 'Michigan',
    'Minnesota': 'Minnesota',
    'Mississippi': 'Mississippi',
    'Missouri': 'Missouri',
    'Montana': 'Montana',
    'Nebraska': 'Nebraska',
    'Nevada': 'Nevada',
    'New Hampshire': 'New Hampshire',
    'New Jersey': 'New Jersey',
    'New Mexico': 'New Mexico',
    'New York': 'New York',
    'North Carolina': 'North Carolina',
    'North Dakota': 'North Dakota',
    'Ohio': 'Ohio',
    'Oklahoma': 'Oklahoma',
    'Oregon': 'Oregon',
    'Pennsylvania': 'Pennsylvania',
    'Rhode Island': 'Rhode Island',
    'South Carolina': 'South Carolina',
    'South Dakota': 'South Dakota',
    'Tennessee': 'Tennessee',
    'Texas': 'Texas',
    'Utah': 'Utah',
    'Vermont': 'Vermont',
    'Virginia': 'Virginia',
    'Washington': 'Washington',
    'West Virginia': 'West Virginia',
    'Wisconsin': 'Wisconsin',
    'Wyoming': 'Wyoming'
  };

  // Initialize map
  useEffect(() => {
    if (!mapRef.current || mapInstanceRef.current) return;

    mapInstanceRef.current = L.map(mapRef.current, {
      center: [39.8283, -98.5795], // Center of US
      zoom: 4,
      minZoom: 3,
      maxZoom: 8,
    });

    // Add dark tile layer to match site theme
    L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {
      attribution: '© OpenStreetMap contributors © CARTO'
    }).addTo(mapInstanceRef.current);

    setMapReady(true);

    return () => {
      if (mapInstanceRef.current) {
        mapInstanceRef.current.remove();
        mapInstanceRef.current = null;
      }
    };
  }, []);

  // Load state boundaries and display data
  useEffect(() => {
    if (!mapInstanceRef.current || !mapReady) return;

    // Clear existing layers
    if (stateLayerRef.current) {
      mapInstanceRef.current.removeLayer(stateLayerRef.current);
      stateLayerRef.current = null;
    }

    const scenario = comprehensivePolicyScenarios[scenarioId];
    if (!scenario || !scenario.stateImpacts) return;

    // Helper functions
    const getStateColor = (change) => {
      if (change >= 10) return '#DC2626'; // High Risk Increase - Red
      if (change >= 5) return '#F59E0B'; // Moderate Risk Increase - Orange
      if (change >= 2) return '#FCD34D'; // Low Risk Increase - Yellow
      if (change > 0) return '#FEF3C7'; // Minimal Risk Increase - Light Yellow
      if (change === 0) return '#9CA3AF'; // No Change - Gray
      if (change >= -2) return '#D1FAE5'; // Minimal Risk Reduction - Light Green
      if (change >= -5) return '#84CC16'; // Low Risk Reduction - Green
      if (change >= -10) return '#10B981'; // Moderate Risk Reduction - Emerald
      return '#059669'; // High Risk Reduction - Dark Green
    };

    const getStateLabel = (change) => {
      if (change >= 10) return 'High Risk Increase';
      if (change >= 5) return 'Moderate Risk Increase';
      if (change >= 2) return 'Low Risk Increase';
      if (change > 0) return 'Minimal Risk Increase';
      if (change === 0) return 'No Change';
      if (change >= -2) return 'Minimal Risk Reduction';
      if (change >= -5) return 'Low Risk Reduction';
      if (change >= -10) return 'Moderate Risk Reduction';
      return 'High Risk Reduction';
    };

    const findStateData = (geoStateName) => {
      // Direct match
      if (scenario.stateImpacts[geoStateName]) {
        return { name: geoStateName, data: scenario.stateImpacts[geoStateName] };
      }
      
      // Try mapping
      const mappedName = stateNameMapping[geoStateName];
      if (mappedName && scenario.stateImpacts[mappedName]) {
        return { name: mappedName, data: scenario.stateImpacts[mappedName] };
      }
      
      return null;
    };

    // Load US States GeoJSON with improved error handling
    const loadGeoJSON = async () => {
      const sources = [
        // Primary reliable source
        'https://raw.githubusercontent.com/PublicaMundi/MappingAPI/master/data/geojson/us-states.json',
        // Local fallback
        '/us-states.geojson',
        // Additional fallbacks
        'https://raw.githubusercontent.com/python-visualization/folium/master/examples/data/us-states.json',
        'https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/usa_states.geojson'
      ];

      for (let i = 0; i < sources.length; i++) {
        try {
          console.log(`Trying GeoJSON source ${i + 1}/${sources.length}: ${sources[i]}`);
          const response = await fetch(sources[i]);
          if (response.ok) {
            const data = await response.json();
            console.log(`Successfully loaded GeoJSON from source ${i + 1}`);
            return data;
          }
          console.warn(`Source ${i + 1} failed with status:`, response.status);
        } catch (error) {
          console.warn(`Source ${i + 1} failed with error:`, error.message);
          if (i === sources.length - 1) {
            throw new Error('All GeoJSON sources failed');
          }
        }
      }
    };

    loadGeoJSON()
      .then(geoData => {
        console.log('US States GeoJSON loaded successfully');
        console.log('Total features:', geoData.features?.length);
        console.log('Sample feature properties:', geoData.features[0]?.properties);
        console.log('Available scenario states:', Object.keys(scenario.stateImpacts));
        
        // Validate GeoJSON structure
        if (!geoData.features || !Array.isArray(geoData.features) || geoData.features.length === 0) {
          throw new Error('Invalid GeoJSON structure: no features found');
        }
        
        console.log(`Processing ${geoData.features.length} state features`);
        
        stateLayerRef.current = L.geoJSON(geoData, {
          style: function(feature) {
            const geoStateName = feature.properties.NAME || feature.properties.name || feature.properties.NAME_1;
            const stateMatch = findStateData(geoStateName);
            
            if (stateMatch) {
              const color = getStateColor(stateMatch.data.vulnerabilityChange);
              console.log(`Styling state ${geoStateName}: vulnerability=${stateMatch.data.vulnerabilityChange}, color=${color}`);
              return {
                fillColor: color,
                weight: 2,
                opacity: 0.8,
                color: '#ffffff',
                fillOpacity: 0.7
              };
            } else {
              console.log(`No data found for state: ${geoStateName}. Available properties:`, Object.keys(feature.properties || {}));
              // States without data shown in gray
              return {
                fillColor: '#64748b',
                weight: 2,
                opacity: 0.8,
                color: '#ffffff',
                fillOpacity: 0.5
              };
            }
          },
          onEachFeature: function(feature, layer) {
            const geoStateName = feature.properties.NAME || feature.properties.name || feature.properties.NAME_1;
            const stateMatch = findStateData(geoStateName);
            
            if (stateMatch) {
              const { name: stateName, data: stateData } = stateMatch;
              const color = getStateColor(stateData.vulnerabilityChange);
              const label = getStateLabel(stateData.vulnerabilityChange);
              
              layer.bindPopup(`
                <div style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; min-width: 300px; max-width: 350px; background: #1a1f35; color: #e5e7eb; border-radius: 8px; border: 1px solid rgba(255,255,255,0.1);">
                  <div style="background: linear-gradient(135deg, ${color}40, ${color}20); padding: 12px; border-radius: 8px 8px 0 0; margin: -1px -1px 12px -1px; border-bottom: 1px solid rgba(255,255,255,0.1);">
                    <h4 style="margin: 0; color: #ffffff; font-size: 16px; font-weight: 700;">${stateName}</h4>
                    <div style="color: ${color}; font-weight: 600; font-size: 12px; margin-top: 4px;">
                      ${label}
                    </div>
                  </div>
                  <div style="font-size: 14px; line-height: 1.6; padding: 0 12px 12px 12px;">
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 12px; margin-bottom: 12px;">
                      <div style="background: rgba(255,255,255,0.05); padding: 8px; border-radius: 6px; text-align: center; border: 1px solid rgba(255,255,255,0.1);">
                        <div style="font-size: 11px; color: #9ca3af; font-weight: 600; text-transform: uppercase;">Risk Change</div>
                        <div style="color: ${color}; font-weight: 700; font-size: 18px;">
                          ${stateData.vulnerabilityChange >= 0 ? '+' : ''}${stateData.vulnerabilityChange}%
                        </div>
                      </div>
                      <div style="background: rgba(255,255,255,0.05); padding: 8px; border-radius: 6px; text-align: center; border: 1px solid rgba(255,255,255,0.1);">
                        <div style="font-size: 11px; color: #9ca3af; font-weight: 600; text-transform: uppercase;">Economic Impact</div>
                        <div style="color: #e5e7eb; font-weight: 700; font-size: 18px;">
                          $${Math.abs(stateData.economicImpactBillions)}B
                        </div>
                      </div>
                    </div>
                    <div style="background: rgba(255,255,255,0.03); padding: 12px; border-radius: 6px; border-left: 4px solid ${color}; border: 1px solid rgba(255,255,255,0.08);">
                      <div style="font-weight: 600; color: #e5e7eb; margin-bottom: 6px;">Key Impact Factors:</div>
                      <div style="color: #d1d5db; font-size: 13px; line-height: 1.5;">
                        ${stateData.reasoning}
                      </div>
                    </div>
                    <div style="margin-top: 12px; font-size: 12px; color: #9ca3af;">
                      <strong>Outbreak Risk Multiplier:</strong> ${stateData.outbreakRiskMultiplier}x baseline
                    </div>
                  </div>
                </div>
              `);

              // Add click handler
              layer.on('click', () => {
                if (onStateSelect) onStateSelect(stateName);
              });
            } else {
              layer.bindPopup(`
                <div style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; min-width: 200px; background: #1a1f35; color: #e5e7eb; border-radius: 8px; padding: 12px; border: 1px solid rgba(255,255,255,0.1);">
                  <h4 style="margin: 0 0 8px 0; color: #ffffff; font-size: 16px;">${geoStateName}</h4>
                  <p style="margin: 0; color: #9ca3af; font-size: 13px;">No policy impact data available for this state in the current scenario.</p>
                </div>
              `);
            }

            // Add hover effects
            layer.on({
              mouseover: function(e) {
                const hoverLayer = e.target;
                hoverLayer.setStyle({
                  weight: 4,
                  color: '#00e0ff',
                  fillOpacity: 0.9
                });
              },
              mouseout: function(e) {
                stateLayerRef.current.resetStyle(e.target);
              }
            });
          }
        }).addTo(mapInstanceRef.current);

        console.log('GeoJSON layer added to map successfully');
        setGeoDataLoaded(true);
        
        // Force map to fit bounds and refresh
        setTimeout(() => {
          if (mapInstanceRef.current && stateLayerRef.current) {
            try {
              mapInstanceRef.current.fitBounds(stateLayerRef.current.getBounds());
              mapInstanceRef.current.invalidateSize();
              console.log('Map bounds fitted and size invalidated');
            } catch (error) {
              console.warn('Error fitting map bounds:', error);
            }
          }
        }, 100);
      })
      .catch(error => {
        console.error('Failed to load state boundaries:', error);
        setGeoDataLoaded(false);
        
        // Show error message on map
        if (mapInstanceRef.current) {
          const errorPopup = L.popup()
            .setLatLng([39.8283, -98.5795])
            .setContent(`<div style="color: red; font-weight: bold;">Failed to load state boundaries<br>Error: ${error.message}</div>`)
            .openOn(mapInstanceRef.current);
        }
      });
  }, [scenarioId, onStateSelect, mapReady]);

  // Highlight selected state
  useEffect(() => {
    if (!selectedState || !stateLayerRef.current || !geoDataLoaded) return;

    // Reset all states first
    stateLayerRef.current.eachLayer(layer => {
      stateLayerRef.current.resetStyle(layer);
    });

    // Highlight selected state
    stateLayerRef.current.eachLayer(layer => {
      const geoStateName = layer.feature.properties.NAME || layer.feature.properties.name || layer.feature.properties.NAME_1;
      const stateMatch = stateNameMapping[geoStateName] || geoStateName;
      
      if (stateMatch === selectedState) {
        layer.setStyle({
          weight: 4,
          color: '#00e0ff',
          fillOpacity: 0.9
        });
      }
    });
  }, [selectedState, geoDataLoaded]);

  return (
    <div className={styles.mapContainer}>
      <div ref={mapRef} className={styles.map} />
      <div className={styles.mapLegend}>
        <h4 style={{ color: '#e5e7eb' }}>Policy Impact by State</h4>
        <div style={{ marginBottom: '1rem', fontSize: '0.8rem', color: '#9ca3af' }}>
          Vulnerability change from baseline scenario
        </div>
        <div className={styles.legendItems}>
          <div className={styles.legendItem}>
            <div className={styles.legendColor} style={{ backgroundColor: '#DC2626', color: 'white', display: 'flex', alignItems: 'center', justifyContent: 'center', fontSize: '10px', fontWeight: 'bold' }}>▲</div>
            <span style={{ color: '#e5e7eb' }}>High Risk Increase (+10%)</span>
          </div>
          <div className={styles.legendItem}>
            <div className={styles.legendColor} style={{ backgroundColor: '#F59E0B', color: 'white', display: 'flex', alignItems: 'center', justifyContent: 'center', fontSize: '10px', fontWeight: 'bold' }}>▲</div>
            <span style={{ color: '#e5e7eb' }}>Moderate Increase (+5%)</span>
          </div>
          <div className={styles.legendItem}>
            <div className={styles.legendColor} style={{ backgroundColor: '#FCD34D', color: '#1f2937', display: 'flex', alignItems: 'center', justifyContent: 'center', fontSize: '10px', fontWeight: 'bold' }}>▲</div>
            <span style={{ color: '#e5e7eb' }}>Minor Increase (+2%)</span>
          </div>
          <div className={styles.legendItem}>
            <div className={styles.legendColor} style={{ backgroundColor: '#9CA3AF', color: 'white', display: 'flex', alignItems: 'center', justifyContent: 'center', fontSize: '10px', fontWeight: 'bold' }}>●</div>
            <span style={{ color: '#e5e7eb' }}>No Change (0%)</span>
          </div>
          <div className={styles.legendItem}>
            <div className={styles.legendColor} style={{ backgroundColor: '#84CC16', color: 'white', display: 'flex', alignItems: 'center', justifyContent: 'center', fontSize: '10px', fontWeight: 'bold' }}>▼</div>
            <span style={{ color: '#e5e7eb' }}>Risk Reduction (-2%)</span>
          </div>
          <div className={styles.legendItem}>
            <div className={styles.legendColor} style={{ backgroundColor: '#10B981', color: 'white', display: 'flex', alignItems: 'center', justifyContent: 'center', fontSize: '10px', fontWeight: 'bold' }}>▼</div>
            <span style={{ color: '#e5e7eb' }}>Significant Reduction (-5%)</span>
          </div>
        </div>
        <div style={{ marginTop: '1rem', padding: '0.5rem', background: 'rgba(59, 130, 246, 0.1)', borderRadius: '4px', fontSize: '0.75rem', color: '#9ca3af', border: '1px solid rgba(255,255,255,0.1)' }}>
          <strong>Click states</strong> for detailed policy impact analysis
        </div>
      </div>
    </div>
  );
}