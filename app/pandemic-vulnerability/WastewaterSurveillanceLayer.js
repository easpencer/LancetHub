'use client';

import { useEffect, useState, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { FaTint, FaExclamationTriangle, FaTrendUp, FaTrendDown, FaInfoCircle, FaFilter, FaDownload } from 'react-icons/fa';
import dynamic from 'next/dynamic';
import styles from './pandemic-vulnerability.module.css';

// Dynamically import Leaflet to avoid SSR issues
let L;
if (typeof window !== 'undefined') {
  L = require('leaflet');
}

export default function WastewaterSurveillanceLayer({ 
  map, 
  isVisible = true, 
  selectedPathogen = 'SARS-CoV-2',
  onSiteSelect = null 
}) {
  const [wastewaterData, setWastewaterData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [markers, setMarkers] = useState([]);
  const [selectedSite, setSelectedSite] = useState(null);
  const [alertsOnly, setAlertsOnly] = useState(false);
  const [dataSource, setDataSource] = useState('wastewaterscan');
  const [lastUpdated, setLastUpdated] = useState(null);

  console.log('🧪 WastewaterSurveillanceLayer rendered', {
    map: !!map,
    isVisible,
    L: !!L,
    wastewaterDataLength: wastewaterData.length,
    markers: markers.length
  });

  // Fetch wastewater data
  const fetchWastewaterData = useCallback(async () => {
    if (!isVisible) return;
    
    setLoading(true);
    setError(null);
    
    try {
      const params = new URLSearchParams({
        source: dataSource,
        pathogen: selectedPathogen,
        format: 'detailed',
        include_alerts: 'true',
        include_metadata: 'true'
      });

      const response = await fetch(`/api/wastewater-surveillance?${params}`);
      const result = await response.json();

      if (result.success) {
        console.log('Raw wastewater API response:', result);
        setWastewaterData(result.data);
        setLastUpdated(result.metadata?.statistics?.lastUpdated);
        console.log(`✅ Loaded ${result.data.length} wastewater sites`);
        console.log('First site data:', result.data[0]);
      } else {
        throw new Error(result.error || 'Failed to fetch wastewater data');
      }
    } catch (err) {
      console.error('Error fetching wastewater data:', err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  }, [isVisible, selectedPathogen, dataSource]);

  // Initialize data fetch
  useEffect(() => {
    fetchWastewaterData();
  }, [fetchWastewaterData]);

  // Update map markers when data changes
  useEffect(() => {
    console.log('🗺️ Marker update effect triggered', {
      map: !!map,
      isVisible,
      wastewaterDataLength: wastewaterData.length,
      L: !!L
    });

    if (!map || !isVisible || !L) {
      console.log('❌ Missing requirements for markers');
      // Clear existing markers
      if (map && markers.length > 0) {
        markers.forEach(marker => map.removeLayer(marker));
        setMarkers([]);
      }
      return;
    }

    // If no data, use mock data for testing
    const dataToUse = wastewaterData.length > 0 ? wastewaterData : getMockWastewaterData();

    // Clear existing markers
    markers.forEach(marker => map.removeLayer(marker));

    // Filter data if alerts only is enabled
    const filteredData = alertsOnly ? 
      dataToUse.filter(site => site.summary?.alertLevel !== 'normal') : 
      dataToUse;
    
    console.log(`📍 Creating ${filteredData.length} markers`);

    // Create new markers
    const newMarkers = filteredData.map(site => {
      const { lat, lng } = site.site.location;
      const alertLevel = site.summary?.alertLevel || 'normal';
      const concentration = site.summary?.latestMeasurement?.concentration || 0;
      const trend = site.summary?.trend?.trend || 'stable';

      // Determine marker color and size based on alert level and concentration
      const markerConfig = getMarkerConfig(alertLevel, concentration, trend);
      
      // Create custom marker HTML with inline styles for Leaflet
      const markerHtml = `
        <div style="
          width: ${markerConfig.size}px;
          height: ${markerConfig.size}px;
          background-color: ${markerConfig.color};
          border: 3px solid ${markerConfig.borderColor};
          border-radius: 50%;
          display: flex;
          align-items: center;
          justify-content: center;
          cursor: pointer;
          position: relative;
          box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
        ">
          <div style="
            color: white;
            font-size: ${markerConfig.size * 0.4}px;
            font-weight: bold;
          ">
            💧
          </div>
          ${alertLevel !== 'normal' ? `
            <div style="
              position: absolute;
              top: -5px;
              right: -5px;
              width: 12px;
              height: 12px;
              background-color: #ff4444;
              border-radius: 50%;
              border: 2px solid white;
            "></div>
          ` : ''}
        </div>
      `;

      // Create marker using Leaflet's DivIcon
      const marker = L.marker([lat, lng], {
        icon: L.divIcon({
          html: markerHtml,
          className: 'wastewater-custom-marker',
          iconSize: [markerConfig.size, markerConfig.size],
          iconAnchor: [markerConfig.size / 2, markerConfig.size / 2]
        })
      });

      // Add click event
      marker.on('click', () => {
        setSelectedSite(site);
        if (onSiteSelect) onSiteSelect(site);
      });

      // Add popup with site information
      const popupContent = createPopupContent(site);
      marker.bindPopup(popupContent, {
        maxWidth: 350,
        className: styles.wastewaterPopup
      });

      // Add to map
      marker.addTo(map);

      return marker;
    });

    setMarkers(newMarkers);

    return () => {
      newMarkers.forEach(marker => map.removeLayer(marker));
    };
  }, [map, isVisible, wastewaterData, alertsOnly]);

  // Get marker configuration based on alert level and concentration
  const getMarkerConfig = (alertLevel, concentration, trend) => {
    const baseSize = 16;
    const configs = {
      'outbreak': { 
        color: '#cc0000', 
        borderColor: '#ff4444', 
        size: baseSize + 12,
        pulse: true 
      },
      'high': { 
        color: '#ff6600', 
        borderColor: '#ff9933', 
        size: baseSize + 8,
        pulse: true 
      },
      'increasing': { 
        color: '#ffaa00', 
        borderColor: '#ffcc33', 
        size: baseSize + 4,
        pulse: false 
      },
      'normal': { 
        color: '#0066cc', 
        borderColor: '#3399ff', 
        size: baseSize,
        pulse: false 
      },
      'decreasing': { 
        color: '#00aa00', 
        borderColor: '#33cc33', 
        size: baseSize,
        pulse: false 
      },
      'no-data': { 
        color: '#999999', 
        borderColor: '#cccccc', 
        size: baseSize - 4,
        pulse: false 
      }
    };

    return configs[alertLevel] || configs['normal'];
  };

  // Create popup content for wastewater sites
  const createPopupContent = (site) => {
    const latest = site.summary?.latestMeasurement;
    const trend = site.summary?.trend;
    const alertLevel = site.summary?.alertLevel;

    return `
      <div class="${styles.popupContent}">
        <div class="${styles.popupHeader}">
          <h3>${site.site.name}</h3>
          <span class="${styles.alertBadge} ${styles[alertLevel]}">${alertLevel.toUpperCase()}</span>
        </div>
        
        <div class="${styles.popupBody}">
          <div class="${styles.popupMetric}">
            <strong>Latest Concentration:</strong>
            <span>${latest?.concentration?.toLocaleString() || 'N/A'} ${latest?.units || ''}</span>
          </div>
          
          <div class="${styles.popupMetric}">
            <strong>Trend:</strong>
            <span class="${styles.trendIndicator}">
              ${trend?.trend === 'increasing' ? '📈' : trend?.trend === 'decreasing' ? '📉' : '➡️'}
              ${trend?.change ? `${trend.change > 0 ? '+' : ''}${trend.change.toFixed(1)}%` : 'Stable'}
            </span>
          </div>
          
          <div class="${styles.popupMetric}">
            <strong>Population Served:</strong>
            <span>${site.site.location.population?.toLocaleString() || 'Unknown'}</span>
          </div>
          
          <div class="${styles.popupMetric}">
            <strong>Site Type:</strong>
            <span>${site.site.type || 'Municipal'}</span>
          </div>
          
          <div class="${styles.popupMetric}">
            <strong>Last Sample:</strong>
            <span>${latest?.date ? new Date(latest.date).toLocaleDateString() : 'N/A'}</span>
          </div>
          
          ${site.alerts && site.alerts.length > 0 ? `
            <div class="${styles.popupAlerts}">
              <strong>Active Alerts:</strong>
              ${site.alerts.slice(0, 2).map(alert => `
                <div class="${styles.alertItem}">
                  <span class="${styles.alertLevel}">${alert.level.toUpperCase()}</span>
                  <span class="${styles.alertReason}">${alert.reason}</span>
                </div>
              `).join('')}
            </div>
          ` : ''}
        </div>
        
        <div class="${styles.popupFooter}">
          <button onclick="viewSiteDetails('${site.site.id}')" class="${styles.detailsButton}">
            View Details
          </button>
        </div>
      </div>
    `;
  };

  if (!isVisible) return null;

  return (
    <div className={styles.wastewaterLayer}>
      {/* Layer Controls */}
      <motion.div 
        className={styles.layerControls}
        initial={{ opacity: 0, x: -20 }}
        animate={{ opacity: 1, x: 0 }}
        transition={{ duration: 0.3 }}
      >
        <div className={styles.controlGroup}>
          <h4>
            <FaTint /> Wastewater Surveillance
          </h4>
          
          {/* Data Source Selector */}
          <div className={styles.controlItem}>
            <label>Data Source:</label>
            <select 
              value={dataSource} 
              onChange={(e) => setDataSource(e.target.value)}
              className={styles.controlSelect}
            >
              <option value="wastewaterscan">WastewaterScan</option>
              <option value="cdc">CDC NWSS</option>
              <option value="global">Global Sources</option>
            </select>
          </div>

          {/* Pathogen Selector */}
          <div className={styles.controlItem}>
            <label>Pathogen:</label>
            <select 
              value={selectedPathogen} 
              onChange={(e) => setSelectedPathogen && setSelectedPathogen(e.target.value)}
              className={styles.controlSelect}
            >
              <option value="SARS-CoV-2">SARS-CoV-2</option>
              <option value="Influenza A">Influenza A</option>
              <option value="RSV">RSV</option>
              <option value="Norovirus">Norovirus</option>
            </select>
          </div>

          {/* Alerts Only Toggle */}
          <div className={styles.controlItem}>
            <label className={styles.checkboxLabel}>
              <input 
                type="checkbox" 
                checked={alertsOnly}
                onChange={(e) => setAlertsOnly(e.target.checked)}
              />
              <span>Show alerts only</span>
            </label>
          </div>

          {/* Refresh Button */}
          <button 
            onClick={fetchWastewaterData}
            disabled={loading}
            className={styles.refreshButton}
          >
            {loading ? 'Loading...' : 'Refresh Data'}
          </button>
        </div>
      </motion.div>

      {/* Data Status */}
      <AnimatePresence>
        {loading && (
          <motion.div 
            className={styles.loadingIndicator}
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
          >
            <FaTint className={styles.spinningIcon} />
            Loading wastewater data...
          </motion.div>
        )}

        {error && (
          <motion.div 
            className={styles.errorIndicator}
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
          >
            <FaExclamationTriangle />
            Error: {error}
          </motion.div>
        )}
      </AnimatePresence>

      {/* Data Summary */}
      {wastewaterData.length > 0 && (
        <motion.div 
          className={styles.dataSummary}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
        >
          <div className={styles.summaryStats}>
            <div className={styles.summaryItem}>
              <span className={styles.summaryNumber}>{wastewaterData.length}</span>
              <span className={styles.summaryLabel}>Sites</span>
            </div>
            <div className={styles.summaryItem}>
              <span className={styles.summaryNumber}>
                {wastewaterData.filter(s => s.summary?.alertLevel !== 'normal').length}
              </span>
              <span className={styles.summaryLabel}>Alerts</span>
            </div>
            <div className={styles.summaryItem}>
              <span className={styles.summaryNumber}>
                {wastewaterData.filter(s => s.summary?.trend?.trend === 'increasing').length}
              </span>
              <span className={styles.summaryLabel}>Increasing</span>
            </div>
          </div>
          
          {lastUpdated && (
            <div className={styles.lastUpdated}>
              Last updated: {new Date(lastUpdated).toLocaleString()}
            </div>
          )}
        </motion.div>
      )}

      {/* Site Details Modal */}
      <AnimatePresence>
        {selectedSite && (
          <WastewaterSiteModal 
            site={selectedSite}
            onClose={() => setSelectedSite(null)}
          />
        )}
      </AnimatePresence>
    </div>
  );
}

// Site details modal component
function WastewaterSiteModal({ site, onClose }) {
  return (
    <motion.div
      className={styles.modalOverlay}
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      onClick={onClose}
    >
      <motion.div
        className={styles.siteModal}
        initial={{ scale: 0.8, opacity: 0 }}
        animate={{ scale: 1, opacity: 1 }}
        exit={{ scale: 0.8, opacity: 0 }}
        onClick={(e) => e.stopPropagation()}
      >
        <div className={styles.modalHeader}>
          <h2>{site.site.name}</h2>
          <button onClick={onClose} className={styles.closeButton}>×</button>
        </div>
        
        <div className={styles.modalContent}>
          {/* Site details, charts, and analysis would go here */}
          <p>Detailed site analysis coming soon...</p>
        </div>
      </motion.div>
    </motion.div>
  );
}

// Global function for popup button clicks
if (typeof window !== 'undefined') {
  window.viewSiteDetails = (siteId) => {
    console.log('View details for site:', siteId);
    // This would trigger a more detailed view
  };
}

// Mock data for testing
function getMockWastewaterData() {
  return [
    {
      site: {
        id: 'mock_001',
        name: 'San Francisco WWTP',
        type: 'municipal',
        location: {
          lat: 37.7749,
          lng: -122.4194,
          city: 'San Francisco',
          state: 'CA',
          country: 'US',
          population: 874784
        }
      },
      summary: {
        latestMeasurement: {
          concentration: 125000,
          units: 'gc/L',
          date: new Date().toISOString()
        },
        trend: {
          trend: 'increasing',
          change: 15.3
        },
        alertLevel: 'increasing'
      },
      alerts: []
    },
    {
      site: {
        id: 'mock_002',
        name: 'NYC Central WWTP',
        type: 'municipal', 
        location: {
          lat: 40.7128,
          lng: -74.0060,
          city: 'New York',
          state: 'NY',
          country: 'US',
          population: 8336817
        }
      },
      summary: {
        latestMeasurement: {
          concentration: 85000,
          units: 'gc/L',
          date: new Date().toISOString()
        },
        trend: {
          trend: 'stable',
          change: -2.1
        },
        alertLevel: 'normal'
      },
      alerts: []
    },
    {
      site: {
        id: 'mock_003',
        name: 'Boston Water Works',
        type: 'municipal',
        location: {
          lat: 42.3601,
          lng: -71.0589,
          city: 'Boston',
          state: 'MA',
          country: 'US',
          population: 692600
        }
      },
      summary: {
        latestMeasurement: {
          concentration: 250000,
          units: 'gc/L',
          date: new Date().toISOString()
        },
        trend: {
          trend: 'increasing',
          change: 45.7
        },
        alertLevel: 'high'
      },
      alerts: [{
        level: 'high',
        reason: 'Concentration above threshold'
      }]
    }
  ];
}