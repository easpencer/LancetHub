'use client';

import { useEffect, useState } from 'react';
import dynamic from 'next/dynamic';
import { motion } from 'framer-motion';
import styles from './pandemic-vulnerability.module.css';

// Dynamically import Plotly
const Plot = dynamic(() => import('react-plotly.js'), { ssr: false });

export default function ResilienceRadarPlot({ countryData, isOpen, onClose }) {
  const [plotData, setPlotData] = useState(null);

  useEffect(() => {
    if (!countryData || !isOpen) return;
    
    console.log('ResilienceRadarPlot - Country Data:', countryData);

    // Define dimensions based on whether it's a US state or global country
    const isUSState = countryData.state || countryData.isUSRegion;
    
    let dimensions, values, dimensionLabels;
    
    if (isUSState && countryData.dimensions) {
      // US state with 7-dimension data
      dimensions = [
        'Healthcare Infrastructure',
        'Information Systems',
        'Social Capital',
        'Economic Stability',
        'Governance',
        'Physical Infrastructure',
        'Environmental Health'
      ];
      
      values = [
        countryData.dimensions.healthcare || 0,
        countryData.dimensions.information || 0,
        countryData.dimensions.social || 0,
        countryData.dimensions.economic || 0,
        countryData.dimensions.governance || 0,
        countryData.dimensions.infrastructure || 0,
        countryData.dimensions.environmental || 0
      ];
      
      dimensionLabels = dimensions;
    } else {
      // Global country with 3 main metrics
      dimensions = [
        'Healthcare Capacity',
        'Social Resilience',
        'Economic Resilience',
        'Information Systems',
        'Governance Quality',
        'Infrastructure'
      ];
      
      // Calculate derived metrics
      const healthcareScore = countryData.healthcareCapacity || 50;
      const socialScore = 100 - (countryData.socialVulnerability || 50);
      const economicScore = countryData.economicResilience || 50;
      
      // Estimate other dimensions based on available data
      const infoScore = Math.round((healthcareScore + socialScore) / 2);
      const govScore = Math.round((economicScore + socialScore) / 2);
      const infraScore = Math.round((healthcareScore + economicScore) / 2);
      
      values = [
        healthcareScore,
        socialScore,
        economicScore,
        infoScore,
        govScore,
        infraScore
      ];
      
      dimensionLabels = dimensions;
    }

    // Create radar plot data
    const trace = {
      type: 'scatterpolar',
      r: values,
      theta: dimensionLabels,
      fill: 'toself',
      fillcolor: 'rgba(44, 120, 115, 0.2)',
      line: {
        color: 'rgb(44, 120, 115)',
        width: 2
      },
      marker: {
        color: 'rgb(44, 120, 115)',
        size: 8
      },
      name: countryData.name || countryData.country || 'Unknown'
    };

    // Add benchmark trace (optional)
    const benchmarkTrace = {
      type: 'scatterpolar',
      r: Array(dimensionLabels.length).fill(75), // Benchmark at 75%
      theta: dimensionLabels,
      line: {
        color: 'rgba(255, 0, 0, 0.3)',
        width: 1,
        dash: 'dot'
      },
      name: 'Target Resilience'
    };

    setPlotData([trace, benchmarkTrace]);
  }, [countryData, isOpen]);

  if (!isOpen || !countryData || !plotData) return null;

  const layout = {
    polar: {
      radialaxis: {
        visible: true,
        range: [0, 100],
        tickmode: 'linear',
        tick0: 0,
        dtick: 25,
        gridcolor: 'rgba(255, 255, 255, 0.1)',
        gridwidth: 1,
        linecolor: 'rgba(255, 255, 255, 0.2)',
        linewidth: 2
      },
      angularaxis: {
        gridcolor: 'rgba(255, 255, 255, 0.1)',
        linecolor: 'rgba(255, 255, 255, 0.2)'
      },
      bgcolor: 'rgba(0, 0, 0, 0)'
    },
    showlegend: true,
    legend: {
      x: 0,
      y: 1,
      font: { color: '#ffffff', size: 12 }
    },
    paper_bgcolor: 'rgba(0, 0, 0, 0)',
    plot_bgcolor: 'rgba(0, 0, 0, 0)',
    font: {
      color: '#ffffff',
      size: 14
    },
    margin: { t: 60, r: 60, b: 60, l: 60 },
    height: 400,
    title: {
      text: `${countryData.name || countryData.country} - Pandemic Resilience Profile`,
      font: { size: 18, color: '#ffffff' }
    }
  };

  const config = {
    displayModeBar: false,
    responsive: true
  };

  // Calculate overall resilience score
  const overallScore = plotData[0].r.reduce((a, b) => a + b, 0) / plotData[0].r.length;
  const scoreClass = overallScore >= 80 ? 'excellent' : 
                     overallScore >= 60 ? 'good' :
                     overallScore >= 40 ? 'moderate' : 'poor';

  return (
    <motion.div 
      className={styles.modalOverlay}
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      onClick={onClose}
    >
      <motion.div 
        className={styles.radarPlotModal}
        initial={{ scale: 0.8, opacity: 0 }}
        animate={{ scale: 1, opacity: 1 }}
        exit={{ scale: 0.8, opacity: 0 }}
        onClick={(e) => e.stopPropagation()}
      >
        <div className={styles.modalHeader}>
          <h2>{countryData.name || countryData.country} - Resilience Analysis</h2>
          <button onClick={onClose} className={styles.closeButton}>Ã—</button>
        </div>
        
        <div className={styles.modalContent}>
          <div className={styles.radarPlotContainer}>
            <Plot
              data={plotData}
              layout={layout}
              config={config}
              style={{ width: '100%', height: '100%' }}
            />
          </div>
          
          <div className={styles.resilienceDetails}>
            <div className={styles.overallScoreCard}>
              <h3>Overall Resilience Score</h3>
              <div className={`${styles.scoreValue} ${styles[scoreClass]}`}>
                {overallScore.toFixed(1)}
              </div>
              <p className={styles.scoreLabel}>
                {scoreClass === 'excellent' ? 'Excellent Preparedness' :
                 scoreClass === 'good' ? 'Good Preparedness' :
                 scoreClass === 'moderate' ? 'Moderate Preparedness' : 'Needs Improvement'}
              </p>
            </div>
            
            <div className={styles.dimensionScores}>
              <h3>Dimension Breakdown</h3>
              {plotData[0].theta.map((dimension, index) => (
                <div key={dimension} className={styles.dimensionRow}>
                  <span className={styles.dimensionName}>{dimension}</span>
                  <div className={styles.progressBar}>
                    <div 
                      className={styles.progressFill}
                      style={{ 
                        width: `${plotData[0].r[index]}%`,
                        backgroundColor: plotData[0].r[index] >= 75 ? '#4CAF50' :
                                       plotData[0].r[index] >= 50 ? '#FFD700' :
                                       plotData[0].r[index] >= 25 ? '#FF9800' : '#FF4444'
                      }}
                    />
                  </div>
                  <span className={styles.dimensionScore}>{plotData[0].r[index]}</span>
                </div>
              ))}
            </div>
            
            {countryData.vulnerabilities && (
              <div className={styles.vulnerabilities}>
                <h3>Key Vulnerabilities</h3>
                <ul>
                  {countryData.vulnerabilities.map((vuln, index) => (
                    <li key={index}>{vuln}</li>
                  ))}
                </ul>
              </div>
            )}
            
            {countryData.strengths && (
              <div className={styles.strengths}>
                <h3>Key Strengths</h3>
                <ul>
                  {countryData.strengths.map((strength, index) => (
                    <li key={index}>{strength}</li>
                  ))}
                </ul>
              </div>
            )}
          </div>
        </div>
      </motion.div>
    </motion.div>
  );
}