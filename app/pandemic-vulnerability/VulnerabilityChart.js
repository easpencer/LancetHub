'use client';

import { useEffect, useRef } from 'react';
import Plotly from 'plotly.js-dist-min';

const generateChartData = (scenario, isOptimistic) => {
  const baseData = [
    { country: 'United States', x: 78, y: 45, size: 331900000 },
    { country: 'Brazil', x: 52, y: 68, size: 215000000 },
    { country: 'India', x: 35, y: 75, size: 1420000000 },
    { country: 'United Kingdom', x: 85, y: 38, size: 67500000 },
    { country: 'Germany', x: 88, y: 32, size: 83200000 },
    { country: 'France', x: 86, y: 35, size: 67700000 },
    { country: 'Italy', x: 82, y: 42, size: 59000000 },
    { country: 'Spain', x: 84, y: 40, size: 47400000 },
    { country: 'Japan', x: 90, y: 48, size: 125000000 },
    { country: 'South Korea', x: 87, y: 35, size: 51700000 },
    { country: 'Australia', x: 89, y: 28, size: 25900000 },
    { country: 'Canada', x: 87, y: 30, size: 38200000 },
    { country: 'Mexico', x: 48, y: 62, size: 128900000 },
    { country: 'South Africa', x: 45, y: 72, size: 60000000 },
    { country: 'Nigeria', x: 28, y: 82, size: 213400000 },
    { country: 'Egypt', x: 42, y: 65, size: 104000000 },
    { country: 'Russia', x: 65, y: 52, size: 146000000 },
    { country: 'China', x: 72, y: 55, size: 1412000000 },
    { country: 'Indonesia', x: 38, y: 70, size: 275000000 },
    { country: 'Bangladesh', x: 25, y: 85, size: 169400000 }
  ];

  // Apply scenario adjustments
  let adjustmentFactor = { x: 1, y: 1 };
  if (scenario === '2030') {
    adjustmentFactor = isOptimistic ? { x: 1.1, y: 0.9 } : { x: 0.9, y: 1.1 };
  } else if (scenario === '2050') {
    adjustmentFactor = isOptimistic ? { x: 1.2, y: 0.85 } : { x: 0.8, y: 1.2 };
  }

  return baseData.map(country => ({
    ...country,
    x: Math.min(100, Math.max(0, country.x * adjustmentFactor.x)),
    y: Math.min(100, Math.max(0, country.y * adjustmentFactor.y))
  }));
};

export default function VulnerabilityChart({ scenario, isOptimistic }) {
  const chartRef = useRef(null);

  useEffect(() => {
    if (!chartRef.current) return;

    const data = generateChartData(scenario, isOptimistic);
    
    // Separate high-risk and other countries
    const highRisk = data.filter(d => d.x < 50 && d.y > 60);
    const moderate = data.filter(d => !highRisk.includes(d));

    const highRiskTrace = {
      x: highRisk.map(d => d.x),
      y: highRisk.map(d => d.y),
      mode: 'markers',
      name: 'High Risk Countries',
      marker: {
        size: highRisk.map(d => Math.sqrt(d.size) / 800),
        color: '#FF4444',
        line: {
          color: '#FF0000',
          width: 2
        },
        opacity: 0.8
      },
      text: highRisk.map(d => d.country),
      hovertemplate: '<b>%{text}</b><br>' +
                    'Healthcare Capacity: %{x:.1f}<br>' +
                    'Social Vulnerability: %{y:.1f}<br>' +
                    '<extra></extra>'
    };

    const moderateTrace = {
      x: moderate.map(d => d.x),
      y: moderate.map(d => d.y),
      mode: 'markers',
      name: 'Other Countries',
      marker: {
        size: moderate.map(d => Math.sqrt(d.size) / 800),
        color: moderate.map(d => {
          const vulnerability = (100 - d.x) * 0.5 + d.y * 0.5;
          return vulnerability;
        }),
        colorscale: [
          [0, '#2E8B57'],
          [0.25, '#90EE90'],
          [0.5, '#FFD700'],
          [0.75, '#FF9800'],
          [1, '#FF4444']
        ],
        showscale: true,
        colorbar: {
          title: 'Risk<br>Score',
          titlefont: { color: '#f0f2f5', size: 12 },
          tickfont: { color: '#f0f2f5', size: 10 },
          x: 1.02,
          xpad: 10,
          y: 0.5,
          ypad: 0,
          len: 0.8,
          thickness: 15
        },
        opacity: 0.7
      },
      text: moderate.map(d => d.country),
      hovertemplate: '<b>%{text}</b><br>' +
                    'Healthcare Capacity: %{x:.1f}<br>' +
                    'Social Vulnerability: %{y:.1f}<br>' +
                    '<extra></extra>'
    };

    const layout = {
      xaxis: {
        title: 'Healthcare Capacity Index',
        gridcolor: 'rgba(255,255,255,0.1)',
        zerolinecolor: 'rgba(255,255,255,0.2)',
        tickfont: { color: '#f0f2f5' },
        titlefont: { color: '#f0f2f5', size: 14 },
        range: [0, 100]
      },
      yaxis: {
        title: 'Social Vulnerability Index',
        gridcolor: 'rgba(255,255,255,0.1)',
        zerolinecolor: 'rgba(255,255,255,0.2)',
        tickfont: { color: '#f0f2f5' },
        titlefont: { color: '#f0f2f5', size: 14 },
        range: [0, 100]
      },
      paper_bgcolor: 'transparent',
      plot_bgcolor: 'transparent',
      margin: { t: 20, r: 120, b: 60, l: 60 },
      font: { color: '#f0f2f5' },
      hovermode: 'closest',
      showlegend: true,
      legend: {
        x: 0.02,
        y: 0.98,
        xanchor: 'left',
        yanchor: 'top',
        bgcolor: 'rgba(18, 22, 37, 0.8)',
        bordercolor: 'rgba(255,255,255,0.2)',
        borderwidth: 1,
        font: { size: 12 }
      },
      annotations: [
        {
          x: 25,
          y: 75,
          xref: 'x',
          yref: 'y',
          text: 'HIGH RISK',
          showarrow: false,
          font: {
            size: 14,
            color: '#FF4444'
          },
          opacity: 0.3
        },
        {
          x: 75,
          y: 25,
          xref: 'x',
          yref: 'y',
          text: 'LOW RISK',
          showarrow: false,
          font: {
            size: 14,
            color: '#2E8B57'
          },
          opacity: 0.3
        }
      ]
    };

    const config = {
      displayModeBar: false,
      responsive: true
    };

    Plotly.newPlot(chartRef.current, [moderateTrace, highRiskTrace], layout, config);

    // Cleanup
    return () => {
      if (chartRef.current) {
        Plotly.purge(chartRef.current);
      }
    };
  }, [scenario, isOptimistic]);

  return <div ref={chartRef} style={{ width: '100%', height: '100%' }} />;
}