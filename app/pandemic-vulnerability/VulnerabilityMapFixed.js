'use client';

import { useEffect, useRef } from 'react';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import styles from './pandemic-vulnerability.module.css';

// Fix Leaflet default icon issue
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon-2x.png',
  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon.png',
  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-shadow.png',
});

// Country vulnerability data
const countryData = {
  'United States': { coordinates: [39.8283, -98.5795], healthcare: 78, social: 45, economic: 82, population: 331900000 },
  'Canada': { coordinates: [56.1304, -106.3468], healthcare: 87, social: 30, economic: 83, population: 38200000 },
  'Mexico': { coordinates: [23.6345, -102.5528], healthcare: 48, social: 62, economic: 52, population: 128900000 },
  'Brazil': { coordinates: [-14.2350, -51.9253], healthcare: 52, social: 68, economic: 48, population: 215000000 },
  'United Kingdom': { coordinates: [55.3781, -3.4360], healthcare: 85, social: 38, economic: 76, population: 67500000 },
  'Germany': { coordinates: [51.1657, 10.4515], healthcare: 88, social: 32, economic: 84, population: 83200000 },
  'France': { coordinates: [46.2276, 2.2137], healthcare: 86, social: 35, economic: 78, population: 67700000 },
  'Italy': { coordinates: [41.8719, 12.5674], healthcare: 82, social: 42, economic: 68, population: 59000000 },
  'Spain': { coordinates: [40.4637, -3.7492], healthcare: 84, social: 40, economic: 70, population: 47400000 },
  'Russia': { coordinates: [61.5240, 105.3188], healthcare: 65, social: 52, economic: 58, population: 146000000 },
  'China': { coordinates: [35.8617, 104.1954], healthcare: 72, social: 55, economic: 75, population: 1412000000 },
  'India': { coordinates: [20.5937, 78.9629], healthcare: 35, social: 75, economic: 55, population: 1420000000 },
  'Japan': { coordinates: [36.2048, 138.2529], healthcare: 90, social: 48, economic: 88, population: 125000000 },
  'South Korea': { coordinates: [35.9078, 127.7669], healthcare: 87, social: 35, economic: 85, population: 51700000 },
  'Australia': { coordinates: [-25.2744, 133.7751], healthcare: 89, social: 28, economic: 87, population: 25900000 },
  'South Africa': { coordinates: [-30.5595, 22.9375], healthcare: 45, social: 72, economic: 48, population: 60000000 },
  'Nigeria': { coordinates: [9.0820, 8.6753], healthcare: 25, social: 85, economic: 38, population: 211400000 },
  'Egypt': { coordinates: [26.8206, 30.8025], healthcare: 42, social: 68, economic: 45, population: 104300000 },
  'Saudi Arabia': { coordinates: [23.8859, 45.0792], healthcare: 72, social: 45, economic: 68, population: 35000000 },
  'Indonesia': { coordinates: [-0.7893, 113.9213], healthcare: 38, social: 70, economic: 50, population: 275000000 },
  'Argentina': { coordinates: [-38.4161, -63.6167], healthcare: 65, social: 55, economic: 55, population: 45000000 },
  'Turkey': { coordinates: [38.9637, 35.2433], healthcare: 68, social: 50, economic: 58, population: 85000000 },
  'Iran': { coordinates: [32.4279, 53.6880], healthcare: 58, social: 62, economic: 45, population: 85000000 },
  'Thailand': { coordinates: [15.8700, 100.9925], healthcare: 68, social: 52, economic: 65, population: 70000000 },
  'Vietnam': { coordinates: [14.0583, 108.2772], healthcare: 55, social: 58, economic: 62, population: 98000000 },
  'Philippines': { coordinates: [12.8797, 121.7740], healthcare: 42, social: 72, economic: 48, population: 110000000 },
  'Pakistan': { coordinates: [30.3753, 69.3451], healthcare: 32, social: 78, economic: 40, population: 230000000 },
  'Bangladesh': { coordinates: [23.6850, 90.3563], healthcare: 25, social: 85, economic: 35, population: 169400000 },
  'Kenya': { coordinates: [-0.0236, 37.9062], healthcare: 35, social: 75, economic: 42, population: 54000000 },
  'Ethiopia': { coordinates: [9.1450, 40.4897], healthcare: 22, social: 88, economic: 32, population: 120800000 },
  'Morocco': { coordinates: [31.7917, -7.0926], healthcare: 52, social: 65, economic: 50, population: 37000000 }
};

// Major pandemic outbreaks for overlay
const outbreakData = [
  { name: 'COVID-19', lat: 30.5928, lng: 114.3055, year: '2019-present', severity: 'Pandemic' },
  { name: 'H1N1', lat: 19.4326, lng: -99.1332, year: '2009', severity: 'Pandemic' },
  { name: 'SARS', lat: 23.1291, lng: 113.2644, year: '2002-2003', severity: 'Epidemic' },
  { name: 'MERS', lat: 24.7136, lng: 46.6753, year: '2012', severity: 'Epidemic' },
  { name: 'Ebola', lat: 6.3156, lng: -10.8074, year: '2014-2016', severity: 'Epidemic' },
  { name: 'Zika', lat: -15.8267, lng: -47.9218, year: '2015-2016', severity: 'Epidemic' }
];

const calculateVulnerability = (country, scenario, isOptimistic) => {
  let adjustmentFactor = 1;
  if (scenario === '2030') {
    adjustmentFactor = isOptimistic ? 0.9 : 1.15;
  } else if (scenario === '2050') {
    adjustmentFactor = isOptimistic ? 0.85 : 1.3;
  }

  const vulnerabilityIndex = Math.round(
    ((100 - country.healthcare) * 0.4 + 
     country.social * 0.4 + 
     (100 - country.economic) * 0.2) * adjustmentFactor
  );

  return Math.min(100, vulnerabilityIndex);
};

const getVulnerabilityColor = (index) => {
  if (index >= 80) return '#FF4444'; // Very High - Red
  if (index >= 60) return '#FF9800'; // High - Orange
  if (index >= 40) return '#FFD700'; // Medium - Yellow
  if (index >= 20) return '#90EE90'; // Low - Light Green
  return '#2E8B57'; // Very Low - Dark Green
};

export default function VulnerabilityMapFixed({ scenario, isOptimistic, onCountrySelect }) {
  const mapRef = useRef(null);
  const mapInstanceRef = useRef(null);
  const countriesLayerRef = useRef(null);
  const outbreaksLayerRef = useRef(null);

  useEffect(() => {
    if (!mapRef.current || mapInstanceRef.current) return;

    // Initialize map
    mapInstanceRef.current = L.map(mapRef.current, {
      center: [20, 0],
      zoom: 2,
      minZoom: 2,
      maxZoom: 6,
      worldCopyJump: true
    });

    // Add dark tile layer
    L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {
      attribution: '© OpenStreetMap contributors © CARTO'
    }).addTo(mapInstanceRef.current);

    // Create layer groups
    countriesLayerRef.current = L.layerGroup().addTo(mapInstanceRef.current);
    outbreaksLayerRef.current = L.layerGroup().addTo(mapInstanceRef.current);

    return () => {
      if (mapInstanceRef.current) {
        mapInstanceRef.current.remove();
        mapInstanceRef.current = null;
      }
    };
  }, []);

  useEffect(() => {
    if (!mapInstanceRef.current || !countriesLayerRef.current) return;

    // Clear existing layers
    countriesLayerRef.current.clearLayers();

    // Add country circles
    Object.entries(countryData).forEach(([name, data]) => {
      const vulnerability = calculateVulnerability(data, scenario, isOptimistic);
      const color = getVulnerabilityColor(vulnerability);
      
      // Calculate radius based on population (log scale for better visibility)
      const radius = Math.sqrt(data.population / 1000000) * 3000;
      
      const circle = L.circle(data.coordinates, {
        color: color,
        fillColor: color,
        fillOpacity: 0.6,
        weight: 2,
        radius: radius
      }).addTo(countriesLayerRef.current);

      // Create popup content
      const popupContent = `
        <div style="font-family: Arial, sans-serif; padding: 10px;">
          <h3 style="margin: 0 0 10px 0; color: #333;">${name}</h3>
          <div style="background: ${color}; color: white; padding: 8px; border-radius: 4px; text-align: center; margin-bottom: 10px;">
            <div style="font-size: 24px; font-weight: bold;">${vulnerability}</div>
            <div style="font-size: 12px;">Vulnerability Score</div>
          </div>
          <table style="width: 100%; font-size: 13px;">
            <tr><td><strong>Healthcare:</strong></td><td>${data.healthcare}/100</td></tr>
            <tr><td><strong>Social:</strong></td><td>${data.social}/100</td></tr>
            <tr><td><strong>Economic:</strong></td><td>${data.economic}/100</td></tr>
            <tr><td><strong>Population:</strong></td><td>${(data.population / 1000000).toFixed(1)}M</td></tr>
          </table>
          <div style="margin-top: 10px; font-size: 12px; color: #666;">
            Risk Level: ${vulnerability >= 80 ? 'Very High' : vulnerability >= 60 ? 'High' : vulnerability >= 40 ? 'Medium' : vulnerability >= 20 ? 'Low' : 'Very Low'}
          </div>
        </div>
      `;

      circle.bindPopup(popupContent);
      
      circle.on('click', () => {
        if (onCountrySelect) {
          onCountrySelect({
            name,
            vulnerabilityIndex: vulnerability,
            healthcareCapacity: data.healthcare,
            socialVulnerability: data.social,
            economicResilience: data.economic,
            riskLevel: vulnerability >= 80 ? 'Very High' : vulnerability >= 60 ? 'High' : vulnerability >= 40 ? 'Medium' : vulnerability >= 20 ? 'Low' : 'Very Low'
          });
        }
      });
    });

    // Add outbreak markers
    outbreaksLayerRef.current.clearLayers();
    outbreakData.forEach(outbreak => {
      const icon = L.divIcon({
        className: 'outbreak-marker',
        html: `<div style="background: ${outbreak.severity === 'Pandemic' ? '#FF0000' : '#FF6B6B'}; width: 20px; height: 20px; border-radius: 50%; border: 2px solid white; box-shadow: 0 2px 5px rgba(0,0,0,0.3);"></div>`,
        iconSize: [20, 20]
      });

      const marker = L.marker([outbreak.lat, outbreak.lng], { icon })
        .addTo(outbreaksLayerRef.current);
      
      marker.bindPopup(`
        <div style="font-family: Arial, sans-serif;">
          <h4 style="margin: 0 0 5px 0;">${outbreak.name}</h4>
          <p style="margin: 0; font-size: 13px;">
            <strong>Period:</strong> ${outbreak.year}<br>
            <strong>Type:</strong> ${outbreak.severity}
          </p>
        </div>
      `);
    });

  }, [scenario, isOptimistic, onCountrySelect]);

  return <div ref={mapRef} style={{ width: '100%', height: '100%' }} />;
}