'use client';

import { useState, useEffect, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import dynamic from 'next/dynamic';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  ArcElement,
  Title,
  Tooltip,
  Legend,
  Filler,
  RadialLinearScale
} from 'chart.js';
import { 
  FaDollarSign, 
  FaChartLine, 
  FaGlobe, 
  FaShieldAlt, 
  FaExclamationTriangle, 
  FaCheckCircle,
  FaMapMarkedAlt,
  FaBalanceScale,
  FaProjectDiagram,
  FaCalculator,
  FaChartArea,
  FaCompressArrowsAlt,
  FaExpandArrowsAlt,
  FaPlay,
  FaPause,
  FaReset,
  FaEdit,
  FaSave,
  FaTimes,
  FaPlus,
  FaInfoCircle
} from 'react-icons/fa';
import styles from './PolicyInvestmentDashboard.module.css';

// Dynamic imports for charts to avoid SSR issues
const Line = dynamic(() => import('react-chartjs-2').then(mod => ({ default: mod.Line })), { ssr: false });
const Bar = dynamic(() => import('react-chartjs-2').then(mod => ({ default: mod.Bar })), { ssr: false });
const Doughnut = dynamic(() => import('react-chartjs-2').then(mod => ({ default: mod.Doughnut })), { ssr: false });
const Radar = dynamic(() => import('react-chartjs-2').then(mod => ({ default: mod.Radar })), { ssr: false });

// Import comprehensive policy scenarios
import {
  comprehensivePolicyScenarios,
  calculateScenarioImpact,
  generateScenarioHeatmapData,
  methodologyReferences,
  getScenarioMapData,
  calculateCompoundRisk
} from './policyScenarioModeling.js';

// Register ChartJS components only on client side
if (typeof window !== 'undefined') {
  ChartJS.register(
    CategoryScale,
    LinearScale,
    PointElement,
    LineElement,
    BarElement,
    ArcElement,
    Title,
    Tooltip,
    Legend,
    Filler,
    RadialLinearScale
  );
}

// Dynamically import map component to avoid SSR issues
const PolicyScenarioMap = dynamic(() => import('./PolicyScenarioMap'), {
  ssr: false,
  loading: () => <div className={styles.mapLoading}>Loading Policy Impact Map...</div>
});

function PolicyInvestmentDashboard({ scenario = 'baseline', state = null }) {
  // Enhanced state management for scenario modeling
  const [primaryScenario, setPrimaryScenario] = useState('baseline');
  const [comparisonScenario, setComparisonScenario] = useState('strategic_investment');
  const [selectedMetric, setSelectedMetric] = useState('economicImpact');
  const [timeHorizon, setTimeHorizon] = useState(10);
  const [showComparison, setShowComparison] = useState(true);
  const [activeTab, setActiveTab] = useState('overview'); // overview, scenarios, modeling, impact
  const [selectedState, setSelectedState] = useState(state);
  const [animationSpeed, setAnimationSpeed] = useState(1);
  const [isAnimating, setIsAnimating] = useState(false);
  const [showScenarioEditor, setShowScenarioEditor] = useState(false);
  const [editingScenario, setEditingScenario] = useState(null);
  const [customScenarios, setCustomScenarios] = useState({});
  
  // Legacy state for backward compatibility
  const [investmentData, setInvestmentData] = useState(null);
  const [resilienceMetrics, setResilienceMetrics] = useState(null);
  const [projections, setProjections] = useState(null);
  const [factCheckResults, setFactCheckResults] = useState(null);
  const [citations, setCitations] = useState([]);
  const [loading, setLoading] = useState(false); // Set to false as we have static data

  // Get current scenario data with safety checks
  const getCurrentScenarioData = useCallback(() => {
    const primary = comprehensivePolicyScenarios[primaryScenario];
    const comparison = showComparison && comparisonScenario ? comprehensivePolicyScenarios[comparisonScenario] : null;
    
    if (!primary) {
      console.warn(`Primary scenario '${primaryScenario}' not found`);
      return { primary: null, comparison: null };
    }
    
    return {
      primary,
      comparison
    };
  }, [primaryScenario, comparisonScenario, showComparison]);

  // Calculate scenario comparison metrics
  const getComparisonMetrics = useCallback(() => {
    const { primary, comparison } = getCurrentScenarioData();
    if (!primary || !comparison) return null;
    
    // Safety checks for nested properties
    if (!primary.projectedOutcomes || !comparison.projectedOutcomes ||
        !primary.metrics || !comparison.metrics) {
      console.warn('Missing projectedOutcomes or metrics in scenario data');
      return null;
    }

    const metrics = {
      economicImpact: {
        primary: primary.projectedOutcomes.economicImpact.totalAnnualCost,
        comparison: comparison.projectedOutcomes.economicImpact.totalAnnualCost,
        difference: comparison.projectedOutcomes.economicImpact.totalAnnualCost - primary.projectedOutcomes.economicImpact.totalAnnualCost,
        percentChange: ((comparison.projectedOutcomes.economicImpact.totalAnnualCost - primary.projectedOutcomes.economicImpact.totalAnnualCost) / primary.projectedOutcomes.economicImpact.totalAnnualCost) * 100
      },
      mortality: {
        primary: primary.projectedOutcomes.mortality.totalInfectiousDisease,
        comparison: comparison.projectedOutcomes.mortality.totalInfectiousDisease,
        difference: comparison.projectedOutcomes.mortality.totalInfectiousDisease - primary.projectedOutcomes.mortality.totalInfectiousDisease,
        percentChange: ((comparison.projectedOutcomes.mortality.totalInfectiousDisease - primary.projectedOutcomes.mortality.totalInfectiousDisease) / primary.projectedOutcomes.mortality.totalInfectiousDisease) * 100
      },
      preparedness: {
        primary: primary.metrics.domesticPreparednessScore,
        comparison: comparison.metrics.domesticPreparednessScore,
        difference: comparison.metrics.domesticPreparednessScore - primary.metrics.domesticPreparednessScore,
        percentChange: ((comparison.metrics.domesticPreparednessScore - primary.metrics.domesticPreparednessScore) / primary.metrics.domesticPreparednessScore) * 100
      }
    };

    return metrics;
  }, [getCurrentScenarioData]);

  // Initialize citations from methodology
  useEffect(() => {
    const allCitations = Object.values(methodologyReferences).flatMap(ref => ref.sources);
    setCitations(allCitations);
  }, []);

  // Enhanced chart configurations
  const getScenarioComparisonChartData = () => {
    const { primary, comparison } = getCurrentScenarioData();
    if (!primary || !comparison) return null;
    
    // Safety checks for required properties
    if (!primary.projectedOutcomes || !comparison.projectedOutcomes ||
        !primary.metrics || !comparison.metrics) {
      return null;
    }

    return {
      labels: ['Economic Impact ($B)', 'Lives Saved', 'Preparedness Score', 'Global Engagement'],
      datasets: [
        {
          label: primary.shortName,
          data: [
            primary.projectedOutcomes.economicImpact.totalAnnualCost,
            330 - primary.projectedOutcomes.mortality.totalInfectiousDisease, // Lives saved (inverse of mortality)
            primary.metrics.domesticPreparednessScore,
            primary.metrics.globalEngagementScore
          ],
          backgroundColor: primary.color + '40',
          borderColor: primary.color,
          borderWidth: 2
        },
        {
          label: comparison.shortName,
          data: [
            comparison.projectedOutcomes.economicImpact.totalAnnualCost,
            330 - comparison.projectedOutcomes.mortality.totalInfectiousDisease,
            comparison.metrics.domesticPreparednessScore,
            comparison.metrics.globalEngagementScore
          ],
          backgroundColor: comparison.color + '40',
          borderColor: comparison.color,
          borderWidth: 2
        }
      ]
    };
  };

  const getTimeSeriesData = () => {
    const { primary, comparison } = getCurrentScenarioData();
    if (!primary) return { labels: [], datasets: [] };
    
    const years = Array.from({ length: timeHorizon }, (_, i) => `Year ${i + 1}`);
    
    // Generate projection curves based on scenario characteristics
    const generateCurve = (startValue, endValue, volatility = 0.1) => {
      const curve = [];
      for (let i = 0; i < timeHorizon; i++) {
        const progress = i / (timeHorizon - 1);
        const baseValue = startValue + (endValue - startValue) * progress;
        const noise = (Math.random() - 0.5) * volatility * baseValue;
        curve.push(Math.max(0, baseValue + noise));
      }
      return curve;
    };

    return {
      labels: years,
      datasets: [
        {
          label: `${primary.shortName} - Economic Cost`,
          data: generateCurve(
            primary.projectedOutcomes.economicImpact.totalAnnualCost * 0.8,
            primary.projectedOutcomes.economicImpact.totalAnnualCost,
            0.05
          ),
          borderColor: primary.color,
          backgroundColor: primary.color + '20',
          fill: comparison ? false : true
        },
        ...(comparison ? [{
          label: `${comparison.shortName} - Economic Cost`,
          data: generateCurve(
            comparison.projectedOutcomes.economicImpact.totalAnnualCost * 0.8,
            comparison.projectedOutcomes.economicImpact.totalAnnualCost,
            0.05
          ),
          borderColor: comparison.color,
          backgroundColor: comparison.color + '20',
          fill: true
        }] : [])
      ]
    };
  };

  const getFundingAllocationData = () => {
    const { primary } = getCurrentScenarioData();
    if (!primary || !primary.funding) return { labels: [], datasets: [] };
    
    const funding = primary.funding;
    
    return {
      labels: ['Global Health', 'CDC Budget', 'FEMA Prep', 'NIH Research', 'Hospital Readiness', 'State Grants'],
      datasets: [{
        data: [
          funding.globalHealth,
          funding.cdcBudget,
          funding.femaPreparedness,
          funding.nihResearch,
          funding.hospitalReadiness,
          funding.stateHealthGrants
        ],
        backgroundColor: [
          '#3B82F6',
          '#10B981', 
          '#F59E0B',
          '#8B5CF6',
          '#EF4444',
          '#06B6D4'
        ],
        borderWidth: 2,
        borderColor: '#1F2937'
      }]
    };
  };

  if (loading) {
    return (
      <div className={styles.loading}>
        <div className={styles.spinner}></div>
        <p>Loading policy scenario analysis...</p>
      </div>
    );
  }

  const { primary: currentScenario, comparison: comparisonData } = getCurrentScenarioData();
  const comparisonMetrics = getComparisonMetrics();
  
  
  // Safety check - return loading if scenario data is not available
  if (!currentScenario) {
    return (
      <div className={styles.loading}>
        <div className={styles.spinner}></div>
        <p>Loading scenario data...</p>
      </div>
    );
  }

  return (
    <div className={styles.dashboard}>
      {/* Enhanced Header with Scenario Controls */}
      <div className={styles.header}>
        <div className={styles.headerContent}>
          <div className={styles.titleSection}>
            <h2 className={styles.title}>
              Policy Simulator & Scenario Modeling
              {selectedState && <span className={styles.stateTag}>{selectedState}</span>}
            </h2>
            <p className={styles.subtitle}>
              Evidence-based policy analysis with real-time scenario comparison and impact modeling
            </p>
          </div>
          
          <div className={styles.scenarioControls}>
            <div className={styles.controlGroup}>
              <label>Primary Scenario:</label>
              <select 
                value={primaryScenario} 
                onChange={(e) => setPrimaryScenario(e.target.value)}
                className={styles.scenarioSelect}
              >
                {Object.entries(comprehensivePolicyScenarios).map(([key, scenario]) => (
                  <option key={key} value={key}>{scenario.shortName}</option>
                ))}
              </select>
            </div>
            
            <div className={styles.controlGroup}>
              <label>
                <input 
                  type="checkbox" 
                  checked={showComparison}
                  onChange={(e) => setShowComparison(e.target.checked)}
                />
                Compare with:
              </label>
              {showComparison && (
                <select 
                  value={comparisonScenario} 
                  onChange={(e) => setComparisonScenario(e.target.value)}
                  className={styles.scenarioSelect}
                >
                  {Object.entries(comprehensivePolicyScenarios)
                    .filter(([key]) => key !== primaryScenario)
                    .map(([key, scenario]) => (
                    <option key={key} value={key}>{scenario.shortName}</option>
                  ))}
                </select>
              )}
            </div>
            
            <div className={styles.controlGroup}>
              <label>Time Horizon:</label>
              <select 
                value={timeHorizon} 
                onChange={(e) => setTimeHorizon(Number(e.target.value))}
                className={styles.scenarioSelect}
              >
                <option value={5}>5 Years</option>
                <option value={10}>10 Years</option>
                <option value={20}>20 Years</option>
              </select>
            </div>
          </div>
        </div>
      </div>

      {/* Tab Navigation */}
      <div className={styles.tabNavigation}>
        <button 
          className={`${styles.tabBtn} ${activeTab === 'overview' ? styles.active : ''}`}
          onClick={() => setActiveTab('overview')}
        >
          <FaChartLine /> Overview
        </button>
        <button 
          className={`${styles.tabBtn} ${activeTab === 'scenarios' ? styles.active : ''}`}
          onClick={() => setActiveTab('scenarios')}
        >
          <FaBalanceScale /> Scenario Comparison
        </button>
        <button 
          className={`${styles.tabBtn} ${activeTab === 'modeling' ? styles.active : ''}`}
          onClick={() => setActiveTab('modeling')}
        >
          <FaCalculator /> Interactive Modeling
        </button>
        <button 
          className={`${styles.tabBtn} ${activeTab === 'editor' ? styles.active : ''}`}
          onClick={() => setActiveTab('editor')}
        >
          <FaEdit /> Scenario Editor
        </button>
        <button 
          className={`${styles.tabBtn} ${activeTab === 'impact' ? styles.active : ''}`}
          onClick={() => setActiveTab('impact')}
        >
          <FaMapMarkedAlt /> Geographic Impact
        </button>
      </div>

      {/* Key Metrics Cards */}
      <div className={styles.metricsGrid}>
        <motion.div 
          className={styles.metricCard}
          whileHover={{ scale: 1.02 }}
          style={{ borderLeft: `4px solid ${currentScenario.color}` }}
        >
          <FaDollarSign className={styles.metricIcon} />
          <div className={styles.metricContent}>
            <h3>Annual Economic Cost</h3>
            <p className={styles.metricValue}>
              ${(currentScenario.projectedOutcomes.economicImpact.totalAnnualCost).toFixed(0)}B
            </p>
            <span className={styles.metricLabel}>
              {comparisonMetrics && (
                <span className={comparisonMetrics.economicImpact.percentChange >= 0 ? styles.negative : styles.positive}>
                  {comparisonMetrics.economicImpact.percentChange >= 0 ? '+' : ''}{comparisonMetrics.economicImpact.percentChange.toFixed(1)}% vs {comparisonData?.shortName}
                </span>
              )}
            </span>
          </div>
        </motion.div>

        <motion.div 
          className={styles.metricCard}
          whileHover={{ scale: 1.02 }}
          style={{ borderLeft: `4px solid ${currentScenario.color}` }}
        >
          <FaShieldAlt className={styles.metricIcon} style={{ color: '#10B981' }} />
          <div className={styles.metricContent}>
            <h3>Preparedness Score</h3>
            <p className={styles.metricValue}>
              {currentScenario.metrics.domesticPreparednessScore}/100
            </p>
            <span className={styles.metricLabel}>
              {comparisonMetrics && (
                <span className={comparisonMetrics.preparedness.percentChange >= 0 ? styles.positive : styles.negative}>
                  {comparisonMetrics.preparedness.percentChange >= 0 ? '+' : ''}{comparisonMetrics.preparedness.percentChange.toFixed(1)}% vs {comparisonData?.shortName}
                </span>
              )}
            </span>
          </div>
        </motion.div>

        <motion.div 
          className={styles.metricCard}
          whileHover={{ scale: 1.02 }}
          style={{ borderLeft: `4px solid ${currentScenario.color}` }}
        >
          <FaExclamationTriangle className={styles.metricIcon} style={{ color: '#EF4444' }} />
          <div className={styles.metricContent}>
            <h3>Mortality Rate</h3>
            <p className={styles.metricValue}>
              {currentScenario.projectedOutcomes.mortality.totalInfectiousDisease.toFixed(1)}
            </p>
            <span className={styles.metricLabel}>
              per 100k population annually
              {comparisonMetrics && (
                <span className={comparisonMetrics.mortality.percentChange >= 0 ? styles.negative : styles.positive}>
                  {comparisonMetrics.mortality.percentChange >= 0 ? '+' : ''}{comparisonMetrics.mortality.percentChange.toFixed(1)}% vs {comparisonData?.shortName}
                </span>
              )}
            </span>
          </div>
        </motion.div>

        <motion.div 
          className={styles.metricCard}
          whileHover={{ scale: 1.02 }}
          style={{ borderLeft: `4px solid ${currentScenario.color}` }}
        >
          <FaGlobe className={styles.metricIcon} style={{ color: '#8B5CF6' }} />
          <div className={styles.metricContent}>
            <h3>Global Engagement</h3>
            <p className={styles.metricValue}>
              {currentScenario.metrics.globalEngagementScore}/100
            </p>
            <span className={styles.metricLabel}>International cooperation index</span>
          </div>
        </motion.div>
      </div>

      {/* Tab Content */}
      <AnimatePresence mode="wait">
        {activeTab === 'overview' && (
          <motion.div
            key="overview"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className={styles.tabContent}
          >
            <div className={styles.overviewGrid}>
              {/* Time Series Analysis */}
              <div className={styles.chartSection}>
                <h3 className={styles.sectionTitle}>Economic Impact Projection</h3>
                <div className={styles.chartContainer}>
                  {typeof window !== 'undefined' ? (
                    <Line 
                    data={getTimeSeriesData()}
                    options={{
                      responsive: true,
                      maintainAspectRatio: false,
                      plugins: {
                        legend: { position: 'top' },
                        title: {
                          display: true,
                          text: `${timeHorizon}-Year Economic Cost Projection`
                        }
                      },
                      scales: {
                        y: {
                          beginAtZero: true,
                          ticks: {
                            callback: function(value) {
                              return '$' + (value / 1e9).toFixed(1) + 'B';
                            }
                          }
                        }
                      }
                    }}
                  />
                  ) : (
                    <div className={styles.chartLoading}>Loading chart...</div>
                  )}
                </div>
              </div>

              {/* Funding Allocation */}
              <div className={styles.chartSection}>
                <h3 className={styles.sectionTitle}>Funding Allocation ({currentScenario.shortName})</h3>
                <div className={styles.chartContainer}>
                  {typeof window !== 'undefined' ? (
                    <Doughnut 
                    data={getFundingAllocationData()}
                    options={{
                      responsive: true,
                      maintainAspectRatio: false,
                      plugins: {
                        legend: { position: 'right' }
                      }
                    }}
                  />
                  ) : (
                    <div className={styles.chartLoading}>Loading chart...</div>
                  )}
                </div>
              </div>
            </div>

            {/* Scenario Description */}
            <div className={styles.scenarioDescription}>
              <h3>{currentScenario.name}</h3>
              <p>{currentScenario.description}</p>
              <div className={styles.keyChanges}>
                <h4>Key Policy Changes:</h4>
                <ul>
                  {currentScenario.keyChanges && currentScenario.keyChanges.map((change, index) => (
                    <li key={index}>{change}</li>
                  ))}
                  {!currentScenario.keyChanges && (
                    <li>Policy changes data not available for this scenario</li>
                  )}
                </ul>
              </div>
            </div>
          </motion.div>
        )}

        {activeTab === 'scenarios' && (
          <motion.div
            key="scenarios"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className={styles.tabContent}
          >
            {showComparison && comparisonData && (
              <>
                <div className={styles.comparisonGrid}>
                  <div className={styles.chartSection}>
                    <h3 className={styles.sectionTitle}>Scenario Comparison</h3>
                    <div className={styles.chartContainer}>
                      {typeof window !== 'undefined' ? (
                        <Radar 
                        data={getScenarioComparisonChartData()}
                        options={{
                          responsive: true,
                          maintainAspectRatio: false,
                          plugins: {
                            legend: { position: 'top' }
                          },
                          scales: {
                            r: {
                              beginAtZero: true,
                              max: 100
                            }
                          }
                        }}
                      />
                      ) : (
                        <div className={styles.chartLoading}>Loading chart...</div>
                      )}
                    </div>
                  </div>

                  <div className={styles.comparisonTable}>
                    <h3 className={styles.sectionTitle}>Impact Comparison</h3>
                    <table className={styles.metricsTable}>
                      <thead>
                        <tr>
                          <th>Metric</th>
                          <th>{currentScenario.shortName}</th>
                          <th>{comparisonData.shortName}</th>
                          <th>Difference</th>
                        </tr>
                      </thead>
                      <tbody>
                        <tr>
                          <td>Annual Economic Cost</td>
                          <td>${comparisonMetrics.economicImpact.primary.toFixed(0)}B</td>
                          <td>${comparisonMetrics.economicImpact.comparison.toFixed(0)}B</td>
                          <td className={comparisonMetrics.economicImpact.percentChange >= 0 ? styles.negative : styles.positive}>
                            {comparisonMetrics.economicImpact.percentChange.toFixed(1)}%
                          </td>
                        </tr>
                        <tr>
                          <td>Mortality Rate</td>
                          <td>{comparisonMetrics.mortality.primary.toFixed(1)}/100k</td>
                          <td>{comparisonMetrics.mortality.comparison.toFixed(1)}/100k</td>
                          <td className={comparisonMetrics.mortality.percentChange >= 0 ? styles.negative : styles.positive}>
                            {comparisonMetrics.mortality.percentChange.toFixed(1)}%
                          </td>
                        </tr>
                        <tr>
                          <td>Preparedness Score</td>
                          <td>{comparisonMetrics.preparedness.primary}/100</td>
                          <td>{comparisonMetrics.preparedness.comparison}/100</td>
                          <td className={comparisonMetrics.preparedness.percentChange >= 0 ? styles.positive : styles.negative}>
                            {comparisonMetrics.preparedness.percentChange.toFixed(1)}%
                          </td>
                        </tr>
                      </tbody>
                    </table>
                  </div>
                </div>
              </>
            )}
          </motion.div>
        )}

        {activeTab === 'modeling' && (
          <motion.div
            key="modeling"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className={styles.tabContent}
          >
            <div className={styles.modelingInterface}>
              <h3>Interactive Policy Modeling</h3>
              <p>Adjust funding levels and see real-time impact projections</p>
              {/* TODO: Add interactive sliders and real-time calculations */}
              <div className={styles.comingSoon}>
                Interactive modeling interface coming soon...
              </div>
            </div>
          </motion.div>
        )}

        {activeTab === 'editor' && (
          <motion.div
            key="editor"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className={styles.tabContent}
          >
            <div className={styles.scenarioEditor}>
              <div className={styles.editorHeader}>
                <h3 className={styles.sectionTitle}>
                  <FaEdit /> Scenario Configuration & Details
                </h3>
                <p className={styles.editorDescription}>
                  View detailed scenario descriptions, modify parameters, and create custom policy scenarios.
                </p>
              </div>

              {/* Scenario Selection for Editing */}
              <div className={styles.editorControls}>
                <div className={styles.controlGroup}>
                  <label>Select Scenario to View/Edit:</label>
                  <select 
                    value={editingScenario || primaryScenario} 
                    onChange={(e) => setEditingScenario(e.target.value)}
                    className={styles.scenarioSelect}
                  >
                    {Object.entries(comprehensivePolicyScenarios).map(([key, scenario]) => (
                      <option key={key} value={key}>{scenario.name}</option>
                    ))}
                  </select>
                </div>
                <button 
                  className={styles.createScenarioBtn}
                  onClick={() => setShowScenarioEditor(true)}
                >
                  <FaPlus /> Create Custom Scenario
                </button>
              </div>

              {/* Detailed Scenario Information */}
              {(editingScenario || primaryScenario) && (
                <div className={styles.scenarioDetailCard}>
                  {(() => {
                    const scenario = comprehensivePolicyScenarios[editingScenario || primaryScenario];
                    if (!scenario) {
                      return <div>Scenario not found</div>;
                    }
                    return (
                      <>
                        <div className={styles.scenarioHeader}>
                          <div className={styles.scenarioTitleSection}>
                            <h4 className={styles.scenarioTitle}>{scenario.name}</h4>
                            <span className={styles.scenarioShortName}>{scenario.shortName}</span>
                          </div>
                          <div 
                            className={styles.scenarioColorIndicator} 
                            style={{ backgroundColor: scenario.color }}
                          ></div>
                        </div>

                        <div className={styles.scenarioDescription}>
                          <h5><FaInfoCircle /> Overview</h5>
                          <p>{scenario.description}</p>
                          
                          {scenario.detailedDescription && (
                            <>
                              <h5>Detailed Description</h5>
                              <p>{scenario.detailedDescription}</p>
                            </>
                          )}

                          {scenario.rationale && (
                            <>
                              <h5>Policy Rationale</h5>
                              <p>{scenario.rationale}</p>
                            </>
                          )}

                          {scenario.keyPolicyAreas && (
                            <>
                              <h5>Key Policy Areas</h5>
                              <div className={styles.policyAreas}>
                                {scenario.keyPolicyAreas.map((area, index) => (
                                  <span key={index} className={styles.policyArea}>{area}</span>
                                ))}
                              </div>
                            </>
                          )}
                        </div>

                        {/* Funding Parameters */}
                        <div className={styles.fundingParameters}>
                          <h5>Funding Parameters (% of Baseline)</h5>
                          <div className={styles.parametersGrid}>
                            {scenario.funding ? Object.entries(scenario.funding).map(([key, value]) => (
                              <div key={key} className={styles.parameterItem}>
                                <label className={styles.parameterLabel}>
                                  {key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}
                                </label>
                                <div className={styles.parameterValue}>
                                  <span className={`${styles.fundingLevel} ${
                                    value > 100 ? styles.increase : 
                                    value < 100 ? styles.decrease : styles.baseline
                                  }`}>
                                    {value}%
                                  </span>
                                  <div className={styles.fundingBar}>
                                    <div 
                                      className={styles.fundingFill}
                                      style={{ 
                                        width: `${Math.min(value, 200)}%`,
                                        backgroundColor: value > 100 ? '#059669' : value < 100 ? '#DC2626' : '#6B7280'
                                      }}
                                    ></div>
                                  </div>
                                </div>
                              </div>
                            )) : <div>No funding data available</div>}
                          </div>
                        </div>

                        {/* Key Changes */}
                        {scenario.keyChanges && (
                          <div className={styles.keyChangesSection}>
                            <h5>Key Policy Changes</h5>
                            <ul className={styles.changesList}>
                              {scenario.keyChanges.map((change, index) => (
                                <li key={index}>{change}</li>
                              ))}
                            </ul>
                          </div>
                        )}

                        {/* Projected Metrics */}
                        <div className={styles.projectedMetrics}>
                          <h5>Projected Performance Metrics</h5>
                          <div className={styles.metricsGrid}>
                            {scenario.metrics ? Object.entries(scenario.metrics).map(([key, value]) => (
                              <div key={key} className={styles.metricDisplay}>
                                <span className={styles.metricName}>
                                  {key.replace(/([A-Z])/g, ' $1').replace(/Score$/, '')}
                                </span>
                                <span className={`${styles.metricScore} ${
                                  value >= 80 ? styles.excellent :
                                  value >= 70 ? styles.good :
                                  value >= 60 ? styles.fair : styles.poor
                                }`}>
                                  {value}/100
                                </span>
                              </div>
                            )) : <div>No metrics data available</div>}
                          </div>
                        </div>
                      </>
                    );
                  })()}
                </div>
              )}
            </div>
          </motion.div>
        )}

        {activeTab === 'impact' && (
          <motion.div
            key="impact"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className={styles.tabContent}
          >
            <div className={styles.mapSection}>
              <h3 className={styles.sectionTitle}>State-by-State Impact Analysis</h3>
              <PolicyScenarioMap 
                scenarioId={primaryScenario}
                onStateSelect={setSelectedState}
                selectedState={selectedState}
              />
            </div>
            
            {selectedState && currentScenario.stateImpacts && currentScenario.stateImpacts[selectedState] && (
              <div className={styles.stateDetails}>
                <h4>{selectedState} Impact Analysis</h4>
                <div className={styles.scenarioComparison}>
                  <span className={styles.scenarioLabel}>
                    Under {currentScenario.shortName} Policy Scenario
                  </span>
                </div>
                <div className={styles.stateMetrics}>
                  <div className={styles.stateMetric}>
                    <strong>Vulnerability Change:</strong>
                    <span className={currentScenario.stateImpacts[selectedState].vulnerabilityChange >= 0 ? styles.negative : styles.positive}>
                      {currentScenario.stateImpacts[selectedState].vulnerabilityChange >= 0 ? '+' : ''}{currentScenario.stateImpacts[selectedState].vulnerabilityChange}
                    </span>
                  </div>
                  <div className={styles.stateMetric}>
                    <strong>Economic Impact:</strong>
                    <span>${currentScenario.stateImpacts[selectedState].economicImpactBillions}B</span>
                  </div>
                  <div className={styles.stateMetric}>
                    <strong>Reasoning:</strong>
                    <span>{currentScenario.stateImpacts[selectedState].reasoning}</span>
                  </div>
                </div>
              </div>
            )}
          </motion.div>
        )}
      </AnimatePresence>

      {/* Citations */}
      <div className={styles.citationsSection}>
        <h3 className={styles.sectionTitle}>Data Sources & Citations</h3>
        <div className={styles.citationsList}>
          {citations.slice(0, 10).map((citation, index) => (
            <div key={index} className={styles.citation}>
              <span className={styles.citationNumber}>[{index + 1}]</span>
              <span className={styles.citationText}>{citation}</span>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

export default PolicyInvestmentDashboard;