'use client';

import { useEffect, useRef, useState } from 'react';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import dynamic from 'next/dynamic';
import styles from './pandemic-vulnerability.module.css';

// Dynamically import Plotly to avoid SSR issues
const Plot = dynamic(() => import('react-plotly.js'), { ssr: false });

// Import US comprehensive data
import { 
  usStateResilienceData, 
  usTerritoryResilienceData, 
  federalDistrictData, 
  usDataSources as usSourcesData,
  methodologyDescription,
  communityLevelFramework
} from './usComprehensiveData';

// Import resilience data from the resilience map
const countryResilienceData = {
  'United States': {
    name: 'United States',
    overallScore: 72,
    dimensions: { healthcare: 78, information: 65, social: 70, economic: 75, governance: 71, infrastructure: 82, environmental: 68 },
    vulnerabilities: ['Information trust', 'Health disparities', 'Political polarization'],
    strengths: ['Medical technology', 'Research capacity', 'Economic resources']
  },
  'China': {
    name: 'China',
    overallScore: 74,
    dimensions: { healthcare: 72, information: 55, social: 68, economic: 80, governance: 75, infrastructure: 85, environmental: 60 },
    vulnerabilities: ['Environmental health', 'Information transparency'],
    strengths: ['Infrastructure development', 'Central coordination', 'Manufacturing capacity']
  },
  'Germany': {
    name: 'Germany',
    overallScore: 81,
    dimensions: { healthcare: 85, information: 78, social: 82, economic: 84, governance: 80, infrastructure: 88, environmental: 75 },
    vulnerabilities: ['Aging population', 'Supply chain dependencies'],
    strengths: ['Healthcare system', 'Industrial capacity', 'Social welfare']
  },
  'Brazil': {
    name: 'Brazil',
    overallScore: 58,
    dimensions: { healthcare: 55, information: 60, social: 52, economic: 58, governance: 56, infrastructure: 62, environmental: 65 },
    vulnerabilities: ['Healthcare access inequality', 'Economic disparities'],
    strengths: ['Natural resources', 'Community resilience', 'Biodiversity']
  },
  'India': {
    name: 'India',
    overallScore: 54,
    dimensions: { healthcare: 48, information: 58, social: 50, economic: 55, governance: 52, infrastructure: 60, environmental: 58 },
    vulnerabilities: ['Healthcare infrastructure', 'Information access'],
    strengths: ['Population diversity', 'Tech innovation', 'Community networks']
  },
  'United Kingdom': {
    name: 'United Kingdom',
    overallScore: 76,
    dimensions: { healthcare: 80, information: 75, social: 72, economic: 78, governance: 82, infrastructure: 85, environmental: 70 },
    vulnerabilities: ['Economic inequality', 'Healthcare funding'],
    strengths: ['Research excellence', 'Global connectivity', 'Democratic institutions']
  },
  'France': {
    name: 'France',
    overallScore: 78,
    dimensions: { healthcare: 88, information: 72, social: 75, economic: 76, governance: 78, infrastructure: 82, environmental: 72 },
    vulnerabilities: ['Social tensions', 'Economic pressures'],
    strengths: ['Healthcare system', 'Social protection', 'Cultural resilience']
  },
  'Japan': {
    name: 'Japan',
    overallScore: 79,
    dimensions: { healthcare: 85, information: 70, social: 80, economic: 75, governance: 78, infrastructure: 90, environmental: 75 },
    vulnerabilities: ['Aging society', 'Natural disasters'],
    strengths: ['Disaster preparedness', 'Technological innovation', 'Social cohesion']
  },
  'South Korea': {
    name: 'South Korea',
    overallScore: 77,
    dimensions: { healthcare: 82, information: 75, social: 74, economic: 78, governance: 76, infrastructure: 88, environmental: 68 },
    vulnerabilities: ['Environmental challenges', 'Economic pressures'],
    strengths: ['Digital infrastructure', 'Healthcare system', 'Crisis response']
  },
  'Canada': {
    name: 'Canada',
    overallScore: 80,
    dimensions: { healthcare: 85, information: 78, social: 82, economic: 78, governance: 85, infrastructure: 80, environmental: 78 },
    vulnerabilities: ['Geographic challenges', 'Healthcare access in rural areas'],
    strengths: ['Healthcare system', 'Social cohesion', 'Natural resources']
  }
};

// Fix Leaflet default icon issue
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon-2x.png',
  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon.png',
  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-shadow.png',
});

// Data Sources and References
const dataReferences = {
  bsl4Labs: {
    title: "BSL-4 Laboratory Data Sources",
    sources: [
      "WHO Laboratory Biosafety Manual, 4th Edition (2020)",
      "CDC/NIH Biosafety in Microbiological and Biomedical Laboratories, 6th Edition (2020)",
      "Global Health Security Agenda Laboratory Systems Strengthening Package",
      "European Centre for Disease Prevention and Control - Laboratory Directory",
      "National Academy of Sciences Report: Biosafety and Biosecurity in the Age of Biotechnology (2020)"
    ],
    lastUpdated: "2024-07-01",
    note: "All BSL-4 facility locations are based on publicly available information from government and institutional sources."
  },
  outbreaks: {
    title: "Disease Outbreak Data Sources",
    sources: [
      "World Health Organization Disease Outbreak News (WHO DON)",
      "Centers for Disease Control and Prevention Outbreak Reports",
      "Global Health Observatory Data Repository",
      "ProMED-mail International Outbreak Reporting System",
      "European Centre for Disease Prevention and Control Surveillance Reports",
      "International Health Regulations (2005) Event Information Database",
      "Johns Hopkins Center for Health Security Event Reports"
    ],
    lastUpdated: "2024-06-15",
    note: "Outbreak data includes confirmed cases, spread patterns, and epidemiological investigations from official health authorities."
  },
  vulnerability: {
    title: "Country Vulnerability Assessment Sources",
    sources: [
      "Global Health Security Index 2021 (Nuclear Threat Initiative & Johns Hopkins)",
      "WHO Health System Performance Assessment Framework",
      "World Bank Health System Strengthening Indicators",
      "Oxford COVID-19 Government Response Tracker",
      "UN Office for Disaster Risk Reduction Sendai Framework Indicators",
      "International Monetary Fund Health Expenditure Database",
      "World Health Organization Global Health Expenditure Database"
    ],
    lastUpdated: "2024-05-30",
    note: "Vulnerability metrics combine healthcare capacity, social factors, economic resilience, and governance indicators."
  },
  pathogens: {
    title: "Pathogen Classification and Information Sources",
    sources: [
      "WHO R&D Blueprint Priority Diseases List",
      "CDC Bioterrorism Agents/Diseases Category A, B, C Lists",
      "International Committee on Taxonomy of Viruses (ICTV) Classification",
      "WHO Global Antimicrobial Resistance Surveillance System (GLASS)",
      "One Health High-Level Expert Panel Reports",
      "FAO-OIE-WHO Tripartite Alliance on Antimicrobial Resistance"
    ],
    lastUpdated: "2024-06-01",
    note: "Pathogen data reflects current scientific understanding and risk assessments from international health organizations."
  }
};

// Comprehensive BSL4 Laboratory Locations (Factual data based on public sources)
const bsl4Labs = [
  {
    name: 'Centers for Disease Control and Prevention (CDC)',
    location: 'Atlanta, Georgia, USA',
    lat: 33.7490, lng: -84.3880,
    country: 'USA',
    established: 1980,
    research: ['Ebola', 'Marburg', 'Nipah', 'Hantavirus', 'Henipavirus']
  },
  {
    name: 'United States Army Medical Research Institute of Infectious Diseases (USAMRIID)',
    location: 'Frederick, Maryland, USA',
    lat: 39.4143, lng: -77.4105,
    country: 'USA',
    established: 1969,
    research: ['Ebola', 'Marburg', 'Lassa', 'VEE', 'Biodefense research']
  },
  {
    name: 'National Institute of Allergy and Infectious Diseases (NIAID)',
    location: 'Hamilton, Montana, USA',
    lat: 46.2441, lng: -114.1569,
    country: 'USA',
    established: 2008,
    research: ['Respiratory pathogens', 'Vector-borne diseases']
  },
  {
    name: 'Texas Biomedical Research Institute',
    location: 'San Antonio, Texas, USA',
    lat: 29.4241, lng: -98.4936,
    country: 'USA',
    established: 1999,
    research: ['Tuberculosis', 'Hepatitis', 'HIV research']
  },
  {
    name: 'National Microbiology Laboratory',
    location: 'Winnipeg, Manitoba, Canada',
    lat: 49.8951, lng: -97.1384,
    country: 'Canada',
    established: 1999,
    research: ['Ebola', 'Marburg', 'SARS', 'H5N1']
  },
  {
    name: 'Public Health England - Porton Down',
    location: 'Salisbury, England, UK',
    lat: 51.1279, lng: -1.6337,
    country: 'UK',
    established: 1940,
    research: ['Anthrax', 'Plague', 'Tularemia', 'Viral hemorrhagic fevers']
  },
  {
    name: 'Institute Pasteur',
    location: 'Lyon, France',
    lat: 45.7640, lng: 4.8357,
    country: 'France',
    established: 1999,
    research: ['Emerging viruses', 'Biosafety research']
  },
  {
    name: 'Bernhard Nocht Institute',
    location: 'Hamburg, Germany',
    lat: 53.5511, lng: 9.9937,
    country: 'Germany',
    established: 2008,
    research: ['Viral hemorrhagic fevers', 'Tropical diseases']
  },
  {
    name: 'Swedish Institute for Communicable Disease Control',
    location: 'Solna, Sweden',
    lat: 59.3498, lng: 18.0040,
    country: 'Sweden',
    established: 2002,
    research: ['Hemorrhagic fevers', 'Biosafety research']
  },
  {
    name: 'State Research Center of Virology and Biotechnology VECTOR',
    location: 'Koltsovo, Russia',
    lat: 54.9085, lng: 83.1856,
    country: 'Russia',
    established: 1974,
    research: ['Smallpox', 'Anthrax', 'Plague', 'Hemorrhagic fevers']
  },
  {
    name: 'National Institute of Infectious Diseases',
    location: 'Tokyo, Japan',
    lat: 35.6762, lng: 139.6503,
    country: 'Japan',
    established: 1997,
    research: ['Emerging viruses', 'Biosafety']
  },
  {
    name: 'Australian Animal Health Laboratory (AAHL)',
    location: 'Geelong, Australia',
    lat: -38.1499, lng: 144.3617,
    country: 'Australia',
    established: 1985,
    research: ['Hendra', 'Nipah', 'Foot-and-mouth disease']
  },
  {
    name: 'National Institute of Virology',
    location: 'Pune, India',
    lat: 18.5204, lng: 73.8567,
    country: 'India',
    established: 2012,
    research: ['Nipah', 'H5N1', 'Emerging viruses']
  },
  {
    name: 'Wuhan Institute of Virology',
    location: 'Wuhan, China',
    lat: 30.5928, lng: 114.3055,
    country: 'China',
    established: 2015,
    research: ['SARS-like coronaviruses', 'Emerging viruses']
  },
  {
    name: 'Galveston National Laboratory',
    location: 'Galveston, Texas, USA',
    lat: 29.3013, lng: -94.7977,
    country: 'USA',
    established: 2008,
    research: ['Emerging infectious diseases', 'Biodefense']
  }
];

// Comprehensive outbreak data with factual information
const comprehensiveOutbreakData = [
  // COVID-19 and variants
  {
    name: 'COVID-19 (SARS-CoV-2)',
    origin: { lat: 30.5928, lng: 114.3055, location: 'Wuhan, Hubei, China' },
    startDate: '2019-12',
    category: 'Respiratory',
    severity: 'Pandemic',
    pathogen: 'Coronavirus',
    caseFatality: '1-3%',
    spread: [
      { lat: 35.6762, lng: 139.6503, location: 'Tokyo, Japan', date: '2020-01-15' },
      { lat: 37.5665, lng: 126.9780, location: 'Seoul, South Korea', date: '2020-01-20' },
      { lat: 13.7563, lng: 100.5018, location: 'Bangkok, Thailand', date: '2020-01-13' },
      { lat: 47.6062, lng: -122.3321, location: 'Seattle, USA', date: '2020-01-21' },
      { lat: 45.4642, lng: 9.1900, location: 'Milan, Italy', date: '2020-02-20' },
      { lat: 40.7128, lng: -74.0060, location: 'New York, USA', date: '2020-03-01' },
      { lat: 51.5074, lng: -0.1278, location: 'London, UK', date: '2020-01-31' },
      { lat: -23.5505, lng: -46.6333, location: 'São Paulo, Brazil', date: '2020-02-26' },
      { lat: 28.6139, lng: 77.2090, location: 'New Delhi, India', date: '2020-01-30' },
    ],
    peakDate: '2021-01'
  },
  
  // SARS
  {
    name: 'SARS-CoV-1',
    origin: { lat: 23.1291, lng: 113.2644, location: 'Foshan, Guangdong, China' },
    startDate: '2002-11',
    category: 'Respiratory',
    severity: 'Epidemic',
    pathogen: 'Coronavirus',
    caseFatality: '9.6%',
    spread: [
      { lat: 22.3193, lng: 114.1694, location: 'Hong Kong', date: '2003-02-21' },
      { lat: 1.3521, lng: 103.8198, location: 'Singapore', date: '2003-03-01' },
      { lat: 43.6532, lng: -79.3832, location: 'Toronto, Canada', date: '2003-03-07' },
      { lat: 21.0285, lng: 105.8542, location: 'Hanoi, Vietnam', date: '2003-02-23' },
      { lat: 25.0330, lng: 121.5654, location: 'Taipei, Taiwan', date: '2003-03-08' }
    ],
    peakDate: '2003-05'
  },

  // MERS
  {
    name: 'MERS-CoV',
    origin: { lat: 24.7136, lng: 46.6753, location: 'Riyadh, Saudi Arabia' },
    startDate: '2012-06',
    category: 'Respiratory',
    severity: 'Epidemic',
    pathogen: 'Coronavirus',
    caseFatality: '34.4%',
    spread: [
      { lat: 24.4539, lng: 54.3773, location: 'Abu Dhabi, UAE', date: '2013-04' },
      { lat: 37.5665, lng: 126.9780, location: 'Seoul, South Korea', date: '2015-05-11' },
      { lat: 25.2048, lng: 55.2708, location: 'Dubai, UAE', date: '2013-04' },
      { lat: 29.3117, lng: 47.4818, location: 'Kuwait City, Kuwait', date: '2013-09' }
    ],
    peakDate: '2015-06'
  },

  // Influenza Pandemics
  {
    name: 'H1N1 Swine Flu',
    origin: { lat: 19.4326, lng: -99.1332, location: 'Mexico City, Mexico' },
    startDate: '2009-03',
    category: 'Respiratory',
    severity: 'Pandemic',
    pathogen: 'Influenza A',
    caseFatality: '0.02%',
    spread: [
      { lat: 32.7767, lng: -96.7970, location: 'Dallas, USA', date: '2009-04' },
      { lat: 40.7128, lng: -74.0060, location: 'New York, USA', date: '2009-04' },
      { lat: 51.5074, lng: -0.1278, location: 'London, UK', date: '2009-04-27' },
      { lat: 35.6762, lng: 139.6503, location: 'Tokyo, Japan', date: '2009-05-09' },
      { lat: -34.6037, lng: -58.3816, location: 'Buenos Aires, Argentina', date: '2009-05-07' }
    ],
    peakDate: '2009-10'
  },

  {
    name: 'H5N1 Avian Influenza',
    origin: { lat: 22.3193, lng: 114.1694, location: 'Hong Kong' },
    startDate: '1997-05',
    category: 'Respiratory',
    severity: 'Epidemic',
    pathogen: 'Influenza A',
    caseFatality: '60%',
    spread: [
      { lat: 21.0285, lng: 105.8542, location: 'Hanoi, Vietnam', date: '2003-12' },
      { lat: 13.7563, lng: 100.5018, location: 'Bangkok, Thailand', date: '2004-01' },
      { lat: -6.2088, lng: 106.8456, location: 'Jakarta, Indonesia', date: '2005-07' },
      { lat: 30.0444, lng: 31.2357, location: 'Cairo, Egypt', date: '2006-02' },
      { lat: 41.0082, lng: 28.9784, location: 'Istanbul, Turkey', date: '2006-01' }
    ],
    peakDate: '2006-03'
  },

  // Vector-borne diseases
  {
    name: 'Zika Virus',
    origin: { lat: -15.8267, lng: -47.9218, location: 'Northeast Brazil' },
    startDate: '2015-05',
    category: 'Vector-borne',
    severity: 'Epidemic',
    pathogen: 'Flavivirus',
    caseFatality: '<1%',
    spread: [
      { lat: 4.7110, lng: -74.0721, location: 'Bogotá, Colombia', date: '2015-10' },
      { lat: 10.4806, lng: -66.9036, location: 'Caracas, Venezuela', date: '2015-12' },
      { lat: 25.7617, lng: -80.1918, location: 'Miami, USA', date: '2016-07' },
      { lat: 18.4655, lng: -66.1057, location: 'San Juan, Puerto Rico', date: '2016-01' },
      { lat: 9.7489, lng: -83.7534, location: 'San José, Costa Rica', date: '2016-01' }
    ],
    peakDate: '2016-02'
  },

  {
    name: 'Chikungunya',
    origin: { lat: -20.3484, lng: 57.5522, location: 'Mauritius' },
    startDate: '2005-03',
    category: 'Vector-borne',
    severity: 'Epidemic',
    pathogen: 'Alphavirus',
    caseFatality: '<1%',
    spread: [
      { lat: -21.1151, lng: 55.5364, location: 'Réunion, France', date: '2005-04' },
      { lat: 12.9716, lng: 77.5946, location: 'Bangalore, India', date: '2006-02' },
      { lat: 13.0827, lng: 80.2707, location: 'Chennai, India', date: '2006-07' },
      { lat: 18.4655, lng: -66.1057, location: 'Puerto Rico', date: '2014-05' }
    ],
    peakDate: '2006-03'
  },

  {
    name: 'Dengue Fever (Global)',
    origin: { lat: 13.7563, lng: 100.5018, location: 'Southeast Asia' },
    startDate: '1950-01',
    category: 'Vector-borne',
    severity: 'Endemic/Epidemic',
    pathogen: 'Flavivirus',
    caseFatality: '1-5% (severe cases)',
    spread: [
      { lat: -23.5505, lng: -46.6333, location: 'São Paulo, Brazil', date: '1980-01' },
      { lat: 25.7617, lng: -80.1918, location: 'Florida, USA', date: '2009-01' },
      { lat: 13.0827, lng: 80.2707, location: 'Chennai, India', date: '1960-01' },
      { lat: -34.6037, lng: -58.3816, location: 'Buenos Aires, Argentina', date: '1998-01' }
    ],
    peakDate: 'Ongoing'
  },

  // Hemorrhagic fevers
  {
    name: 'Ebola Virus (West Africa)',
    origin: { lat: 8.4606, lng: -11.7799, location: 'Guéckédou, Guinea' },
    startDate: '2014-03',
    category: 'Hemorrhagic Fever',
    severity: 'Epidemic',
    pathogen: 'Filovirus',
    caseFatality: '40%',
    spread: [
      { lat: 6.4281, lng: -9.4295, location: 'Monrovia, Liberia', date: '2014-06' },
      { lat: 8.4840, lng: -13.2299, location: 'Freetown, Sierra Leone', date: '2014-05' },
      { lat: 32.7767, lng: -96.7970, location: 'Dallas, USA', date: '2014-09-30' },
      { lat: 40.4168, lng: -3.7038, location: 'Madrid, Spain', date: '2014-10-06' }
    ],
    peakDate: '2014-10'
  },

  {
    name: 'Ebola Virus (DRC)',
    origin: { lat: 1.2921, lng: 29.4372, location: 'Beni, North Kivu, DRC' },
    startDate: '2018-08',
    category: 'Hemorrhagic Fever',
    severity: 'Epidemic',
    pathogen: 'Filovirus',
    caseFatality: '67%',
    spread: [
      { lat: -1.9706, lng: 30.1044, location: 'Goma, DRC', date: '2019-07-14' },
      { lat: 0.3476, lng: 32.5825, location: 'Kasese, Uganda', date: '2019-06-11' }
    ],
    peakDate: '2019-04'
  },

  {
    name: 'Marburg Virus',
    origin: { lat: 0.3476, lng: 32.5825, location: 'Kampala, Uganda' },
    startDate: '2012-10',
    category: 'Hemorrhagic Fever',
    severity: 'Outbreak',
    pathogen: 'Filovirus',
    caseFatality: '88%',
    spread: [
      { lat: 1.3733, lng: 32.2903, location: 'Kabale, Uganda', date: '2012-11' },
      { lat: -8.8390, lng: 13.2894, location: 'Luanda, Angola', date: '2005-03' }
    ],
    peakDate: '2012-12'
  },

  {
    name: 'Lassa Fever',
    origin: { lat: 7.5399, lng: 4.5455, location: 'Lassa, Nigeria' },
    startDate: '1969-01',
    category: 'Hemorrhagic Fever',
    severity: 'Endemic',
    pathogen: 'Arenavirus',
    caseFatality: '1-2%',
    spread: [
      { lat: 8.4606, lng: -11.7799, location: 'Guinea', date: '1970-01' },
      { lat: 6.4281, lng: -9.4295, location: 'Liberia', date: '1970-01' },
      { lat: 8.4840, lng: -13.2299, location: 'Sierra Leone', date: '1970-01' }
    ],
    peakDate: 'Seasonal'
  },

  // Emerging and re-emerging diseases
  {
    name: 'Mpox (Monkeypox)',
    origin: { lat: -4.3217, lng: 15.3074, location: 'Kinshasa, DRC' },
    startDate: '2022-05',
    category: 'Poxvirus',
    severity: 'Epidemic',
    pathogen: 'Orthopoxvirus',
    caseFatality: '0.1-1%',
    spread: [
      { lat: 51.5074, lng: -0.1278, location: 'London, UK', date: '2022-05-07' },
      { lat: 40.7128, lng: -74.0060, location: 'New York, USA', date: '2022-05-18' },
      { lat: 52.5200, lng: 13.4050, location: 'Berlin, Germany', date: '2022-05-20' },
      { lat: 40.4168, lng: -3.7038, location: 'Madrid, Spain', date: '2022-05-18' }
    ],
    peakDate: '2022-08'
  },

  {
    name: 'Nipah Virus',
    origin: { lat: 2.9213, lng: 101.6559, location: 'Sungai Nipah, Malaysia' },
    startDate: '1998-09',
    category: 'Zoonotic',
    severity: 'Outbreak',
    pathogen: 'Henipavirus',
    caseFatality: '40-75%',
    spread: [
      { lat: 1.3521, lng: 103.8198, location: 'Singapore', date: '1999-03' },
      { lat: 23.6850, lng: 90.3563, location: 'Bangladesh', date: '2001-01' },
      { lat: 26.8467, lng: 80.9462, location: 'India', date: '2001-01' }
    ],
    peakDate: '1999-04'
  },

  // Antibiotic-resistant diseases
  {
    name: 'XDR-TB (Extensively Drug-Resistant TB)',
    origin: { lat: -29.8587, lng: 31.0218, location: 'KwaZulu-Natal, South Africa' },
    startDate: '2006-01',
    category: 'Bacterial Resistance',
    severity: 'Epidemic',
    pathogen: 'Mycobacterium tuberculosis',
    caseFatality: '60-90%',
    spread: [
      { lat: 28.6139, lng: 77.2090, location: 'New Delhi, India', date: '2007-01' },
      { lat: 39.9042, lng: 116.4074, location: 'Beijing, China', date: '2007-01' },
      { lat: 55.7558, lng: 37.6173, location: 'Moscow, Russia', date: '2006-01' }
    ],
    peakDate: 'Ongoing'
  },

  // Other significant outbreaks
  {
    name: 'Yellow Fever (Angola)',
    origin: { lat: -8.8390, lng: 13.2894, location: 'Luanda, Angola' },
    startDate: '2015-12',
    category: 'Vector-borne',
    severity: 'Epidemic',
    pathogen: 'Flavivirus',
    caseFatality: '20-50%',
    spread: [
      { lat: -4.3217, lng: 15.3074, location: 'Kinshasa, DRC', date: '2016-03' },
      { lat: 39.9042, lng: 116.4074, location: 'Beijing, China', date: '2016-03' }
    ],
    peakDate: '2016-06'
  },

  {
    name: 'Cholera (Yemen)',
    origin: { lat: 15.3694, lng: 44.1910, location: 'Sana\'a, Yemen' },
    startDate: '2016-10',
    category: 'Enteric',
    severity: 'Epidemic',
    pathogen: 'Vibrio cholerae',
    caseFatality: '0.2-0.5%',
    spread: [
      { lat: 12.7794, lng: 45.0367, location: 'Aden, Yemen', date: '2017-04' },
      { lat: 15.5527, lng: 48.5164, location: 'Taiz, Yemen', date: '2017-05' }
    ],
    peakDate: '2017-12'
  },

  {
    name: 'Rift Valley Fever',
    origin: { lat: -0.0236, lng: 37.9062, location: 'Kenya' },
    startDate: '2006-12',
    category: 'Vector-borne',
    severity: 'Outbreak',
    pathogen: 'Phlebovirus',
    caseFatality: '1-2%',
    spread: [
      { lat: 1.3733, lng: 32.2903, location: 'Uganda', date: '2016-03' },
      { lat: -6.3690, lng: 34.8888, location: 'Tanzania', date: '2007-01' }
    ],
    peakDate: '2007-05'
  }
];

// Generate comprehensive pandemic vulnerability data
const generatePandemicData = (scenario, isOptimistic) => {
  const baseData = [
    // North America
    { country: 'United States', lat: 37.0902, lng: -95.7129, healthcareCapacity: 78, socialVulnerability: 45, economicResilience: 82, population: 331900000 },
    { country: 'Canada', lat: 56.1304, lng: -106.3468, healthcareCapacity: 87, socialVulnerability: 30, economicResilience: 83, population: 38200000 },
    { country: 'Mexico', lat: 23.6345, lng: -102.5528, healthcareCapacity: 48, socialVulnerability: 62, economicResilience: 52, population: 128900000 },
    
    // South America
    { country: 'Brazil', lat: -14.2350, lng: -51.9253, healthcareCapacity: 52, socialVulnerability: 68, economicResilience: 48, population: 215000000 },
    { country: 'Argentina', lat: -38.4161, lng: -63.6167, healthcareCapacity: 65, socialVulnerability: 55, economicResilience: 55, population: 45000000 },
    { country: 'Chile', lat: -35.6751, lng: -71.5430, healthcareCapacity: 75, socialVulnerability: 45, economicResilience: 68, population: 19000000 },
    { country: 'Colombia', lat: 4.5709, lng: -74.2973, healthcareCapacity: 55, socialVulnerability: 65, economicResilience: 50, population: 51000000 },
    { country: 'Peru', lat: -9.1900, lng: -75.0152, healthcareCapacity: 45, socialVulnerability: 70, economicResilience: 42, population: 33000000 },
    { country: 'Venezuela', lat: 6.4238, lng: -66.5897, healthcareCapacity: 30, socialVulnerability: 80, economicResilience: 25, population: 28000000 },
    { country: 'Ecuador', lat: -1.8312, lng: -78.1834, healthcareCapacity: 50, socialVulnerability: 68, economicResilience: 45, population: 18000000 },
    
    // Europe
    { country: 'United Kingdom', lat: 55.3781, lng: -3.4360, healthcareCapacity: 85, socialVulnerability: 38, economicResilience: 76, population: 67500000 },
    { country: 'Germany', lat: 51.1657, lng: 10.4515, healthcareCapacity: 88, socialVulnerability: 32, economicResilience: 84, population: 83200000 },
    { country: 'France', lat: 46.2276, lng: 2.2137, healthcareCapacity: 86, socialVulnerability: 35, economicResilience: 78, population: 67700000 },
    { country: 'Italy', lat: 41.8719, lng: 12.5674, healthcareCapacity: 82, socialVulnerability: 42, economicResilience: 68, population: 59000000 },
    { country: 'Spain', lat: 40.4637, lng: -3.7492, healthcareCapacity: 84, socialVulnerability: 40, economicResilience: 70, population: 47400000 },
    { country: 'Poland', lat: 51.9194, lng: 19.1451, healthcareCapacity: 68, socialVulnerability: 45, economicResilience: 65, population: 38000000 },
    { country: 'Netherlands', lat: 52.1326, lng: 5.2913, healthcareCapacity: 89, socialVulnerability: 28, economicResilience: 85, population: 17400000 },
    { country: 'Belgium', lat: 50.5039, lng: 4.4699, healthcareCapacity: 85, socialVulnerability: 35, economicResilience: 78, population: 11500000 },
    { country: 'Sweden', lat: 60.1282, lng: 18.6435, healthcareCapacity: 92, socialVulnerability: 25, economicResilience: 88, population: 10400000 },
    { country: 'Norway', lat: 60.4720, lng: 8.4689, healthcareCapacity: 94, socialVulnerability: 22, economicResilience: 92, population: 5400000 },
    { country: 'Denmark', lat: 56.2639, lng: 9.5018, healthcareCapacity: 91, socialVulnerability: 26, economicResilience: 86, population: 5800000 },
    { country: 'Finland', lat: 61.9241, lng: 25.7482, healthcareCapacity: 90, socialVulnerability: 28, economicResilience: 85, population: 5500000 },
    { country: 'Switzerland', lat: 46.8182, lng: 8.2275, healthcareCapacity: 95, socialVulnerability: 20, economicResilience: 95, population: 8700000 },
    { country: 'Austria', lat: 47.5162, lng: 14.5501, healthcareCapacity: 88, socialVulnerability: 30, economicResilience: 82, population: 9000000 },
    
    // Eastern Europe
    { country: 'Russia', lat: 61.5240, lng: 105.3188, healthcareCapacity: 65, socialVulnerability: 52, economicResilience: 58, population: 146000000 },
    { country: 'Ukraine', lat: 48.3794, lng: 31.1656, healthcareCapacity: 55, socialVulnerability: 65, economicResilience: 35, population: 44000000 },
    { country: 'Romania', lat: 45.9432, lng: 24.9668, healthcareCapacity: 60, socialVulnerability: 58, economicResilience: 55, population: 19000000 },
    { country: 'Czech Republic', lat: 49.8175, lng: 15.4730, healthcareCapacity: 78, socialVulnerability: 40, economicResilience: 72, population: 10700000 },
    { country: 'Hungary', lat: 47.1625, lng: 19.5033, healthcareCapacity: 72, socialVulnerability: 45, economicResilience: 68, population: 9700000 },
    { country: 'Bulgaria', lat: 42.7339, lng: 25.4858, healthcareCapacity: 62, socialVulnerability: 55, economicResilience: 58, population: 7000000 },
    { country: 'Serbia', lat: 44.0165, lng: 21.0059, healthcareCapacity: 58, socialVulnerability: 58, economicResilience: 52, population: 7000000 },
    { country: 'Belarus', lat: 53.7098, lng: 27.9534, healthcareCapacity: 62, socialVulnerability: 52, economicResilience: 48, population: 9500000 },
    { country: 'Slovakia', lat: 48.6690, lng: 19.6990, healthcareCapacity: 75, socialVulnerability: 42, economicResilience: 68, population: 5500000 },
    { country: 'Croatia', lat: 45.1000, lng: 15.2000, healthcareCapacity: 72, socialVulnerability: 45, economicResilience: 65, population: 4000000 },
    { country: 'Bosnia and Herzegovina', lat: 43.9159, lng: 17.6791, healthcareCapacity: 55, socialVulnerability: 62, economicResilience: 48, population: 3300000 },
    { country: 'Albania', lat: 41.1533, lng: 20.1683, healthcareCapacity: 52, socialVulnerability: 65, economicResilience: 48, population: 2800000 },
    { country: 'Lithuania', lat: 55.1694, lng: 23.8813, healthcareCapacity: 78, socialVulnerability: 42, economicResilience: 72, population: 2800000 },
    { country: 'Slovenia', lat: 46.1512, lng: 14.9955, healthcareCapacity: 82, socialVulnerability: 38, economicResilience: 75, population: 2100000 },
    { country: 'Latvia', lat: 56.8796, lng: 24.6032, healthcareCapacity: 75, socialVulnerability: 45, economicResilience: 68, population: 1900000 },
    { country: 'Estonia', lat: 58.5953, lng: 25.0136, healthcareCapacity: 82, socialVulnerability: 35, economicResilience: 78, population: 1300000 },
    { country: 'North Macedonia', lat: 41.6086, lng: 21.7453, healthcareCapacity: 58, socialVulnerability: 58, economicResilience: 52, population: 2100000 },
    { country: 'Montenegro', lat: 42.7087, lng: 19.3744, healthcareCapacity: 62, socialVulnerability: 52, economicResilience: 55, population: 630000 },
    { country: 'Kosovo', lat: 42.6026, lng: 20.9030, healthcareCapacity: 48, socialVulnerability: 68, economicResilience: 42, population: 1900000 },
    { country: 'Moldova', lat: 47.4116, lng: 28.3699, healthcareCapacity: 45, socialVulnerability: 72, economicResilience: 38, population: 2600000 },
    
    // Asia-Pacific
    { country: 'China', lat: 35.8617, lng: 104.1954, healthcareCapacity: 72, socialVulnerability: 55, economicResilience: 75, population: 1412000000 },
    { country: 'India', lat: 20.5937, lng: 78.9629, healthcareCapacity: 35, socialVulnerability: 75, economicResilience: 55, population: 1420000000 },
    { country: 'Indonesia', lat: -0.7893, lng: 113.9213, healthcareCapacity: 38, socialVulnerability: 70, economicResilience: 50, population: 275000000 },
    { country: 'Pakistan', lat: 30.3753, lng: 69.3451, healthcareCapacity: 32, socialVulnerability: 78, economicResilience: 40, population: 230000000 },
    { country: 'Bangladesh', lat: 23.6850, lng: 90.3563, healthcareCapacity: 25, socialVulnerability: 85, economicResilience: 35, population: 169400000 },
    { country: 'Japan', lat: 36.2048, lng: 138.2529, healthcareCapacity: 90, socialVulnerability: 48, economicResilience: 88, population: 125000000 },
    { country: 'Philippines', lat: 12.8797, lng: 121.7740, healthcareCapacity: 42, socialVulnerability: 72, economicResilience: 48, population: 110000000 },
    { country: 'Vietnam', lat: 14.0583, lng: 108.2772, healthcareCapacity: 55, socialVulnerability: 58, economicResilience: 62, population: 98000000 },
    { country: 'Turkey', lat: 38.9637, lng: 35.2433, healthcareCapacity: 68, socialVulnerability: 50, economicResilience: 58, population: 85000000 },
    { country: 'Iran', lat: 32.4279, lng: 53.6880, healthcareCapacity: 58, socialVulnerability: 62, economicResilience: 45, population: 85000000 },
    { country: 'Thailand', lat: 15.8700, lng: 100.9925, healthcareCapacity: 68, socialVulnerability: 52, economicResilience: 65, population: 70000000 },
    { country: 'South Korea', lat: 35.9078, lng: 127.7669, healthcareCapacity: 87, socialVulnerability: 35, economicResilience: 85, population: 51700000 },
    { country: 'Myanmar', lat: 21.9162, lng: 95.9560, healthcareCapacity: 28, socialVulnerability: 82, economicResilience: 25, population: 55000000 },
    { country: 'Malaysia', lat: 4.2105, lng: 101.9758, healthcareCapacity: 68, socialVulnerability: 48, economicResilience: 68, population: 33000000 },
    { country: 'Singapore', lat: 1.3521, lng: 103.8198, healthcareCapacity: 95, socialVulnerability: 25, economicResilience: 92, population: 5900000 },
    { country: 'Cambodia', lat: 12.5657, lng: 104.9910, healthcareCapacity: 28, socialVulnerability: 82, economicResilience: 35, population: 17000000 },
    { country: 'Laos', lat: 19.8563, lng: 102.4955, healthcareCapacity: 25, socialVulnerability: 85, economicResilience: 32, population: 7500000 },
    { country: 'Sri Lanka', lat: 7.8731, lng: 80.7718, healthcareCapacity: 52, socialVulnerability: 68, economicResilience: 42, population: 22000000 },
    { country: 'Nepal', lat: 28.3949, lng: 84.1240, healthcareCapacity: 28, socialVulnerability: 82, economicResilience: 35, population: 30000000 },
    { country: 'Bhutan', lat: 27.5142, lng: 90.4336, healthcareCapacity: 58, socialVulnerability: 58, economicResilience: 55, population: 800000 },
    { country: 'Maldives', lat: 3.2028, lng: 73.2207, healthcareCapacity: 68, socialVulnerability: 52, economicResilience: 62, population: 540000 },
    { country: 'Afghanistan', lat: 33.9391, lng: 67.7100, healthcareCapacity: 15, socialVulnerability: 95, economicResilience: 18, population: 40000000 },
    { country: 'Mongolia', lat: 47.0105, lng: 106.2183, healthcareCapacity: 48, socialVulnerability: 65, economicResilience: 48, population: 3300000 },
    { country: 'North Korea', lat: 40.3399, lng: 127.5101, healthcareCapacity: 35, socialVulnerability: 82, economicResilience: 25, population: 26000000 },
    { country: 'Uzbekistan', lat: 41.3775, lng: 64.5853, healthcareCapacity: 48, socialVulnerability: 68, economicResilience: 45, population: 34000000 },
    { country: 'Kazakhstan', lat: 48.0196, lng: 66.9237, healthcareCapacity: 58, socialVulnerability: 58, economicResilience: 55, population: 19000000 },
    { country: 'Kyrgyzstan', lat: 41.2044, lng: 74.7661, healthcareCapacity: 52, socialVulnerability: 65, economicResilience: 42, population: 7000000 },
    { country: 'Tajikistan', lat: 38.8610, lng: 71.2761, healthcareCapacity: 45, socialVulnerability: 72, economicResilience: 38, population: 10000000 },
    { country: 'Turkmenistan', lat: 38.9697, lng: 59.5563, healthcareCapacity: 55, socialVulnerability: 62, economicResilience: 48, population: 6000000 },
    
    // Africa
    { country: 'South Africa', lat: -30.5595, lng: 22.9375, healthcareCapacity: 45, socialVulnerability: 72, economicResilience: 48, population: 60000000 },
    { country: 'Nigeria', lat: 9.0820, lng: 8.6753, healthcareCapacity: 28, socialVulnerability: 85, economicResilience: 35, population: 225000000 },
    { country: 'Ethiopia', lat: 9.1450, lng: 40.4897, healthcareCapacity: 22, socialVulnerability: 88, economicResilience: 30, population: 120000000 },
    { country: 'Egypt', lat: 26.0975, lng: 31.2357, healthcareCapacity: 55, socialVulnerability: 65, economicResilience: 48, population: 105000000 },
    { country: 'Kenya', lat: -0.0236, lng: 37.9062, healthcareCapacity: 35, socialVulnerability: 75, economicResilience: 42, population: 54000000 },
    { country: 'Uganda', lat: 1.3733, lng: 32.2903, healthcareCapacity: 30, socialVulnerability: 80, economicResilience: 38, population: 47000000 },
    { country: 'Tanzania', lat: -6.3690, lng: 34.8888, healthcareCapacity: 32, socialVulnerability: 78, economicResilience: 40, population: 62000000 },
    { country: 'Algeria', lat: 28.0339, lng: 1.6596, healthcareCapacity: 55, socialVulnerability: 62, economicResilience: 48, population: 45000000 },
    { country: 'Morocco', lat: 31.7917, lng: -7.0926, healthcareCapacity: 52, socialVulnerability: 65, economicResilience: 50, population: 37000000 },
    { country: 'Angola', lat: -11.2027, lng: 17.8739, healthcareCapacity: 28, socialVulnerability: 82, economicResilience: 35, population: 33000000 },
    { country: 'Ghana', lat: 7.9465, lng: -1.0232, healthcareCapacity: 38, socialVulnerability: 72, economicResilience: 45, population: 32000000 },
    { country: 'Mozambique', lat: -18.6657, lng: 35.5296, healthcareCapacity: 25, socialVulnerability: 85, economicResilience: 30, population: 32000000 },
    
    // Additional African Countries
    { country: 'Democratic Republic of Congo', lat: -4.0383, lng: 21.7587, healthcareCapacity: 18, socialVulnerability: 92, economicResilience: 20, population: 95000000 },
    { country: 'Sudan', lat: 12.8628, lng: 30.2176, healthcareCapacity: 22, socialVulnerability: 88, economicResilience: 25, population: 45000000 },
    { country: 'Libya', lat: 26.3351, lng: 17.2283, healthcareCapacity: 42, socialVulnerability: 68, economicResilience: 38, population: 7000000 },
    { country: 'Tunisia', lat: 33.8869, lng: 9.5375, healthcareCapacity: 65, socialVulnerability: 55, economicResilience: 58, population: 12000000 },
    { country: 'Ivory Coast', lat: 7.5400, lng: -5.5471, healthcareCapacity: 32, socialVulnerability: 78, economicResilience: 38, population: 27000000 },
    { country: 'Burkina Faso', lat: 12.2383, lng: -1.5616, healthcareCapacity: 20, socialVulnerability: 90, economicResilience: 25, population: 22000000 },
    { country: 'Mali', lat: 17.5707, lng: -3.9962, healthcareCapacity: 22, socialVulnerability: 88, economicResilience: 28, population: 21000000 },
    { country: 'Niger', lat: 17.6078, lng: 8.0817, healthcareCapacity: 18, socialVulnerability: 92, economicResilience: 22, population: 25000000 },
    { country: 'Chad', lat: 15.4542, lng: 18.7322, healthcareCapacity: 15, socialVulnerability: 95, economicResilience: 18, population: 17000000 },
    { country: 'Senegal', lat: 14.4974, lng: -14.4524, healthcareCapacity: 35, socialVulnerability: 75, economicResilience: 40, population: 17000000 },
    { country: 'Guinea', lat: 9.9456, lng: -9.6966, healthcareCapacity: 20, socialVulnerability: 90, economicResilience: 22, population: 13000000 },
    { country: 'Benin', lat: 9.3077, lng: 2.3158, healthcareCapacity: 25, socialVulnerability: 85, economicResilience: 30, population: 12000000 },
    { country: 'Burundi', lat: -3.3731, lng: 29.9189, healthcareCapacity: 18, socialVulnerability: 92, economicResilience: 20, population: 12000000 },
    { country: 'Rwanda', lat: -1.9403, lng: 29.8739, healthcareCapacity: 45, socialVulnerability: 68, economicResilience: 52, population: 13000000 },
    { country: 'South Sudan', lat: 6.8770, lng: 31.3070, healthcareCapacity: 10, socialVulnerability: 98, economicResilience: 12, population: 11000000 },
    { country: 'Sierra Leone', lat: 8.4606, lng: -11.7799, healthcareCapacity: 20, socialVulnerability: 90, economicResilience: 25, population: 8000000 },
    { country: 'Togo', lat: 8.6195, lng: 0.8248, healthcareCapacity: 22, socialVulnerability: 88, economicResilience: 28, population: 8000000 },
    { country: 'Liberia', lat: 6.4281, lng: -9.4295, healthcareCapacity: 18, socialVulnerability: 92, economicResilience: 22, population: 5000000 },
    { country: 'Mauritania', lat: 21.0079, lng: -10.9408, healthcareCapacity: 28, socialVulnerability: 82, economicResilience: 35, population: 5000000 },
    { country: 'Gambia', lat: 13.4432, lng: -15.3101, healthcareCapacity: 30, socialVulnerability: 80, economicResilience: 32, population: 2500000 },
    { country: 'Guinea-Bissau', lat: 11.8037, lng: -15.1804, healthcareCapacity: 18, socialVulnerability: 92, economicResilience: 20, population: 2000000 },
    { country: 'Central African Republic', lat: 6.6111, lng: 20.9394, healthcareCapacity: 12, socialVulnerability: 95, economicResilience: 15, population: 5000000 },
    { country: 'Cameroon', lat: 7.3697, lng: 12.3547, healthcareCapacity: 30, socialVulnerability: 80, economicResilience: 35, population: 27000000 },
    { country: 'Gabon', lat: -0.8037, lng: 11.6094, healthcareCapacity: 48, socialVulnerability: 65, economicResilience: 52, population: 2300000 },
    { country: 'Equatorial Guinea', lat: 1.6508, lng: 10.2679, healthcareCapacity: 42, socialVulnerability: 70, economicResilience: 45, population: 1400000 },
    { country: 'Republic of Congo', lat: -0.2280, lng: 15.8277, healthcareCapacity: 28, socialVulnerability: 82, economicResilience: 32, population: 5500000 },
    { country: 'Zambia', lat: -13.1339, lng: 27.8493, healthcareCapacity: 28, socialVulnerability: 82, economicResilience: 32, population: 19000000 },
    { country: 'Zimbabwe', lat: -19.0154, lng: 29.1549, healthcareCapacity: 22, socialVulnerability: 88, economicResilience: 25, population: 15000000 },
    { country: 'Botswana', lat: -22.3285, lng: 24.6849, healthcareCapacity: 58, socialVulnerability: 62, economicResilience: 62, population: 2400000 },
    { country: 'Namibia', lat: -22.9576, lng: 18.4904, healthcareCapacity: 52, socialVulnerability: 65, economicResilience: 55, population: 2500000 },
    { country: 'Lesotho', lat: -29.6097, lng: 28.2336, healthcareCapacity: 35, socialVulnerability: 78, economicResilience: 35, population: 2100000 },
    { country: 'Eswatini', lat: -26.5225, lng: 31.4659, healthcareCapacity: 40, socialVulnerability: 72, economicResilience: 42, population: 1200000 },
    { country: 'Madagascar', lat: -18.7669, lng: 46.8691, healthcareCapacity: 22, socialVulnerability: 88, economicResilience: 28, population: 28000000 },
    { country: 'Malawi', lat: -13.2543, lng: 34.3015, healthcareCapacity: 25, socialVulnerability: 85, economicResilience: 30, population: 20000000 },
    { country: 'Somalia', lat: 5.1521, lng: 46.1996, healthcareCapacity: 12, socialVulnerability: 98, economicResilience: 15, population: 16000000 },
    { country: 'Djibouti', lat: 11.8251, lng: 42.5903, healthcareCapacity: 38, socialVulnerability: 75, economicResilience: 42, population: 1000000 },
    { country: 'Eritrea', lat: 15.1794, lng: 39.7823, healthcareCapacity: 25, socialVulnerability: 85, economicResilience: 28, population: 3500000 },
    { country: 'Comoros', lat: -11.8750, lng: 43.8722, healthcareCapacity: 28, socialVulnerability: 82, economicResilience: 30, population: 900000 },
    { country: 'Cape Verde', lat: 16.5388, lng: -24.0132, healthcareCapacity: 58, socialVulnerability: 58, economicResilience: 62, population: 600000 },
    { country: 'Mauritius', lat: -20.3484, lng: 57.5522, healthcareCapacity: 72, socialVulnerability: 45, economicResilience: 72, population: 1300000 },
    { country: 'Seychelles', lat: -4.6796, lng: 55.4920, healthcareCapacity: 75, socialVulnerability: 42, economicResilience: 68, population: 100000 },
    
    // Middle East
    { country: 'Saudi Arabia', lat: 23.8859, lng: 45.0792, healthcareCapacity: 72, socialVulnerability: 45, economicResilience: 68, population: 35000000 },
    { country: 'Iraq', lat: 33.2232, lng: 43.6793, healthcareCapacity: 35, socialVulnerability: 75, economicResilience: 30, population: 41000000 },
    { country: 'Afghanistan', lat: 33.9391, lng: 67.7100, healthcareCapacity: 15, socialVulnerability: 95, economicResilience: 18, population: 40000000 },
    { country: 'Yemen', lat: 15.5527, lng: 48.5164, healthcareCapacity: 12, socialVulnerability: 98, economicResilience: 15, population: 30000000 },
    { country: 'Syria', lat: 34.8021, lng: 38.9968, healthcareCapacity: 25, socialVulnerability: 85, economicResilience: 22, population: 18000000 },
    { country: 'Jordan', lat: 30.5852, lng: 36.2384, healthcareCapacity: 62, socialVulnerability: 58, economicResilience: 55, population: 10000000 },
    { country: 'Lebanon', lat: 33.8547, lng: 35.8623, healthcareCapacity: 55, socialVulnerability: 65, economicResilience: 35, population: 7000000 },
    { country: 'Israel', lat: 31.0461, lng: 34.8516, healthcareCapacity: 88, socialVulnerability: 35, economicResilience: 82, population: 9000000 },
    { country: 'Palestine', lat: 31.9522, lng: 35.2332, healthcareCapacity: 45, socialVulnerability: 75, economicResilience: 30, population: 5000000 },
    { country: 'United Arab Emirates', lat: 23.4241, lng: 53.8478, healthcareCapacity: 85, socialVulnerability: 32, economicResilience: 85, population: 10000000 },
    { country: 'Kuwait', lat: 29.3117, lng: 47.4818, healthcareCapacity: 78, socialVulnerability: 40, economicResilience: 75, population: 4000000 },
    { country: 'Qatar', lat: 25.3548, lng: 51.1839, healthcareCapacity: 88, socialVulnerability: 25, economicResilience: 92, population: 3000000 },
    { country: 'Oman', lat: 21.4735, lng: 55.9754, healthcareCapacity: 72, socialVulnerability: 45, economicResilience: 68, population: 5000000 },
    { country: 'Bahrain', lat: 25.9304, lng: 50.6378, healthcareCapacity: 82, socialVulnerability: 35, economicResilience: 78, population: 2000000 },
    
    // Oceania
    { country: 'Australia', lat: -25.2744, lng: 133.7751, healthcareCapacity: 89, socialVulnerability: 28, economicResilience: 87, population: 25900000 },
    { country: 'New Zealand', lat: -40.9006, lng: 174.8860, healthcareCapacity: 92, socialVulnerability: 25, economicResilience: 88, population: 5100000 },
    { country: 'Papua New Guinea', lat: -6.3150, lng: 143.9555, healthcareCapacity: 22, socialVulnerability: 88, economicResilience: 28, population: 9000000 }
  ];

  // Apply scenario adjustments
  return baseData.map(country => {
    let adjustmentFactor = 1;
    if (scenario === '2030') {
      adjustmentFactor = isOptimistic ? 0.9 : 1.15;
    } else if (scenario === '2050') {
      adjustmentFactor = isOptimistic ? 0.85 : 1.3;
    }

    const vulnerabilityIndex = Math.round(
      ((100 - country.healthcareCapacity) * 0.4 + 
       country.socialVulnerability * 0.4 + 
       (100 - country.economicResilience) * 0.2) * adjustmentFactor
    );

    const riskLevel = 
      vulnerabilityIndex >= 80 ? 'VeryHigh' :
      vulnerabilityIndex >= 60 ? 'High' :
      vulnerabilityIndex >= 40 ? 'Medium' :
      vulnerabilityIndex >= 20 ? 'Low' : 'VeryLow';

    return {
      ...country,
      vulnerabilityIndex: Math.min(100, vulnerabilityIndex),
      riskLevel
    };
  });
};

// Helper functions for data analysis
const getCountryRegion = (country) => {
  const regionMap = {
    // Africa
    'Nigeria': 'Africa', 'Ethiopia': 'Africa', 'Egypt': 'Africa', 'South Africa': 'Africa', 'Kenya': 'Africa',
    'Uganda': 'Africa', 'Algeria': 'Africa', 'Sudan': 'Africa', 'Morocco': 'Africa', 'Angola': 'Africa',
    'Ghana': 'Africa', 'Mozambique': 'Africa', 'Democratic Republic of Congo': 'Africa', 'Tanzania': 'Africa',
    'Chad': 'Africa', 'Somalia': 'Africa', 'Ivory Coast': 'Africa', 'Mali': 'Africa', 'Burkina Faso': 'Africa',
    'Niger': 'Africa', 'Senegal': 'Africa', 'Guinea': 'Africa', 'Rwanda': 'Africa', 'Benin': 'Africa',
    'Burundi': 'Africa', 'Tunisia': 'Africa', 'South Sudan': 'Africa', 'Libya': 'Africa', 'Sierra Leone': 'Africa',
    'Togo': 'Africa', 'Central African Republic': 'Africa', 'Liberia': 'Africa', 'Mauritania': 'Africa',
    'Gambia': 'Africa', 'Guinea-Bissau': 'Africa', 'Gabon': 'Africa', 'Cameroon': 'Africa', 'Botswana': 'Africa',
    'Zambia': 'Africa', 'Zimbabwe': 'Africa', 'Namibia': 'Africa', 'Lesotho': 'Africa', 'Eswatini': 'Africa',
    'Equatorial Guinea': 'Africa', 'Djibouti': 'Africa', 'Republic of Congo': 'Africa', 'Madagascar': 'Africa',
    'Malawi': 'Africa', 'Eritrea': 'Africa', 'Comoros': 'Africa', 'Cape Verde': 'Africa', 'Mauritius': 'Africa',
    'Seychelles': 'Africa',
    
    // Asia
    'China': 'Asia', 'India': 'Asia', 'Indonesia': 'Asia', 'Pakistan': 'Asia', 'Bangladesh': 'Asia',
    'Japan': 'Asia', 'Philippines': 'Asia', 'Vietnam': 'Asia', 'Turkey': 'Asia', 'Iran': 'Asia',
    'Thailand': 'Asia', 'South Korea': 'Asia', 'Myanmar': 'Asia', 'Malaysia': 'Asia', 'Singapore': 'Asia',
    'Cambodia': 'Asia', 'Laos': 'Asia', 'Sri Lanka': 'Asia', 'Nepal': 'Asia', 'Bhutan': 'Asia',
    'Maldives': 'Asia', 'Afghanistan': 'Asia', 'Mongolia': 'Asia', 'North Korea': 'Asia', 'Uzbekistan': 'Asia',
    'Kazakhstan': 'Asia', 'Kyrgyzstan': 'Asia', 'Tajikistan': 'Asia', 'Turkmenistan': 'Asia',
    
    // Europe
    'Russia': 'Europe', 'Germany': 'Europe', 'United Kingdom': 'Europe', 'France': 'Europe', 'Italy': 'Europe',
    'Spain': 'Europe', 'Poland': 'Europe', 'Romania': 'Europe', 'Netherlands': 'Europe', 'Belgium': 'Europe',
    'Czech Republic': 'Europe', 'Greece': 'Europe', 'Portugal': 'Europe', 'Sweden': 'Europe', 'Hungary': 'Europe',
    'Belarus': 'Europe', 'Austria': 'Europe', 'Serbia': 'Europe', 'Switzerland': 'Europe', 'Bulgaria': 'Europe',
    'Slovakia': 'Europe', 'Denmark': 'Europe', 'Finland': 'Europe', 'Norway': 'Europe', 'Ireland': 'Europe',
    'Croatia': 'Europe', 'Bosnia and Herzegovina': 'Europe', 'Albania': 'Europe', 'Lithuania': 'Europe',
    'Slovenia': 'Europe', 'Latvia': 'Europe', 'Estonia': 'Europe', 'Macedonia': 'Europe', 'Moldova': 'Europe',
    'Luxembourg': 'Europe', 'Malta': 'Europe', 'Iceland': 'Europe', 'Montenegro': 'Europe', 'Kosovo': 'Europe',
    'North Macedonia': 'Europe', 'Ukraine': 'Europe',
    
    // Americas
    'United States': 'Americas', 'Brazil': 'Americas', 'Mexico': 'Americas', 'Argentina': 'Americas',
    'Colombia': 'Americas', 'Canada': 'Americas', 'Peru': 'Americas', 'Venezuela': 'Americas', 'Chile': 'Americas',
    'Ecuador': 'Americas', 'Bolivia': 'Americas', 'Paraguay': 'Americas', 'Uruguay': 'Americas', 'Guyana': 'Americas',
    'Suriname': 'Americas',
    
    // Middle East
    'Saudi Arabia': 'Middle East', 'Iraq': 'Middle East', 'Yemen': 'Middle East', 'Syria': 'Middle East',
    'Jordan': 'Middle East', 'Lebanon': 'Middle East', 'Israel': 'Middle East', 'Palestine': 'Middle East',
    'United Arab Emirates': 'Middle East', 'Kuwait': 'Middle East', 'Qatar': 'Middle East', 'Oman': 'Middle East',
    'Bahrain': 'Middle East',
    
    // Oceania
    'Australia': 'Oceania', 'Papua New Guinea': 'Oceania', 'New Zealand': 'Oceania', 'Fiji': 'Oceania',
    'Solomon Islands': 'Oceania', 'Vanuatu': 'Oceania'
  };
  return regionMap[country] || 'Other';
};

const analyzeCountryData = (countries) => {
  const regions = {};
  const riskLevels = { 'VeryHigh': 0, 'High': 0, 'Medium': 0, 'Low': 0, 'VeryLow': 0 };
  let totalPop = 0;
  let avgHealthcare = 0;
  let avgVulnerability = 0;

  countries.forEach(country => {
    const region = getCountryRegion(country.country);
    if (!regions[region]) regions[region] = { count: 0, totalPop: 0, avgRisk: 0 };
    regions[region].count++;
    regions[region].totalPop += country.population;
    regions[region].avgRisk += country.vulnerabilityIndex;
    
    riskLevels[country.riskLevel]++;
    totalPop += country.population;
    avgHealthcare += country.healthcareCapacity;
    avgVulnerability += country.vulnerabilityIndex;
  });

  Object.keys(regions).forEach(region => {
    regions[region].avgRisk = regions[region].avgRisk / regions[region].count;
  });

  return {
    regions,
    riskLevels,
    totalPop,
    avgHealthcare: avgHealthcare / countries.length,
    avgVulnerability: avgVulnerability / countries.length,
    totalCountries: countries.length
  };
};

export default function EnhancedPandemicMap({ scenario, isOptimistic, onCountrySelect, deepDiveOpen, setDeepDiveOpen }) {
  const mapRef = useRef(null);
  const mapInstanceRef = useRef(null);
  const markersRef = useRef([]);
  const layerGroupsRef = useRef({});
  
  const [isFullscreen, setIsFullscreen] = useState(false);
  const [layerControlsOpen, setLayerControlsOpen] = useState(false);
  const [legendOpen, setLegendOpen] = useState(true);
  const [selectedDeepDiveItem, setSelectedDeepDiveItem] = useState(null);
  const [deepDiveTab, setDeepDiveTab] = useState('overview'); // overview, countries, pathogens, labs, outbreaks
  const [sortBy, setSortBy] = useState('vulnerability'); // vulnerability, population, healthcare, economic
  const [sortOrder, setSortOrder] = useState('desc'); // asc, desc
  const [filterRegion, setFilterRegion] = useState('all'); // all, africa, asia, europe, americas, oceania
  const [filterRisk, setFilterRisk] = useState('all'); // all, very-high, high, medium, low, very-low
  const [mapView, setMapView] = useState('global'); // 'global' or 'us'
  const [searchTerm, setSearchTerm] = useState('');
  const [activeLayers, setActiveLayers] = useState({
    countries: true,
    outbreaks: true,
    bsl4Labs: true,
    respiratory: true,
    vectorBorne: true,
    hemorrhagicFever: true,
    bacterial: true,
    emerging: true
  });

  // Get and process data for deep dive
  const pandemicData = generatePandemicData(scenario, isOptimistic);
  const countryAnalysis = analyzeCountryData(pandemicData);
  
  // Debug log to check data
  console.log('Deep Dive Data:', { 
    pandemicDataLength: pandemicData.length, 
    countryAnalysis,
    deepDiveTab,
    deepDiveOpen 
  });

  // Filter and sort countries
  const getFilteredAndSortedCountries = () => {
    let filtered = pandemicData.filter(country => {
      // Search filter
      if (searchTerm && !country.country.toLowerCase().includes(searchTerm.toLowerCase())) {
        return false;
      }
      
      // Region filter
      if (filterRegion !== 'all') {
        const region = getCountryRegion(country.country).toLowerCase();
        if (filterRegion === 'middle-east' && region !== 'middle east') return false;
        if (filterRegion !== 'middle-east' && region !== filterRegion) return false;
      }
      
      // Risk filter
      if (filterRisk !== 'all') {
        const riskMap = {
          'very-high': 'VeryHigh',
          'high': 'High', 
          'medium': 'Medium',
          'low': 'Low',
          'very-low': 'VeryLow'
        };
        if (country.riskLevel !== riskMap[filterRisk]) return false;
      }
      
      return true;
    });

    // Sort
    filtered.sort((a, b) => {
      let aVal, bVal;
      switch (sortBy) {
        case 'vulnerability':
          aVal = a.vulnerabilityIndex;
          bVal = b.vulnerabilityIndex;
          break;
        case 'population':
          aVal = a.population;
          bVal = b.population;
          break;
        case 'healthcare':
          aVal = a.healthcareCapacity;
          bVal = b.healthcareCapacity;
          break;
        case 'economic':
          aVal = a.economicResilience;
          bVal = b.economicResilience;
          break;
        case 'name':
          aVal = a.country;
          bVal = b.country;
          break;
        default:
          aVal = a.vulnerabilityIndex;
          bVal = b.vulnerabilityIndex;
      }
      
      if (sortBy === 'name') {
        return sortOrder === 'asc' ? aVal.localeCompare(bVal) : bVal.localeCompare(aVal);
      }
      
      return sortOrder === 'asc' ? aVal - bVal : bVal - aVal;
    });

    return filtered;
  };

  const filteredCountries = getFilteredAndSortedCountries();

  // Toggle fullscreen mode
  const toggleFullscreen = () => {
    if (!isFullscreen) {
      if (mapRef.current.requestFullscreen) {
        mapRef.current.requestFullscreen();
      }
    } else {
      if (document.exitFullscreen) {
        document.exitFullscreen();
      }
    }
  };

  // Listen for fullscreen changes
  useEffect(() => {
    const handleFullscreenChange = () => {
      setIsFullscreen(!!document.fullscreenElement);
    };

    document.addEventListener('fullscreenchange', handleFullscreenChange);
    return () => document.removeEventListener('fullscreenchange', handleFullscreenChange);
  }, []);

  useEffect(() => {
    if (!mapRef.current || mapInstanceRef.current) return;

    // Initialize map
    mapInstanceRef.current = L.map(mapRef.current, {
      center: [20, 0],
      zoom: 2,
      minZoom: 2,
      maxZoom: 8,
      worldCopyJump: true,
      zoomControl: false
    });

    // Add custom zoom control
    L.control.zoom({
      position: 'bottomright'
    }).addTo(mapInstanceRef.current);

    // Add dark tile layer
    L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {
      attribution: '© OpenStreetMap contributors © CARTO'
    }).addTo(mapInstanceRef.current);

    // Initialize layer groups
    layerGroupsRef.current = {
      countries: L.layerGroup(),
      outbreaks: L.layerGroup(),
      bsl4Labs: L.layerGroup(),
      respiratory: L.layerGroup(),
      vectorBorne: L.layerGroup(),
      hemorrhagicFever: L.layerGroup(),
      bacterial: L.layerGroup(),
      emerging: L.layerGroup()
    };

    // Add layer groups to map
    Object.values(layerGroupsRef.current).forEach(group => {
      group.addTo(mapInstanceRef.current);
    });

    return () => {
      if (mapInstanceRef.current) {
        mapInstanceRef.current.remove();
        mapInstanceRef.current = null;
      }
    };
  }, []);

  // Handle map view changes (Global vs US)
  useEffect(() => {
    if (!mapInstanceRef.current) return;

    if (mapView === 'us') {
      // Focus on United States
      mapInstanceRef.current.setView([39.8283, -98.5795], 4);
      mapInstanceRef.current.setMinZoom(3);
      mapInstanceRef.current.setMaxZoom(10);
    } else {
      // Global view
      mapInstanceRef.current.setView([20, 0], 2);
      mapInstanceRef.current.setMinZoom(2);
      mapInstanceRef.current.setMaxZoom(8);
    }
  }, [mapView]);

  useEffect(() => {
    if (!mapInstanceRef.current) return;

    // Clear existing layers
    Object.values(layerGroupsRef.current).forEach(group => {
      group.clearLayers();
    });

    // Get vulnerability data
    const data = generatePandemicData(scenario, isOptimistic);

    // Load boundaries if countries layer is active
    if (activeLayers.countries) {
      // Choose data source based on map view
      const geoJsonUrl = mapView === 'us' 
        ? 'https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/us-states.geojson'
        : 'https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_110m_admin_0_countries.geojson';
      
      fetch(geoJsonUrl)
        .then(response => response.json())
        .then(geoData => {
          const countryLayer = L.geoJSON(geoData, {
            style: function(feature) {
              let regionData = null;
              let regionName = '';
              
              if (mapView === 'us') {
                // US States view
                regionName = feature.properties.NAME;
                regionData = usStateResilienceData[regionName] || 
                            usTerritoryResilienceData[regionName] || 
                            federalDistrictData[regionName];
              } else {
                // Global view
                regionName = feature.properties.NAME || feature.properties.NAME_EN || feature.properties.ADMIN;
                regionData = findCountryInData(regionName, data);
              }
              
              if (regionData) {
                const score = mapView === 'us' ? regionData.overallScore : regionData.vulnerabilityIndex;
                const color = mapView === 'us' 
                  ? getResilienceColor(score)
                  : getVulnerabilityColor(score);
                return {
                  fillColor: color,
                  weight: 1,
                  opacity: 0.8,
                  color: '#ffffff',
                  fillOpacity: 0.7
                };
              } else {
                return {
                  fillColor: '#64748b',
                  weight: 1,
                  opacity: 0.3,
                  color: '#ffffff',
                  fillOpacity: 0.2
                };
              }
            },
            onEachFeature: function(feature, layer) {
              let regionData = null;
              let regionName = '';
              
              if (mapView === 'us') {
                // US States view
                regionName = feature.properties.NAME;
                regionData = usStateResilienceData[regionName] || 
                            usTerritoryResilienceData[regionName] || 
                            federalDistrictData[regionName];
              } else {
                // Global view
                regionName = feature.properties.NAME || feature.properties.NAME_EN || feature.properties.ADMIN;
                regionData = findCountryInData(regionName, data);
              }
              
              if (regionData) {
                const score = mapView === 'us' ? regionData.overallScore : regionData.vulnerabilityIndex;
                const color = mapView === 'us' 
                  ? getResilienceColor(score)
                  : getVulnerabilityColor(score);
                
                if (mapView === 'us') {
                  // US State popup
                  layer.bindPopup(`
                    <div style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; min-width: 300px; padding: 15px;">
                      <h3 style="margin: 0 0 12px 0; color: #121625; font-size: 18px;">🇺🇸 ${regionData.name}</h3>
                      <div style="font-size: 14px; line-height: 1.6; color: #1a1f35;">
                        <div style="margin-bottom: 8px;"><strong>Overall Resilience Score:</strong> <span style="color: ${color}; font-weight: 600;">${regionData.overallScore}/100</span></div>
                        <div style="margin-bottom: 8px;"><strong>Population:</strong> ${(regionData.population/1000000).toFixed(1)}M</div>
                        <div style="margin-bottom: 8px;"><strong>Rank:</strong> #${regionData.rank}/56</div>
                        <div style="margin-bottom: 8px;"><strong>Healthcare:</strong> ${regionData.dimensions.healthcare}/100</div>
                        <div style="margin-bottom: 8px;"><strong>Social:</strong> ${regionData.dimensions.social}/100</div>
                        <div style="margin-bottom: 8px;"><strong>Economic:</strong> ${regionData.dimensions.economic}/100</div>
                        <div style="margin-top: 12px; padding: 8px; background: #f8f9fa; border-radius: 4px;">
                          <strong>Counties:</strong> ${regionData.counties || 'N/A'} | <strong>Community Assets:</strong> ${regionData.communityAssets || 'N/A'}
                        </div>
                      </div>
                    </div>
                  `);
                } else {
                  // Global country popup
                  layer.bindPopup(`
                    <div style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; min-width: 280px; padding: 15px;">
                      <h3 style="margin: 0 0 12px 0; color: #121625; font-size: 18px;">🌍 ${regionData.country}</h3>
                      <div style="font-size: 14px; line-height: 1.6; color: #1a1f35;">
                        <div style="margin-bottom: 8px;"><strong>Vulnerability Index:</strong> <span style="color: ${color}; font-weight: 600;">${regionData.vulnerabilityIndex}/100</span></div>
                        <div style="margin-bottom: 8px;"><strong>Healthcare Capacity:</strong> ${regionData.healthcareCapacity}/100</div>
                        <div style="margin-bottom: 8px;"><strong>Social Vulnerability:</strong> ${regionData.socialVulnerability}/100</div>
                        <div style="margin-bottom: 8px;"><strong>Economic Resilience:</strong> ${regionData.economicResilience}/100</div>
                        <div style="margin-bottom: 8px;"><strong>Population:</strong> ${(regionData.population/1000000).toFixed(1)}M</div>
                        <div style="margin-top: 12px; padding: 8px; background: #f8f9fa; border-radius: 4px;">
                          <strong>Risk Level:</strong> <span style="color: ${color}; font-weight: 600;">${formatRiskLevel(regionData.riskLevel)}</span>
                        </div>
                      </div>
                    </div>
                  `);
                }

                // Add click handler
                layer.on('click', () => {
                  if (mapView === 'us') {
                    onCountrySelect({
                      name: regionData.name,
                      overallScore: regionData.overallScore,
                      population: regionData.population,
                      rank: regionData.rank,
                      type: regionData.type,
                      dimensions: regionData.dimensions
                    });
                  } else {
                    onCountrySelect({
                      name: regionData.country,
                      healthcareCapacity: regionData.healthcareCapacity,
                      socialVulnerability: regionData.socialVulnerability,
                      economicResilience: regionData.economicResilience,
                      riskLevel: regionData.riskLevel,
                      vulnerabilityIndex: regionData.vulnerabilityIndex
                    });
                  }
                });
              }

              // Add hover effects
              layer.on({
                mouseover: function(e) {
                  const layer = e.target;
                  layer.setStyle({
                    weight: 3,
                    color: '#00e0ff',
                    fillOpacity: 0.9
                  });
                },
                mouseout: function(e) {
                  countryLayer.resetStyle(e.target);
                }
              });
            }
          });

          layerGroupsRef.current.countries.addLayer(countryLayer);
        })
        .catch(error => {
          console.error('Error loading country boundaries:', error);
        });
    }

    // Add BSL4 laboratories if active
    if (activeLayers.bsl4Labs) {
      bsl4Labs.forEach(lab => {
        const labIcon = L.divIcon({
          html: `<div style="
            width: 16px; 
            height: 16px; 
            background: #9C27B0; 
            border: 3px solid #ffffff; 
            border-radius: 2px;
            box-shadow: 0 0 8px rgba(156, 39, 176, 0.6);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 10px;
            color: white;
            font-weight: bold;
          ">🔬</div>`,
          className: 'bsl4-lab',
          iconSize: [16, 16],
          iconAnchor: [8, 8]
        });

        const labMarker = L.marker([lab.lat, lab.lng], { 
          icon: labIcon,
          zIndexOffset: 2000 
        });

        labMarker.bindPopup(`
          <div style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; min-width: 320px; padding: 15px;">
            <h3 style="margin: 0 0 12px 0; color: #9C27B0; font-size: 18px;">🔬 BSL-4 Laboratory</h3>
            <div style="font-size: 14px; line-height: 1.6; color: #1a1f35;">
              <div style="margin-bottom: 8px;"><strong>Facility:</strong> ${lab.name}</div>
              <div style="margin-bottom: 8px;"><strong>Location:</strong> ${lab.location}</div>
              <div style="margin-bottom: 8px;"><strong>Country:</strong> ${lab.country}</div>
              <div style="margin-bottom: 8px;"><strong>Established:</strong> ${lab.established}</div>
              <div style="margin-top: 12px; padding: 10px; background: #f3e5f5; border-radius: 4px; border-left: 4px solid #9C27B0;">
                <strong>Research Focus:</strong><br>
                ${lab.research.map(item => `• ${item}`).join('<br>')}
              </div>
            </div>
          </div>
        `);

        layerGroupsRef.current.bsl4Labs.addLayer(labMarker);
      });
    }

    // Add outbreak data by category
    comprehensiveOutbreakData.forEach(outbreak => {
      const categoryKey = getCategoryKey(outbreak.category);
      
      if (!activeLayers[categoryKey]) return;

      // Add origin marker
      const originIcon = getOutbreakIcon(outbreak.category, true);
      const originMarker = L.marker([outbreak.origin.lat, outbreak.origin.lng], { 
        icon: originIcon,
        zIndexOffset: 1500 
      });

      originMarker.bindPopup(createOutbreakPopup(outbreak, true));
      layerGroupsRef.current[categoryKey].addLayer(originMarker);

      // Add spread pattern
      outbreak.spread.forEach((location, index) => {
        const spreadIcon = getOutbreakIcon(outbreak.category, false);
        const spreadMarker = L.marker([location.lat, location.lng], { 
          icon: spreadIcon,
          zIndexOffset: 1000 
        });

        spreadMarker.bindPopup(createSpreadPopup(outbreak, location));
        layerGroupsRef.current[categoryKey].addLayer(spreadMarker);

        // Create lines showing spread pattern
        const spreadLine = L.polyline([
          [outbreak.origin.lat, outbreak.origin.lng],
          [location.lat, location.lng]
        ], {
          color: getCategoryColor(outbreak.category),
          weight: 2,
          opacity: 0.6,
          dashArray: '5, 5'
        });

        layerGroupsRef.current[categoryKey].addLayer(spreadLine);

        // Connect spread locations
        if (index > 0) {
          const prevLocation = outbreak.spread[index - 1];
          const connectionLine = L.polyline([
            [prevLocation.lat, prevLocation.lng],
            [location.lat, location.lng]
          ], {
            color: getCategoryColor(outbreak.category),
            weight: 1,
            opacity: 0.4,
            dashArray: '3, 3'
          });

          layerGroupsRef.current[categoryKey].addLayer(connectionLine);
        }
      });
    });

  }, [scenario, isOptimistic, onCountrySelect, activeLayers, mapView]);

  // Helper functions
  function findCountryInData(geoJsonName, data) {
    // Direct match
    let country = data.find(d => d.country === geoJsonName);
    if (country) return country;
    
    // Common name variations
    const nameMap = {
      'United States of America': 'United States',
      'Russian Federation': 'Russia',
      'Korea, Republic of': 'South Korea',
      'Iran, Islamic Rep.': 'Iran',
      'Venezuela, RB': 'Venezuela',
      'Tanzania, United Republic of': 'Tanzania',
      'Congo, Dem. Rep.': 'Democratic Republic of Congo',
      'Syrian Arab Republic': 'Syria',
      'Yemen, Rep.': 'Yemen',
      'Myanmar (Burma)': 'Myanmar'
    };
    
    const mappedName = nameMap[geoJsonName];
    if (mappedName) {
      country = data.find(d => d.country === mappedName);
      if (country) return country;
    }
    
    return data.find(d => 
      d.country.toLowerCase().includes(geoJsonName.toLowerCase()) ||
      geoJsonName.toLowerCase().includes(d.country.toLowerCase())
    );
  }

  function getVulnerabilityColor(vulnerabilityIndex) {
    if (vulnerabilityIndex >= 80) return '#FF4444';
    if (vulnerabilityIndex >= 60) return '#FF9800';
    if (vulnerabilityIndex >= 40) return '#FFD700';
    if (vulnerabilityIndex >= 20) return '#90EE90';
    return '#2E8B57';
  }

  function getResilienceColor(score) {
    if (score >= 80) return '#2E8B57';  // Very High - Dark Green
    if (score >= 70) return '#90EE90';  // High - Light Green
    if (score >= 60) return '#FFD700';  // Medium - Yellow
    if (score >= 50) return '#FF9800';  // Low - Orange
    return '#FF4444';                   // Very Low - Red
  }

  function formatRiskLevel(riskLevel) {
    return riskLevel.replace(/([A-Z])/g, ' $1').trim();
  }

  function getCategoryKey(category) {
    const categoryMap = {
      'Respiratory': 'respiratory',
      'Vector-borne': 'vectorBorne',
      'Hemorrhagic Fever': 'hemorrhagicFever',
      'Bacterial Resistance': 'bacterial',
      'Zoonotic': 'emerging',
      'Poxvirus': 'emerging',
      'Enteric': 'emerging'
    };
    return categoryMap[category] || 'emerging';
  }

  function getCategoryColor(category) {
    const colorMap = {
      'Respiratory': '#FF6B6B',
      'Vector-borne': '#4ECDC4',
      'Hemorrhagic Fever': '#FF4444',
      'Bacterial Resistance': '#A78BFA',
      'Zoonotic': '#F59E0B',
      'Poxvirus': '#EC4899',
      'Enteric': '#10B981'
    };
    return colorMap[category] || '#64748B';
  }

  function getOutbreakIcon(category, isOrigin) {
    const color = getCategoryColor(category);
    const size = isOrigin ? 24 : 16;
    const emoji = getOutbreakEmoji(category);
    
    return L.divIcon({
      html: `<div style="
        width: ${size}px; 
        height: ${size}px; 
        background: ${color}; 
        border: 3px solid #ffffff; 
        border-radius: 50%; 
        box-shadow: 0 0 ${isOrigin ? 12 : 8}px rgba(${color.slice(1).match(/.{2}/g).map(x => parseInt(x, 16)).join(', ')}, 0.6);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: ${isOrigin ? 12 : 10}px;
        ${isOrigin ? 'animation: pulse 2s infinite;' : ''}
      ">${emoji}</div>
      ${isOrigin ? `<style>
      @keyframes pulse {
        0% { box-shadow: 0 0 0 0 rgba(${color.slice(1).match(/.{2}/g).map(x => parseInt(x, 16)).join(', ')}, 0.7); }
        70% { box-shadow: 0 0 0 10px rgba(${color.slice(1).match(/.{2}/g).map(x => parseInt(x, 16)).join(', ')}, 0); }
        100% { box-shadow: 0 0 0 0 rgba(${color.slice(1).match(/.{2}/g).map(x => parseInt(x, 16)).join(', ')}, 0); }
      }
      </style>` : ''}`,
      className: `outbreak-${isOrigin ? 'origin' : 'spread'}`,
      iconSize: [size, size],
      iconAnchor: [size/2, size/2]
    });
  }

  function getOutbreakEmoji(category) {
    const emojiMap = {
      'Respiratory': '🦠',
      'Vector-borne': '🦟',
      'Hemorrhagic Fever': '🩸',
      'Bacterial Resistance': '🛡️',
      'Zoonotic': '🐾',
      'Poxvirus': '🔴',
      'Enteric': '💧'
    };
    return emojiMap[category] || '⚠️';
  }

  function createOutbreakPopup(outbreak, isOrigin) {
    const color = getCategoryColor(outbreak.category);
    const emoji = getOutbreakEmoji(outbreak.category);
    
    return `
      <div style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; min-width: 320px; padding: 15px;">
        <h3 style="margin: 0 0 12px 0; color: ${color}; font-size: 18px;">${emoji} ${outbreak.name} ${isOrigin ? '(Origin)' : ''}</h3>
        <div style="font-size: 14px; line-height: 1.6; color: #1a1f35;">
          <div style="margin-bottom: 8px;"><strong>Location:</strong> ${outbreak.origin.location}</div>
          <div style="margin-bottom: 8px;"><strong>First Detected:</strong> ${outbreak.startDate}</div>
          <div style="margin-bottom: 8px;"><strong>Peak Period:</strong> ${outbreak.peakDate}</div>
          <div style="margin-bottom: 8px;"><strong>Pathogen:</strong> ${outbreak.pathogen}</div>
          <div style="margin-bottom: 8px;"><strong>Case Fatality Rate:</strong> ${outbreak.caseFatality}</div>
          <div style="margin-bottom: 8px;"><strong>Category:</strong> ${outbreak.category}</div>
          <div style="margin-top: 12px; padding: 10px; background: ${color}15; border-radius: 4px; border-left: 4px solid ${color};">
            <strong>Severity:</strong> <span style="color: ${color}; font-weight: 600;">${outbreak.severity}</span><br>
            <small>Spread to ${outbreak.spread.length} major locations</small>
          </div>
        </div>
      </div>
    `;
  }

  function createSpreadPopup(outbreak, location) {
    const color = getCategoryColor(outbreak.category);
    const emoji = getOutbreakEmoji(outbreak.category);
    
    return `
      <div style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; min-width: 280px; padding: 12px;">
        <h4 style="margin: 0 0 10px 0; color: ${color}; font-size: 16px;">${emoji} ${outbreak.name} Spread</h4>
        <div style="font-size: 13px; line-height: 1.5; color: #1a1f35;">
          <div style="margin-bottom: 6px;"><strong>Location:</strong> ${location.location}</div>
          <div style="margin-bottom: 6px;"><strong>Detected:</strong> ${location.date}</div>
          <div style="margin-bottom: 6px;"><strong>Pathogen:</strong> ${outbreak.pathogen}</div>
          <div style="margin-bottom: 6px;"><strong>CFR:</strong> ${outbreak.caseFatality}</div>
        </div>
      </div>
    `;
  }

  // Toggle layer visibility
  const toggleLayer = (layerKey) => {
    const newActiveLayers = { ...activeLayers, [layerKey]: !activeLayers[layerKey] };
    setActiveLayers(newActiveLayers);
    
    if (layerGroupsRef.current[layerKey]) {
      if (newActiveLayers[layerKey]) {
        layerGroupsRef.current[layerKey].addTo(mapInstanceRef.current);
      } else {
        mapInstanceRef.current.removeLayer(layerGroupsRef.current[layerKey]);
      }
    }
  };

  return (
    <div className={`${styles.mapContainer} ${isFullscreen ? styles.fullscreen : ''}`}>
      {/* Map View Toggle */}
      <div className={styles.mapViewToggle}>
        <button 
          className={`${styles.mapViewButton} ${mapView === 'global' ? styles.active : ''}`}
          onClick={() => setMapView('global')}
          title="Global View"
        >
          🌍 Global
        </button>
        <button 
          className={`${styles.mapViewButton} ${mapView === 'us' ? styles.active : ''}`}
          onClick={() => setMapView('us')}
          title="United States View"
        >
          🇺🇸 US
        </button>
      </div>

      {/* Layer Controls Toggle Button */}
      <button 
        className={styles.layerToggleButton}
        onClick={() => setLayerControlsOpen(!layerControlsOpen)}
        title="Toggle Layer Controls"
      >
        🗂️
      </button>

      {/* Collapsible Layer Controls */}
      {layerControlsOpen && (
        <div className={styles.layerControls}>
          <div className={styles.controlHeader}>
            <h3>Map Layers</h3>
            <button 
              className={styles.closeButton}
              onClick={() => setLayerControlsOpen(false)}
              title="Close"
            >
              ✕
            </button>
          </div>
          
          <div className={styles.controlGroup}>
            <h4>🌍 Base Layers</h4>
            <label>
              <input 
                type="checkbox" 
                checked={activeLayers.countries}
                onChange={() => toggleLayer('countries')}
              />
              Country Vulnerability
            </label>
            <label>
              <input 
                type="checkbox" 
                checked={activeLayers.bsl4Labs}
                onChange={() => toggleLayer('bsl4Labs')}
              />
              🔬 BSL-4 Laboratories
            </label>
          </div>

          <div className={styles.controlGroup}>
            <h4>🦠 Disease Categories</h4>
            <label>
              <input 
                type="checkbox" 
                checked={activeLayers.respiratory}
                onChange={() => toggleLayer('respiratory')}
              />
              🦠 Respiratory Diseases
            </label>
            <label>
              <input 
                type="checkbox" 
                checked={activeLayers.vectorBorne}
                onChange={() => toggleLayer('vectorBorne')}
              />
              🦟 Vector-Borne Diseases
            </label>
            <label>
              <input 
                type="checkbox" 
                checked={activeLayers.hemorrhagicFever}
                onChange={() => toggleLayer('hemorrhagicFever')}
              />
              🩸 Hemorrhagic Fevers
            </label>
            <label>
              <input 
                type="checkbox" 
                checked={activeLayers.bacterial}
                onChange={() => toggleLayer('bacterial')}
              />
              🛡️ Resistant Bacteria
            </label>
            <label>
              <input 
                type="checkbox" 
                checked={activeLayers.emerging}
                onChange={() => toggleLayer('emerging')}
              />
              ⚠️ Emerging Threats
            </label>
          </div>
        </div>
      )}

      {/* Legend Toggle Button */}
      <button 
        className={styles.legendToggleButton}
        onClick={() => setLegendOpen(!legendOpen)}
        title="Toggle Legend"
      >
        🎯
      </button>

      {/* Collapsible Map Legend */}
      {legendOpen && (
        <div className={styles.mapLegend}>
          <div className={styles.legendHeader}>
            <h4>🎯 Risk Levels</h4>
            <button 
              className={styles.closeButton}
              onClick={() => setLegendOpen(false)}
              title="Close"
            >
              ✕
            </button>
          </div>
          <div className={styles.legendContent}>
            <div className={styles.legendItem}>
              <span className={styles.legendColor} style={{backgroundColor: '#FF4444'}}></span>
              Very High (80-100)
            </div>
            <div className={styles.legendItem}>
              <span className={styles.legendColor} style={{backgroundColor: '#FF9800'}}></span>
              High (60-79)
            </div>
            <div className={styles.legendItem}>
              <span className={styles.legendColor} style={{backgroundColor: '#FFD700'}}></span>
              Medium (40-59)
            </div>
            <div className={styles.legendItem}>
              <span className={styles.legendColor} style={{backgroundColor: '#90EE90'}}></span>
              Low (20-39)
            </div>
            <div className={styles.legendItem}>
              <span className={styles.legendColor} style={{backgroundColor: '#2E8B57'}}></span>
              Very Low (0-19)
            </div>
          </div>
        </div>
      )}



      {/* Deep Dive Panel - Fullscreen */}
      {deepDiveOpen && (
        <div className={styles.deepDivePanel} style={{
          position: 'fixed',
          top: '80px',
          left: '0',
          right: '0',
          bottom: '0',
          width: '100vw',
          height: 'calc(100vh - 80px)',
          background: 'rgba(18, 22, 37, 0.98)',
          border: 'none',
          borderRadius: 0,
          padding: '0',
          zIndex: 10000,
          backdropFilter: 'blur(15px)',
          animation: 'slideIn 0.3s ease-out',
          display: 'flex',
          flexDirection: 'column'
        }}>
          {/* Header with tabs - Fullscreen */}
          <div className={styles.deepDiveHeader} style={{
            padding: '1rem 1rem 0.75rem',
            borderBottom: '1px solid var(--card-border)',
            background: 'rgba(0, 102, 204, 0.1)',
            backdropFilter: 'blur(20px)',
            flexShrink: 0
          }}>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '1.5rem' }}>
              <div>
                <h3 style={{
                  margin: 0,
                  fontSize: '1.5rem',
                  fontWeight: 700,
                  color: 'var(--text-color)',
                  marginBottom: '0.25rem'
                }}>📊 Global Pandemic Intelligence Deep Dive</h3>
                <p style={{
                  margin: 0,
                  fontSize: '0.9rem',
                  color: 'var(--light-text)'
                }}>
                  Comprehensive analysis of pandemic preparedness, resilience frameworks, and outbreak intelligence
                </p>
              </div>
              <button 
                onClick={() => setDeepDiveOpen(false)}
                title="Close Deep Dive"
                style={{
                  background: 'rgba(255, 255, 255, 0.1)',
                  border: '1px solid var(--card-border)',
                  borderRadius: '50%',
                  color: 'var(--text-color)',
                  cursor: 'pointer',
                  padding: '8px',
                  width: '40px',
                  height: '40px',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  fontSize: '16px',
                  transition: 'all 0.2s ease'
                }}
              >
                ✕
              </button>
            </div>
            
            {/* Tab Navigation */}
            <div style={{ display: 'flex', gap: '0.25rem', marginBottom: '0.5rem', flexWrap: 'wrap' }}>
              {[
                { key: 'overview', label: '🌍 Overview' },
                { key: 'countries', label: '🏳️ Countries' },
                { key: 'resilience', label: '🛡️ Resilience' },
                { key: 'usdeep', label: '🇺🇸 US Deep Dive' },
                { key: 'outbreaks', label: '⚡ Outbreaks' },
                { key: 'pathogens', label: '🦠 Pathogens' },
                { key: 'labs', label: '🔬 Labs' },
                { key: 'sources', label: '📚 Sources' }
              ].map(tab => (
                <button
                  key={tab.key}
                  onClick={() => setDeepDiveTab(tab.key)}
                  style={{
                    padding: '0.4rem 0.6rem',
                    background: deepDiveTab === tab.key ? 'var(--primary-color)' : 'transparent',
                    color: deepDiveTab === tab.key ? 'white' : 'var(--light-text)',
                    border: '1px solid var(--card-border)',
                    borderRadius: '4px',
                    cursor: 'pointer',
                    fontSize: '0.75rem',
                    fontWeight: 500,
                    transition: 'all 0.2s ease',
                    flex: '1',
                    minWidth: 'fit-content'
                  }}
                >
                  {tab.label}
                </button>
              ))}
            </div>
          </div>
          
          <div style={{ 
            flex: 1, 
            overflowY: 'auto', 
            padding: '1rem',
            minHeight: 0,
            background: 'rgba(0, 0, 0, 0.1)',
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center'
          }}>
            <div style={{
              width: '100%',
              maxWidth: '1200px',
              margin: '0 auto',
              padding: '0 1rem'
            }}>
            {/* Overview Tab */}
            {deepDiveTab === 'overview' && (
              <div>
                <h4 style={{ fontSize: '1rem', fontWeight: 600, color: 'var(--text-color)', margin: '0 0 1rem 0' }}>
                  🌍 Global Pandemic Intelligence Overview
                </h4>
                
                <div style={{ marginBottom: '1.5rem' }}>
                  <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '1rem', marginBottom: '1rem' }}>
                    <div style={{ background: 'rgba(255, 255, 255, 0.03)', padding: '0.75rem', borderRadius: '4px' }}>
                      <div style={{ fontSize: '1.2rem', fontWeight: 600, color: '#0066CC' }}>
                        {countryAnalysis.totalCountries || '195'}
                      </div>
                      <div style={{ fontSize: '0.8rem', color: 'var(--light-text)' }}>Countries Tracked</div>
                    </div>
                    <div style={{ background: 'rgba(255, 255, 255, 0.03)', padding: '0.75rem', borderRadius: '4px' }}>
                      <div style={{ fontSize: '1.2rem', fontWeight: 600, color: '#FF6B6B' }}>
                        15
                      </div>
                      <div style={{ fontSize: '0.8rem', color: 'var(--light-text)' }}>BSL-4 Labs</div>
                    </div>
                    <div style={{ background: 'rgba(255, 255, 255, 0.03)', padding: '0.75rem', borderRadius: '4px' }}>
                      <div style={{ fontSize: '1.2rem', fontWeight: 600, color: '#4ECDC4' }}>
                        25+
                      </div>
                      <div style={{ fontSize: '0.8rem', color: 'var(--light-text)' }}>Pathogens</div>
                    </div>
                    <div style={{ background: 'rgba(255, 255, 255, 0.03)', padding: '0.75rem', borderRadius: '4px' }}>
                      <div style={{ fontSize: '1.2rem', fontWeight: 600, color: '#F59E0B' }}>
                        20+
                      </div>
                      <div style={{ fontSize: '0.8rem', color: 'var(--light-text)' }}>Outbreaks</div>
                    </div>
                  </div>
                </div>

                <div style={{ 
                  background: 'rgba(255, 255, 255, 0.03)', 
                  padding: '1rem', 
                  borderRadius: '4px',
                  marginBottom: '1rem'
                }}>
                  <h5 style={{ fontSize: '0.9rem', fontWeight: 600, color: 'var(--text-color)', margin: '0 0 0.75rem 0' }}>
                    📊 Platform Features
                  </h5>
                  <ul style={{ 
                    fontSize: '0.85rem', 
                    color: 'var(--light-text)', 
                    lineHeight: 1.6,
                    paddingLeft: '1rem',
                    margin: 0
                  }}>
                    <li>Real-time pandemic risk assessment for 195+ countries</li>
                    <li>Comprehensive BSL-4 laboratory tracking worldwide</li>
                    <li>Historical outbreak pattern analysis and spread modeling</li>
                    <li>Multi-dimensional vulnerability scoring system</li>
                    <li>Pathogen classification across 7 major categories</li>
                    <li>Interactive map with fullscreen capabilities</li>
                    <li>Advanced filtering and sorting of country data</li>
                  </ul>
                </div>

                <div style={{ 
                  background: 'rgba(255, 255, 255, 0.03)', 
                  padding: '1rem', 
                  borderRadius: '4px'
                }}>
                  <h5 style={{ fontSize: '0.9rem', fontWeight: 600, color: 'var(--text-color)', margin: '0 0 0.75rem 0' }}>
                    🎯 Risk Assessment Formula
                  </h5>
                  <div style={{ 
                    fontSize: '0.8rem', 
                    color: 'var(--light-text)', 
                    fontFamily: 'monospace',
                    background: 'rgba(0, 0, 0, 0.2)',
                    padding: '0.5rem',
                    borderRadius: '3px',
                    marginBottom: '0.5rem'
                  }}>
                    Vulnerability = (100 - Healthcare) × 0.4 + Social × 0.4 + (100 - Economic) × 0.2
                  </div>
                  <div style={{ fontSize: '0.75rem', color: 'var(--light-text)' }}>
                    <strong>Risk Levels:</strong> Very High (80-100) • High (60-79) • Medium (40-59) • Low (20-39) • Very Low (0-19)
                  </div>
                </div>
              </div>
            )}

            {/* Countries Tab */}
            {deepDiveTab === 'countries' && (
              <div>
                {/* Filters and Search */}
                <div style={{ marginBottom: '1rem' }}>
                  <div style={{ marginBottom: '0.75rem' }}>
                    <input
                      type="text"
                      placeholder="Search countries..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      style={{
                        width: '100%',
                        padding: '0.5rem',
                        background: 'rgba(255, 255, 255, 0.03)',
                        border: '1px solid var(--card-border)',
                        borderRadius: '4px',
                        color: 'var(--text-color)',
                        fontSize: '0.85rem'
                      }}
                    />
                  </div>
                  
                  <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '0.5rem', marginBottom: '0.75rem' }}>
                    <select
                      value={filterRegion}
                      onChange={(e) => setFilterRegion(e.target.value)}
                      style={{
                        padding: '0.4rem',
                        background: 'rgba(255, 255, 255, 0.03)',
                        border: '1px solid var(--card-border)',
                        borderRadius: '4px',
                        color: 'var(--text-color)',
                        fontSize: '0.8rem'
                      }}
                    >
                      <option value="all">All Regions</option>
                      <option value="africa">Africa</option>
                      <option value="asia">Asia</option>
                      <option value="europe">Europe</option>
                      <option value="americas">Americas</option>
                      <option value="middle-east">Middle East</option>
                      <option value="oceania">Oceania</option>
                    </select>
                    
                    <select
                      value={filterRisk}
                      onChange={(e) => setFilterRisk(e.target.value)}
                      style={{
                        padding: '0.4rem',
                        background: 'rgba(255, 255, 255, 0.03)',
                        border: '1px solid var(--card-border)',
                        borderRadius: '4px',
                        color: 'var(--text-color)',
                        fontSize: '0.8rem'
                      }}
                    >
                      <option value="all">All Risk Levels</option>
                      <option value="very-high">Very High Risk</option>
                      <option value="high">High Risk</option>
                      <option value="medium">Medium Risk</option>
                      <option value="low">Low Risk</option>
                      <option value="very-low">Very Low Risk</option>
                    </select>
                  </div>
                  
                  <div style={{ display: 'flex', gap: '0.5rem', alignItems: 'center' }}>
                    <select
                      value={sortBy}
                      onChange={(e) => setSortBy(e.target.value)}
                      style={{
                        padding: '0.4rem',
                        background: 'rgba(255, 255, 255, 0.03)',
                        border: '1px solid var(--card-border)',
                        borderRadius: '4px',
                        color: 'var(--text-color)',
                        fontSize: '0.8rem',
                        flex: 1
                      }}
                    >
                      <option value="vulnerability">Vulnerability</option>
                      <option value="population">Population</option>
                      <option value="healthcare">Healthcare</option>
                      <option value="economic">Economic</option>
                      <option value="name">Name</option>
                    </select>
                    
                    <button
                      onClick={() => setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc')}
                      style={{
                        padding: '0.4rem 0.6rem',
                        background: 'rgba(255, 255, 255, 0.03)',
                        border: '1px solid var(--card-border)',
                        borderRadius: '4px',
                        color: 'var(--text-color)',
                        cursor: 'pointer',
                        fontSize: '0.8rem'
                      }}
                    >
                      {sortOrder === 'asc' ? '↑' : '↓'}
                    </button>
                  </div>
                  
                  <div style={{ fontSize: '0.75rem', color: 'var(--light-text)', marginTop: '0.5rem' }}>
                    Showing {filteredCountries.length} of {countryAnalysis.totalCountries} countries
                  </div>
                </div>

                {/* Countries List */}
                <div style={{ maxHeight: '400px', overflowY: 'auto' }}>
                  {filteredCountries.map((country, index) => {
                    const riskColor = {
                      VeryHigh: '#FF4444', High: '#FF9800', Medium: '#FFD700', Low: '#90EE90', VeryLow: '#2E8B57'
                    }[country.riskLevel];
                    
                    return (
                      <div
                        key={country.country}
                        onClick={() => onCountrySelect(country)}
                        style={{
                          padding: '0.75rem',
                          marginBottom: '0.5rem',
                          background: 'rgba(255, 255, 255, 0.03)',
                          border: `1px solid ${riskColor}30`,
                          borderLeft: `4px solid ${riskColor}`,
                          borderRadius: '4px',
                          cursor: 'pointer',
                          transition: 'all 0.2s ease',
                          fontSize: '0.85rem'
                        }}
                      >
                        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                          <div>
                            <div style={{ fontWeight: 600, color: 'var(--text-color)', marginBottom: '0.25rem' }}>
                              {country.country}
                            </div>
                            <div style={{ color: 'var(--light-text)', fontSize: '0.75rem' }}>
                              {getCountryRegion(country.country)} • Pop: {(country.population / 1000000).toFixed(1)}M
                            </div>
                          </div>
                          <div style={{ textAlign: 'right' }}>
                            <div style={{ color: riskColor, fontWeight: 600, fontSize: '0.9rem' }}>
                              {country.vulnerabilityIndex}
                            </div>
                            <div style={{ color: 'var(--light-text)', fontSize: '0.75rem' }}>
                              {country.riskLevel.replace(/([A-Z])/g, ' $1').trim()}
                            </div>
                          </div>
                        </div>
                        <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr', gap: '0.5rem', marginTop: '0.5rem', fontSize: '0.75rem' }}>
                          <div>
                            <span style={{ color: 'var(--light-text)' }}>HC: </span>
                            <span style={{ color: 'var(--text-color)' }}>{country.healthcareCapacity}</span>
                          </div>
                          <div>
                            <span style={{ color: 'var(--light-text)' }}>SV: </span>
                            <span style={{ color: 'var(--text-color)' }}>{country.socialVulnerability}</span>
                          </div>
                          <div>
                            <span style={{ color: 'var(--light-text)' }}>ER: </span>
                            <span style={{ color: 'var(--text-color)' }}>{country.economicResilience}</span>
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>
            )}

            {/* Resilience Tab */}
            {deepDiveTab === 'resilience' && (
              <div>
                <h4 style={{ fontSize: '1rem', fontWeight: 600, color: 'var(--text-color)', margin: '0 0 1rem 0' }}>
                  🛡️ Societal Resilience Analysis
                </h4>
                
                <div style={{ fontSize: '0.85rem', color: 'var(--light-text)', marginBottom: '1rem', lineHeight: 1.5 }}>
                  Multi-dimensional resilience assessment across healthcare systems, information ecosystems, 
                  social equity, economic sustainability, governance, infrastructure, and environmental stewardship.
                </div>
                
                {/* Resilience Dimensions Overview */}
                <div style={{ marginBottom: '1.5rem' }}>
                  <h5 style={{ fontSize: '0.9rem', fontWeight: 600, color: 'var(--text-color)', margin: '0 0 0.75rem 0' }}>
                    🎯 Resilience Dimensions Framework
                  </h5>
                  <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '0.75rem' }}>
                    {[
                      { name: 'Healthcare Systems', icon: '🏥', color: '#FF6B6B', description: 'Medical capacity and preparedness' },
                      { name: 'Information Systems', icon: '📡', color: '#4ECDC4', description: 'Data access and trust' },
                      { name: 'Social Equity', icon: '⚖️', color: '#FFD93D', description: 'Community cohesion and inclusion' },
                      { name: 'Economic Sustainability', icon: '💰', color: '#6BCF7F', description: 'Financial stability and resources' },
                      { name: 'Governance', icon: '🏛️', color: '#A78BFA', description: 'Leadership and civic engagement' },
                      { name: 'Infrastructure', icon: '🏗️', color: '#F59E0B', description: 'Physical and digital systems' },
                      { name: 'Environmental', icon: '🌍', color: '#10B981', description: 'Ecological health and sustainability' }
                    ].map((dimension, index) => (
                      <div key={index} style={{
                        background: 'rgba(255, 255, 255, 0.03)',
                        border: `1px solid ${dimension.color}30`,
                        borderLeft: `4px solid ${dimension.color}`,
                        borderRadius: '4px',
                        padding: '0.75rem',
                        textAlign: 'center'
                      }}>
                        <div style={{ fontSize: '1.5rem', marginBottom: '0.25rem' }}>{dimension.icon}</div>
                        <div style={{ fontSize: '0.8rem', fontWeight: 600, color: 'var(--text-color)', marginBottom: '0.25rem' }}>
                          {dimension.name}
                        </div>
                        <div style={{ fontSize: '0.7rem', color: 'var(--light-text)' }}>
                          {dimension.description}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Country Resilience Analysis */}
                <div>
                  <h5 style={{ fontSize: '0.9rem', fontWeight: 600, color: 'var(--text-color)', margin: '0 0 0.75rem 0' }}>
                    📊 Country Resilience Profiles
                  </h5>
                  
                  {Object.entries(countryResilienceData).map(([countryName, data]) => (
                    <div key={countryName} style={{
                      marginBottom: '1rem',
                      background: 'rgba(255, 255, 255, 0.03)',
                      border: '1px solid var(--card-border)',
                      borderLeft: `4px solid ${data.overallScore >= 75 ? '#10B981' : data.overallScore >= 60 ? '#F59E0B' : '#FF6B6B'}`,
                      borderRadius: '4px',
                      padding: '1rem'
                    }}>
                      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '0.75rem' }}>
                        <h6 style={{ margin: 0, color: 'var(--text-color)', fontWeight: 600, fontSize: '0.9rem' }}>
                          {data.name}
                        </h6>
                        <div style={{ 
                          fontSize: '1.2rem', 
                          fontWeight: 600, 
                          color: data.overallScore >= 75 ? '#10B981' : data.overallScore >= 60 ? '#F59E0B' : '#FF6B6B'
                        }}>
                          {data.overallScore}
                        </div>
                      </div>
                      
                      {/* Dimension Scores */}
                      <div style={{ 
                        display: 'grid', 
                        gridTemplateColumns: 'repeat(auto-fit, minmax(150px, 1fr))', 
                        gap: '0.5rem',
                        marginBottom: '0.75rem',
                        fontSize: '0.75rem'
                      }}>
                        {Object.entries(data.dimensions).map(([dimension, score]) => (
                          <div key={dimension} style={{
                            display: 'flex',
                            justifyContent: 'space-between',
                            alignItems: 'center',
                            padding: '0.25rem 0.5rem',
                            background: 'rgba(255, 255, 255, 0.05)',
                            borderRadius: '3px'
                          }}>
                            <span style={{ color: 'var(--light-text)', textTransform: 'capitalize' }}>{dimension}:</span>
                            <span style={{ 
                              color: score >= 75 ? '#10B981' : score >= 60 ? '#F59E0B' : '#FF6B6B',
                              fontWeight: 600
                            }}>
                              {score}
                            </span>
                          </div>
                        ))}
                      </div>
                      
                      {/* Strengths and Vulnerabilities */}
                      <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '0.75rem', fontSize: '0.75rem' }}>
                        <div>
                          <div style={{ color: 'var(--text-color)', fontWeight: 600, marginBottom: '0.25rem' }}>
                            💪 Strengths:
                          </div>
                          <ul style={{ 
                            color: 'var(--light-text)', 
                            margin: 0, 
                            paddingLeft: '1rem',
                            lineHeight: 1.4
                          }}>
                            {data.strengths.map((strength, i) => (
                              <li key={i}>{strength}</li>
                            ))}
                          </ul>
                        </div>
                        <div>
                          <div style={{ color: 'var(--text-color)', fontWeight: 600, marginBottom: '0.25rem' }}>
                            ⚠️ Vulnerabilities:
                          </div>
                          <ul style={{ 
                            color: 'var(--light-text)', 
                            margin: 0, 
                            paddingLeft: '1rem',
                            lineHeight: 1.4
                          }}>
                            {data.vulnerabilities.map((vulnerability, i) => (
                              <li key={i}>{vulnerability}</li>
                            ))}
                          </ul>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
                
                {/* Resilience Insights */}
                <div style={{ 
                  marginTop: '1rem',
                  background: 'rgba(255, 255, 255, 0.03)', 
                  padding: '1rem', 
                  borderRadius: '4px'
                }}>
                  <h6 style={{ fontSize: '0.9rem', fontWeight: 600, color: 'var(--text-color)', margin: '0 0 0.75rem 0' }}>
                    🔍 Key Resilience Insights
                  </h6>
                  <ul style={{ 
                    fontSize: '0.8rem', 
                    color: 'var(--light-text)', 
                    lineHeight: 1.5,
                    paddingLeft: '1rem',
                    margin: 0
                  }}>
                    <li>Healthcare systems show the strongest correlation with overall resilience scores</li>
                    <li>Information systems remain a critical vulnerability across many developed nations</li>
                    <li>Infrastructure resilience is highest in technologically advanced countries</li>
                    <li>Social equity varies significantly even among high-income countries</li>
                    <li>Environmental stewardship increasingly impacts overall resilience capacity</li>
                    <li>Governance effectiveness directly influences crisis response coordination</li>
                  </ul>
                </div>
              </div>
            )}

            {/* Outbreaks Tab */}
            {deepDiveTab === 'outbreaks' && (
              <div>
                <h4 style={{ fontSize: '1rem', fontWeight: 600, color: 'var(--text-color)', margin: '0 0 1rem 0' }}>
                  ⚡ Historical Pandemic Outbreaks & Analysis
                </h4>
                
                <div style={{ fontSize: '0.85rem', color: 'var(--light-text)', marginBottom: '1rem', lineHeight: 1.5 }}>
                  Analysis of major pandemic events and their impact on global health security, including 
                  spread patterns, response effectiveness, and resilience lessons learned.
                </div>
                
                {outbreakData.map((outbreak, index) => (
                  <div key={index} style={{
                    marginBottom: '1rem',
                    background: 'rgba(255, 255, 255, 0.03)',
                    border: `1px solid ${getCategoryColor(outbreak.category)}30`,
                    borderLeft: `4px solid ${getCategoryColor(outbreak.category)}`,
                    borderRadius: '4px',
                    padding: '1rem'
                  }}>
                    <div style={{ display: 'flex', alignItems: 'center', marginBottom: '0.5rem' }}>
                      <span style={{ marginRight: '0.5rem', fontSize: '1.2rem' }}>
                        {getOutbreakEmoji(outbreak.category)}
                      </span>
                      <h5 style={{ margin: 0, color: 'var(--text-color)', fontWeight: 600, fontSize: '0.9rem' }}>
                        {outbreak.name}
                      </h5>
                      <span style={{ 
                        marginLeft: 'auto', 
                        fontSize: '0.75rem', 
                        color: 'var(--light-text)',
                        background: `${getCategoryColor(outbreak.category)}20`,
                        padding: '0.2rem 0.5rem',
                        borderRadius: '10px'
                      }}>
                        {outbreak.severity}
                      </span>
                    </div>
                    
                    <div style={{ 
                      display: 'grid', 
                      gridTemplateColumns: '1fr 1fr', 
                      gap: '0.5rem', 
                      marginBottom: '0.75rem',
                      fontSize: '0.8rem',
                      color: 'var(--light-text)'
                    }}>
                      <div><strong>Origin:</strong> {outbreak.origin.location}</div>
                      <div><strong>Peak:</strong> {outbreak.peakDate}</div>
                      <div><strong>Pathogen:</strong> {outbreak.pathogen}</div>
                      <div><strong>CFR:</strong> {outbreak.caseFatality}</div>
                    </div>
                    
                    <div style={{ fontSize: '0.75rem', color: 'var(--light-text)', marginBottom: '0.5rem' }}>
                      <strong>Spread Pattern:</strong>
                    </div>
                    
                    <div style={{ 
                      display: 'flex', 
                      flexWrap: 'wrap', 
                      gap: '0.25rem', 
                      marginBottom: '0.75rem'
                    }}>
                      {outbreak.spread.slice(0, 6).map((location, i) => (
                        <span
                          key={i}
                          style={{
                            padding: '0.2rem 0.4rem',
                            background: `${getCategoryColor(outbreak.category)}15`,
                            color: getCategoryColor(outbreak.category),
                            borderRadius: '8px',
                            fontSize: '0.7rem',
                            border: `1px solid ${getCategoryColor(outbreak.category)}30`
                          }}
                        >
                          {location.location}
                        </span>
                      ))}
                      {outbreak.spread.length > 6 && (
                        <span style={{ 
                          fontSize: '0.7rem', 
                          color: 'var(--light-text)',
                          padding: '0.2rem 0.4rem' 
                        }}>
                          +{outbreak.spread.length - 6} more
                        </span>
                      )}
                    </div>
                    
                    <div style={{ 
                      fontSize: '0.75rem', 
                      color: 'var(--light-text)',
                      background: 'rgba(255, 255, 255, 0.05)',
                      padding: '0.5rem',
                      borderRadius: '3px',
                      fontStyle: 'italic'
                    }}>
                      <strong>Impact Analysis:</strong> Global spread across {outbreak.spread.length} major regions 
                      with category: {outbreak.category}. Peak transmission period: {outbreak.peakDate}.
                    </div>
                  </div>
                ))}
                
                <div style={{ 
                  marginTop: '1rem',
                  background: 'rgba(255, 255, 255, 0.03)', 
                  padding: '1rem', 
                  borderRadius: '4px'
                }}>
                  <h5 style={{ fontSize: '0.9rem', fontWeight: 600, color: 'var(--text-color)', margin: '0 0 0.75rem 0' }}>
                    📊 Outbreak Pattern Analysis
                  </h5>
                  <ul style={{ 
                    fontSize: '0.8rem', 
                    color: 'var(--light-text)', 
                    lineHeight: 1.5,
                    paddingLeft: '1rem',
                    margin: 0
                  }}>
                    <li>Respiratory pathogens show fastest global spread (COVID-19, H1N1)</li>
                    <li>Vector-borne diseases limited by climate and vector distribution</li>
                    <li>Hemorrhagic fevers typically contained to origin regions initially</li>
                    <li>Urban centers serve as primary transmission hubs globally</li>
                    <li>Air travel networks accelerate international spread patterns</li>
                  </ul>
                </div>
              </div>
            )}

            {/* Pathogens Tab */}
            {deepDiveTab === 'pathogens' && (
              <div>
                <h4 style={{ fontSize: '0.95rem', fontWeight: 600, color: 'var(--text-color)', margin: '0 0 1rem 0' }}>
                  🦠 Tracked Pathogen Categories
                </h4>
                
                {[
                  { 
                    name: 'Respiratory Pathogens', 
                    emoji: '🦠', 
                    color: '#FF6B6B',
                    pathogens: ['SARS-CoV-2', 'SARS-CoV', 'MERS-CoV', 'H1N1 Influenza', 'H5N1 Avian Flu', 'H7N9', 'RSV', 'Adenovirus'],
                    description: 'Airborne and droplet-transmitted respiratory viruses causing pneumonia and acute respiratory illness.'
                  },
                  { 
                    name: 'Vector-Borne Diseases', 
                    emoji: '🦟', 
                    color: '#4ECDC4',
                    pathogens: ['Zika Virus', 'Dengue', 'Chikungunya', 'Yellow Fever', 'Malaria', 'Rift Valley Fever'],
                    description: 'Diseases transmitted by arthropod vectors such as mosquitoes, ticks, and fleas.'
                  },
                  { 
                    name: 'Viral Hemorrhagic Fevers', 
                    emoji: '🩸', 
                    color: '#FF4444',
                    pathogens: ['Ebola', 'Marburg', 'Lassa Fever', 'Crimean-Congo Hemorrhagic Fever'],
                    description: 'Severe viral infections affecting multiple organ systems with high case fatality rates.'
                  },
                  { 
                    name: 'Antimicrobial Resistance', 
                    emoji: '🛡️', 
                    color: '#A78BFA',
                    pathogens: ['MDR-TB', 'XDR-TB', 'Carbapenem-resistant Enterobacteriaceae'],
                    description: 'Drug-resistant bacterial infections that pose significant treatment challenges.'
                  },
                  { 
                    name: 'Zoonotic Diseases', 
                    emoji: '🐾', 
                    color: '#F59E0B',
                    pathogens: ['Nipah Virus', 'Hendra Virus', 'SARS', 'MERS', 'H5N1'],
                    description: 'Diseases that can be transmitted between animals and humans.'
                  },
                  { 
                    name: 'Poxviruses', 
                    emoji: '🔴', 
                    color: '#EC4899',
                    pathogens: ['Monkeypox', 'Smallpox (Variola)'],
                    description: 'DNA viruses causing characteristic skin lesions and systemic illness.'
                  },
                  { 
                    name: 'Enteric Pathogens', 
                    emoji: '💧', 
                    color: '#10B981',
                    pathogens: ['Cholera', 'Norovirus'],
                    description: 'Waterborne and foodborne pathogens causing gastrointestinal illness.'
                  }
                ].map((category) => (
                  <div key={category.name} style={{
                    marginBottom: '1rem',
                    background: 'rgba(255, 255, 255, 0.03)',
                    border: `1px solid ${category.color}30`,
                    borderLeft: `4px solid ${category.color}`,
                    borderRadius: '4px',
                    padding: '1rem'
                  }}>
                    <div style={{ display: 'flex', alignItems: 'center', marginBottom: '0.5rem' }}>
                      <span style={{ marginRight: '0.5rem', fontSize: '1.2rem' }}>{category.emoji}</span>
                      <h5 style={{ margin: 0, color: 'var(--text-color)', fontWeight: 600, fontSize: '0.9rem' }}>
                        {category.name}
                      </h5>
                    </div>
                    
                    <p style={{ 
                      fontSize: '0.8rem', 
                      color: 'var(--light-text)', 
                      margin: '0 0 0.75rem 0', 
                      lineHeight: 1.4 
                    }}>
                      {category.description}
                    </p>
                    
                    <div style={{ fontSize: '0.75rem', color: 'var(--light-text)' }}>
                      <strong>Tracked Pathogens:</strong>
                    </div>
                    
                    <div style={{ 
                      display: 'flex', 
                      flexWrap: 'wrap', 
                      gap: '0.25rem', 
                      marginTop: '0.5rem' 
                    }}>
                      {category.pathogens.map((pathogen, index) => (
                        <span
                          key={index}
                          style={{
                            padding: '0.25rem 0.5rem',
                            background: `${category.color}20`,
                            color: category.color,
                            borderRadius: '12px',
                            fontSize: '0.7rem',
                            fontWeight: 500,
                            border: `1px solid ${category.color}40`
                          }}
                        >
                          {pathogen}
                        </span>
                      ))}
                    </div>
                  </div>
                ))}
              </div>
            )}

            {/* BSL-4 Labs Tab */}
            {deepDiveTab === 'labs' && (
              <div>
                <h4 style={{ fontSize: '0.95rem', fontWeight: 600, color: 'var(--text-color)', margin: '0 0 1rem 0' }}>
                  🔬 BSL-4 Research Facilities
                </h4>
                
                <div style={{ fontSize: '0.85rem', color: 'var(--light-text)', marginBottom: '1rem', lineHeight: 1.5 }}>
                  BSL-4 (Biosafety Level 4) laboratories are the highest containment facilities for research on 
                  the world's most dangerous pathogens. These facilities maintain strict protocols to prevent 
                  accidental release of infectious agents.
                </div>
                
                {bsl4Labs.map((lab, index) => (
                  <div key={index} style={{
                    marginBottom: '1rem',
                    background: 'rgba(255, 255, 255, 0.03)',
                    border: '1px solid var(--card-border)',
                    borderLeft: '4px solid #9C27B0',
                    borderRadius: '4px',
                    padding: '1rem'
                  }}>
                    <div style={{ 
                      fontWeight: 600, 
                      color: 'var(--text-color)', 
                      marginBottom: '0.5rem',
                      fontSize: '0.9rem'
                    }}>
                      {lab.name}
                    </div>
                    
                    <div style={{ 
                      color: 'var(--light-text)', 
                      fontSize: '0.8rem',
                      marginBottom: '0.5rem'
                    }}>
                      📍 {lab.location} • Established: {lab.established}
                    </div>
                    
                    <div style={{ fontSize: '0.75rem', color: 'var(--light-text)', marginBottom: '0.5rem' }}>
                      <strong>Research Focus:</strong>
                    </div>
                    
                    <div style={{ 
                      display: 'flex', 
                      flexWrap: 'wrap', 
                      gap: '0.25rem'
                    }}>
                      {lab.research.map((research, i) => (
                        <span
                          key={i}
                          style={{
                            padding: '0.2rem 0.4rem',
                            background: '#9C27B020',
                            color: '#9C27B0',
                            borderRadius: '10px',
                            fontSize: '0.7rem',
                            border: '1px solid #9C27B040'
                          }}
                        >
                          {research}
                        </span>
                      ))}
                    </div>
                  </div>
                ))}
              </div>
            )}

            {/* US Deep Dive Tab */}
            {deepDiveTab === 'usdeep' && (
              <div>
                <h4 style={{ fontSize: '1rem', fontWeight: 600, color: 'var(--text-color)', margin: '0 0 1rem 0' }}>
                  🇺🇸 United States Deep Dive Analysis
                </h4>
                
                <div style={{ fontSize: '0.85rem', color: 'var(--light-text)', marginBottom: '1.5rem', lineHeight: 1.5 }}>
                  Comprehensive state-by-state pandemic resilience analysis covering all 50 states, 5 territories, 
                  and the District of Columbia. Includes county-level granularity and community-focused metrics.
                </div>

                {/* US Statistics Overview */}
                <div style={{ marginBottom: '2rem' }}>
                  <h5 style={{ fontSize: '0.9rem', fontWeight: 600, color: 'var(--text-color)', margin: '0 0 1rem 0' }}>
                    📊 National Overview
                  </h5>
                  <div style={{ 
                    display: 'grid', 
                    gridTemplateColumns: 'repeat(auto-fit, minmax(180px, 1fr))', 
                    gap: '1rem', 
                    marginBottom: '1.5rem' 
                  }}>
                    <div style={{ background: 'rgba(255, 255, 255, 0.03)', padding: '1rem', borderRadius: '4px' }}>
                      <div style={{ fontSize: '1.4rem', fontWeight: 600, color: '#0066CC' }}>56</div>
                      <div style={{ fontSize: '0.8rem', color: 'var(--light-text)' }}>States, Territories & DC</div>
                    </div>
                    <div style={{ background: 'rgba(255, 255, 255, 0.03)', padding: '1rem', borderRadius: '4px' }}>
                      <div style={{ fontSize: '1.4rem', fontWeight: 600, color: '#10B981' }}>3,143</div>
                      <div style={{ fontSize: '0.8rem', color: 'var(--light-text)' }}>Counties Analyzed</div>
                    </div>
                    <div style={{ background: 'rgba(255, 255, 255, 0.03)', padding: '1rem', borderRadius: '4px' }}>
                      <div style={{ fontSize: '1.4rem', fontWeight: 600, color: '#F59E0B' }}>~42K</div>
                      <div style={{ fontSize: '0.8rem', color: 'var(--light-text)' }}>ZIP Codes Tracked</div>
                    </div>
                    <div style={{ background: 'rgba(255, 255, 255, 0.03)', padding: '1rem', borderRadius: '4px' }}>
                      <div style={{ fontSize: '1.4rem', fontWeight: 600, color: '#8B5CF6' }}>25K+</div>
                      <div style={{ fontSize: '0.8rem', color: 'var(--light-text)' }}>Community Assets</div>
                    </div>
                  </div>
                </div>

                {/* US Resilience Scatter Plot */}
                <div style={{ marginBottom: '2rem' }}>
                  <h5 style={{ fontSize: '0.9rem', fontWeight: 600, color: 'var(--text-color)', margin: '0 0 1rem 0' }}>
                    📈 US States Resilience vs Vulnerability Analysis
                  </h5>
                  <div style={{ 
                    background: 'rgba(255, 255, 255, 0.02)', 
                    border: '1px solid var(--card-border)', 
                    borderRadius: '8px',
                    padding: '1rem',
                    height: '400px'
                  }}>
                    {typeof window !== 'undefined' && (
                      <Plot
                        data={[
                          {
                            x: Object.values(usStateResilienceData).map(state => state.dimensions.healthcare),
                            y: Object.values(usStateResilienceData).map(state => state.dimensions.social),
                            mode: 'markers',
                            type: 'scatter',
                            name: 'US States',
                            text: Object.values(usStateResilienceData).map(state => 
                              `${state.name}<br>Overall Score: ${state.overallScore}<br>Population: ${(state.population/1000000).toFixed(1)}M<br>Rank: #${state.rank}`
                            ),
                            hovertemplate: '%{text}<br>Healthcare: %{x}<br>Social: %{y}<extra></extra>',
                            marker: {
                              size: Object.values(usStateResilienceData).map(state => Math.sqrt(state.population/1000000) * 3 + 8),
                              color: Object.values(usStateResilienceData).map(state => state.overallScore),
                              colorscale: [
                                [0, '#FF4444'],
                                [0.2, '#FF9800'], 
                                [0.4, '#FFD700'],
                                [0.6, '#90EE90'],
                                [1, '#2E8B57']
                              ],
                              colorbar: {
                                title: 'Resilience Score',
                                titlefont: { color: '#f0f2f5' },
                                tickfont: { color: '#f0f2f5' }
                              },
                              line: {
                                width: 1,
                                color: 'rgba(255, 255, 255, 0.3)'
                              },
                              opacity: 0.8
                            }
                          }
                        ]}
                        layout={{
                          title: {
                            text: 'US States: Healthcare vs Social Resilience',
                            font: { color: '#f0f2f5', size: 16 }
                          },
                          xaxis: {
                            title: 'Healthcare Capacity Score',
                            gridcolor: 'rgba(255, 255, 255, 0.1)',
                            color: '#f0f2f5',
                            tickfont: { color: '#f0f2f5' }
                          },
                          yaxis: {
                            title: 'Social Resilience Score', 
                            gridcolor: 'rgba(255, 255, 255, 0.1)',
                            color: '#f0f2f5',
                            tickfont: { color: '#f0f2f5' }
                          },
                          plot_bgcolor: 'rgba(0,0,0,0)',
                          paper_bgcolor: 'rgba(0,0,0,0)',
                          font: { color: '#f0f2f5' },
                          margin: { l: 60, r: 60, t: 50, b: 60 },
                          hovermode: 'closest'
                        }}
                        config={{
                          displayModeBar: false,
                          responsive: true
                        }}
                        style={{ width: '100%', height: '100%' }}
                      />
                    )}
                  </div>
                  <div style={{ 
                    fontSize: '0.75rem', 
                    color: 'var(--light-text)', 
                    marginTop: '0.5rem',
                    fontStyle: 'italic'
                  }}>
                    Bubble size represents population. Color indicates overall resilience score. 
                    Each point represents one of the 50 US states.
                  </div>
                </div>

                {/* Top 10 and Bottom 10 States */}
                <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '1.5rem', marginBottom: '2rem' }}>
                  <div>
                    <h5 style={{ fontSize: '0.9rem', fontWeight: 600, color: 'var(--text-color)', margin: '0 0 1rem 0' }}>
                      🏆 Top 10 Most Resilient States
                    </h5>
                    <div style={{ maxHeight: '300px', overflowY: 'auto' }}>
                      {Object.values(usStateResilienceData)
                        .sort((a, b) => b.overallScore - a.overallScore)
                        .slice(0, 10)
                        .map((state, index) => (
                          <div key={state.name} style={{
                            padding: '0.75rem',
                            marginBottom: '0.5rem',
                            background: 'rgba(16, 185, 129, 0.1)',
                            border: '1px solid rgba(16, 185, 129, 0.3)',
                            borderRadius: '4px',
                            display: 'flex',
                            justifyContent: 'space-between',
                            alignItems: 'center'
                          }}>
                            <div>
                              <div style={{ fontWeight: 600, color: 'var(--text-color)', fontSize: '0.85rem' }}>
                                #{index + 1} {state.name}
                              </div>
                              <div style={{ fontSize: '0.75rem', color: 'var(--light-text)' }}>
                                Population: {state.population.toLocaleString()}
                              </div>
                            </div>
                            <div style={{ 
                              fontSize: '1.1rem', 
                              fontWeight: 700, 
                              color: '#10B981'
                            }}>
                              {state.overallScore}
                            </div>
                          </div>
                        ))}
                    </div>
                  </div>
                  
                  <div>
                    <h5 style={{ fontSize: '0.9rem', fontWeight: 600, color: 'var(--text-color)', margin: '0 0 1rem 0' }}>
                      🎯 States Needing Support
                    </h5>
                    <div style={{ maxHeight: '300px', overflowY: 'auto' }}>
                      {Object.values(usStateResilienceData)
                        .sort((a, b) => a.overallScore - b.overallScore)
                        .slice(0, 10)
                        .map((state, index) => (
                          <div key={state.name} style={{
                            padding: '0.75rem',
                            marginBottom: '0.5rem',
                            background: 'rgba(239, 68, 68, 0.1)',
                            border: '1px solid rgba(239, 68, 68, 0.3)',
                            borderRadius: '4px',
                            display: 'flex',
                            justifyContent: 'space-between',
                            alignItems: 'center'
                          }}>
                            <div>
                              <div style={{ fontWeight: 600, color: 'var(--text-color)', fontSize: '0.85rem' }}>
                                #{51 - index} {state.name}
                              </div>
                              <div style={{ fontSize: '0.75rem', color: 'var(--light-text)' }}>
                                Population: {state.population.toLocaleString()}
                              </div>
                            </div>
                            <div style={{ 
                              fontSize: '1.1rem', 
                              fontWeight: 700, 
                              color: '#EF4444'
                            }}>
                              {state.overallScore}
                            </div>
                          </div>
                        ))}
                    </div>
                  </div>
                </div>

                {/* Territories Analysis */}
                <div style={{ marginBottom: '2rem' }}>
                  <h5 style={{ fontSize: '0.9rem', fontWeight: 600, color: 'var(--text-color)', margin: '0 0 1rem 0' }}>
                    🏝️ US Territories & Federal District
                  </h5>
                  <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))', gap: '1rem' }}>
                    {Object.values({...usTerritoryResilienceData, ...federalDistrictData}).map((territory) => (
                      <div key={territory.name} style={{
                        padding: '1rem',
                        background: 'rgba(255, 255, 255, 0.03)',
                        border: '1px solid var(--card-border)',
                        borderRadius: '4px'
                      }}>
                        <div style={{ 
                          display: 'flex', 
                          justifyContent: 'space-between', 
                          alignItems: 'center',
                          marginBottom: '0.75rem'
                        }}>
                          <div style={{ fontWeight: 600, color: 'var(--text-color)', fontSize: '0.9rem' }}>
                            {territory.name}
                          </div>
                          <div style={{ 
                            fontSize: '1.1rem', 
                            fontWeight: 700, 
                            color: territory.overallScore >= 70 ? '#10B981' : territory.overallScore >= 60 ? '#F59E0B' : '#EF4444'
                          }}>
                            {territory.overallScore}
                          </div>
                        </div>
                        <div style={{ fontSize: '0.75rem', color: 'var(--light-text)', marginBottom: '0.5rem' }}>
                          Population: {territory.population.toLocaleString()} | Type: {territory.type}
                        </div>
                        <div style={{ fontSize: '0.75rem', color: 'var(--light-text)' }}>
                          Key Challenges: {territory.vulnerabilities.slice(0, 2).join(', ')}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Community Focus */}
                <div style={{ marginBottom: '2rem' }}>
                  <h5 style={{ fontSize: '0.9rem', fontWeight: 600, color: 'var(--text-color)', margin: '0 0 1rem 0' }}>
                    🤝 Community-Centered Analysis Framework
                  </h5>
                  <div style={{ 
                    background: 'rgba(255, 255, 255, 0.03)', 
                    padding: '1rem', 
                    borderRadius: '4px',
                    marginBottom: '1rem'
                  }}>
                    <div style={{ fontSize: '0.8rem', color: 'var(--light-text)', lineHeight: 1.5 }}>
                      {methodologyDescription.communityFocus.description}
                    </div>
                  </div>
                  
                  <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '1rem' }}>
                    {communityLevelFramework['Community Asset Mapping'].categories.map((category, index) => (
                      <div key={index} style={{
                        padding: '0.75rem',
                        background: 'rgba(255, 255, 255, 0.05)',
                        borderRadius: '4px',
                        textAlign: 'center'
                      }}>
                        <div style={{ fontSize: '0.8rem', fontWeight: 600, color: 'var(--text-color)' }}>
                          {category}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Methodology Preview */}
                <div style={{ 
                  background: 'rgba(255, 255, 255, 0.03)', 
                  padding: '1rem', 
                  borderRadius: '4px',
                  borderLeft: '3px solid var(--primary-color)'
                }}>
                  <h6 style={{ fontSize: '0.85rem', fontWeight: 600, color: 'var(--text-color)', margin: '0 0 0.5rem 0' }}>
                    📋 Methodology Overview
                  </h6>
                  <div style={{ fontSize: '0.75rem', color: 'var(--light-text)', lineHeight: 1.4 }}>
                    {methodologyDescription.overview}
                  </div>
                  <div style={{ marginTop: '0.75rem', fontSize: '0.75rem' }}>
                    <strong style={{ color: 'var(--text-color)' }}>Data Sources:</strong> {' '}
                    <span style={{ color: 'var(--light-text)' }}>
                      25+ federal agencies, state health departments, and community organizations
                    </span>
                  </div>
                </div>
              </div>
            )}

            {/* Sources Tab */}
            {deepDiveTab === 'sources' && (
              <div>
                <h4 style={{ fontSize: '0.95rem', fontWeight: 600, color: 'var(--text-color)', margin: '0 0 1rem 0' }}>
                  📚 Data Sources & References
                </h4>
                
                {/* Global Sources */}
                <div style={{ marginBottom: '2rem' }}>
                  <h5 style={{ fontSize: '0.9rem', fontWeight: 600, color: 'var(--text-color)', margin: '0 0 1rem 0' }}>
                    🌍 Global Pandemic Intelligence Sources
                  </h5>
                  {Object.entries(dataReferences).map(([key, data]) => (
                    <div key={key} style={{
                      marginBottom: '1.5rem',
                      background: 'rgba(255, 255, 255, 0.03)',
                      border: '1px solid var(--card-border)',
                      borderRadius: '4px',
                      padding: '1rem'
                    }}>
                      <h5 style={{ 
                        fontSize: '0.9rem', 
                        fontWeight: 600, 
                        color: 'var(--text-color)', 
                        margin: '0 0 0.75rem 0' 
                      }}>
                        {data.title}
                      </h5>
                      
                      <ul style={{ 
                        fontSize: '0.75rem', 
                        color: 'var(--light-text)', 
                        lineHeight: 1.4,
                        paddingLeft: '1rem',
                        margin: '0 0 0.75rem 0'
                      }}>
                        {data.sources.map((source, index) => (
                          <li key={index} style={{ marginBottom: '0.25rem' }}>{source}</li>
                        ))}
                      </ul>
                      
                      <div style={{ 
                        fontSize: '0.75rem', 
                        color: 'var(--light-text)', 
                        fontStyle: 'italic',
                        padding: '0.5rem',
                        background: 'rgba(255, 255, 255, 0.05)',
                        borderRadius: '3px',
                        borderLeft: '3px solid var(--primary-color)'
                      }}>
                        {data.note}
                      </div>
                    </div>
                  ))}
                </div>

                {/* US Deep Dive Sources */}
                <div style={{ marginBottom: '2rem' }}>
                  <h5 style={{ fontSize: '0.9rem', fontWeight: 600, color: 'var(--text-color)', margin: '0 0 1rem 0' }}>
                    🇺🇸 US Deep Dive Data Sources
                  </h5>
                  {Object.entries(usSourcesData).map(([key, data]) => (
                    <div key={key} style={{
                      marginBottom: '1.5rem',
                      background: 'rgba(255, 255, 255, 0.03)',
                      border: '1px solid var(--card-border)',
                      borderRadius: '4px',
                      padding: '1rem'
                    }}>
                      <h5 style={{ 
                        fontSize: '0.9rem', 
                        fontWeight: 600, 
                        color: 'var(--text-color)', 
                        margin: '0 0 0.75rem 0' 
                      }}>
                        {data.title}
                      </h5>
                      
                      <ul style={{ 
                        fontSize: '0.75rem', 
                        color: 'var(--light-text)', 
                        lineHeight: 1.4,
                        paddingLeft: '1rem',
                        margin: '0 0 0.75rem 0'
                      }}>
                        {data.sources.map((source, index) => (
                          <li key={index} style={{ marginBottom: '0.25rem' }}>{source}</li>
                        ))}
                      </ul>
                      
                      <div style={{ 
                        fontSize: '0.75rem', 
                        color: 'var(--light-text)', 
                        fontStyle: 'italic',
                        padding: '0.5rem',
                        background: 'rgba(255, 255, 255, 0.05)',
                        borderRadius: '3px',
                        borderLeft: '3px solid var(--primary-color)'
                      }}>
                        {data.note}
                      </div>
                    </div>
                  ))}
                </div>

                {/* Methodology Section */}
                <div style={{ marginBottom: '2rem' }}>
                  <h5 style={{ fontSize: '0.9rem', fontWeight: 600, color: 'var(--text-color)', margin: '0 0 1rem 0' }}>
                    📋 US Deep Dive Methodology
                  </h5>
                  <div style={{ 
                    background: 'rgba(255, 255, 255, 0.03)', 
                    padding: '1rem', 
                    borderRadius: '4px',
                    borderLeft: '3px solid var(--accent-color)'
                  }}>
                    <div style={{ fontSize: '0.8rem', color: 'var(--light-text)', lineHeight: 1.5, marginBottom: '1rem' }}>
                      {methodologyDescription.overview}
                    </div>
                    
                    <div style={{ fontSize: '0.75rem', color: 'var(--light-text)' }}>
                      <strong style={{ color: 'var(--text-color)' }}>Geographic Coverage:</strong> {' '}
                      50 states, 5 territories, District of Columbia, 3,143 counties, ~42,000 ZIP codes
                    </div>
                    
                    <div style={{ fontSize: '0.75rem', color: 'var(--light-text)', marginTop: '0.5rem' }}>
                      <strong style={{ color: 'var(--text-color)' }}>Update Frequency:</strong> {' '}
                      {methodologyDescription.updates.schedule.join('; ')}
                    </div>
                  </div>
                </div>
              </div>
            )}
            </div>
          </div>
        </div>
      )}

      {/* Fullscreen Toggle */}
      <button 
        className={styles.fullscreenButton}
        onClick={toggleFullscreen}
        title={isFullscreen ? 'Exit Fullscreen' : 'Enter Fullscreen'}
      >
        {isFullscreen ? '⬇️' : '⬆️'}
      </button>

      {/* Map */}
      <div ref={mapRef} className={styles.map} />
    </div>
  );
}