'use client';

import { useEffect, useRef, useState } from 'react';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import styles from './pandemic-vulnerability.module.css';

// Fix Leaflet default icon issue
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon-2x.png',
  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon.png',
  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-shadow.png',
});

// Comprehensive BSL4 Laboratory Locations (Factual data based on public sources)
const bsl4Labs = [
  {
    name: 'Centers for Disease Control and Prevention (CDC)',
    location: 'Atlanta, Georgia, USA',
    lat: 33.7490, lng: -84.3880,
    country: 'USA',
    established: 1980,
    research: ['Ebola', 'Marburg', 'Nipah', 'Hantavirus', 'Henipavirus']
  },
  {
    name: 'United States Army Medical Research Institute of Infectious Diseases (USAMRIID)',
    location: 'Frederick, Maryland, USA',
    lat: 39.4143, lng: -77.4105,
    country: 'USA',
    established: 1969,
    research: ['Ebola', 'Marburg', 'Lassa', 'VEE', 'Biodefense research']
  },
  {
    name: 'National Institute of Allergy and Infectious Diseases (NIAID)',
    location: 'Hamilton, Montana, USA',
    lat: 46.2441, lng: -114.1569,
    country: 'USA',
    established: 2008,
    research: ['Respiratory pathogens', 'Vector-borne diseases']
  },
  {
    name: 'Texas Biomedical Research Institute',
    location: 'San Antonio, Texas, USA',
    lat: 29.4241, lng: -98.4936,
    country: 'USA',
    established: 1999,
    research: ['Tuberculosis', 'Hepatitis', 'HIV research']
  },
  {
    name: 'National Microbiology Laboratory',
    location: 'Winnipeg, Manitoba, Canada',
    lat: 49.8951, lng: -97.1384,
    country: 'Canada',
    established: 1999,
    research: ['Ebola', 'Marburg', 'SARS', 'H5N1']
  },
  {
    name: 'Public Health England - Porton Down',
    location: 'Salisbury, England, UK',
    lat: 51.1279, lng: -1.6337,
    country: 'UK',
    established: 1940,
    research: ['Anthrax', 'Plague', 'Tularemia', 'Viral hemorrhagic fevers']
  },
  {
    name: 'Institute Pasteur',
    location: 'Lyon, France',
    lat: 45.7640, lng: 4.8357,
    country: 'France',
    established: 1999,
    research: ['Emerging viruses', 'Biosafety research']
  },
  {
    name: 'Bernhard Nocht Institute',
    location: 'Hamburg, Germany',
    lat: 53.5511, lng: 9.9937,
    country: 'Germany',
    established: 2008,
    research: ['Viral hemorrhagic fevers', 'Tropical diseases']
  },
  {
    name: 'Swedish Institute for Communicable Disease Control',
    location: 'Solna, Sweden',
    lat: 59.3498, lng: 18.0040,
    country: 'Sweden',
    established: 2002,
    research: ['Hemorrhagic fevers', 'Biosafety research']
  },
  {
    name: 'State Research Center of Virology and Biotechnology VECTOR',
    location: 'Koltsovo, Russia',
    lat: 54.9085, lng: 83.1856,
    country: 'Russia',
    established: 1974,
    research: ['Smallpox', 'Anthrax', 'Plague', 'Hemorrhagic fevers']
  },
  {
    name: 'National Institute of Infectious Diseases',
    location: 'Tokyo, Japan',
    lat: 35.6762, lng: 139.6503,
    country: 'Japan',
    established: 1997,
    research: ['Emerging viruses', 'Biosafety']
  },
  {
    name: 'Australian Animal Health Laboratory (AAHL)',
    location: 'Geelong, Australia',
    lat: -38.1499, lng: 144.3617,
    country: 'Australia',
    established: 1985,
    research: ['Hendra', 'Nipah', 'Foot-and-mouth disease']
  },
  {
    name: 'National Institute of Virology',
    location: 'Pune, India',
    lat: 18.5204, lng: 73.8567,
    country: 'India',
    established: 2012,
    research: ['Nipah', 'H5N1', 'Emerging viruses']
  },
  {
    name: 'Wuhan Institute of Virology',
    location: 'Wuhan, China',
    lat: 30.5928, lng: 114.3055,
    country: 'China',
    established: 2015,
    research: ['SARS-like coronaviruses', 'Emerging viruses']
  },
  {
    name: 'Galveston National Laboratory',
    location: 'Galveston, Texas, USA',
    lat: 29.3013, lng: -94.7977,
    country: 'USA',
    established: 2008,
    research: ['Emerging infectious diseases', 'Biodefense']
  }
];

// Comprehensive outbreak data with factual information
const comprehensiveOutbreakData = [
  // COVID-19 and variants
  {
    name: 'COVID-19 (SARS-CoV-2)',
    origin: { lat: 30.5928, lng: 114.3055, location: 'Wuhan, Hubei, China' },
    startDate: '2019-12',
    category: 'Respiratory',
    severity: 'Pandemic',
    pathogen: 'Coronavirus',
    caseFatality: '1-3%',
    spread: [
      { lat: 35.6762, lng: 139.6503, location: 'Tokyo, Japan', date: '2020-01-15' },
      { lat: 37.5665, lng: 126.9780, location: 'Seoul, South Korea', date: '2020-01-20' },
      { lat: 13.7563, lng: 100.5018, location: 'Bangkok, Thailand', date: '2020-01-13' },
      { lat: 47.6062, lng: -122.3321, location: 'Seattle, USA', date: '2020-01-21' },
      { lat: 45.4642, lng: 9.1900, location: 'Milan, Italy', date: '2020-02-20' },
      { lat: 40.7128, lng: -74.0060, location: 'New York, USA', date: '2020-03-01' },
      { lat: 51.5074, lng: -0.1278, location: 'London, UK', date: '2020-01-31' },
      { lat: -23.5505, lng: -46.6333, location: 'São Paulo, Brazil', date: '2020-02-26' },
      { lat: 28.6139, lng: 77.2090, location: 'New Delhi, India', date: '2020-01-30' },
    ],
    peakDate: '2021-01'
  },
  
  // SARS
  {
    name: 'SARS-CoV-1',
    origin: { lat: 23.1291, lng: 113.2644, location: 'Foshan, Guangdong, China' },
    startDate: '2002-11',
    category: 'Respiratory',
    severity: 'Epidemic',
    pathogen: 'Coronavirus',
    caseFatality: '9.6%',
    spread: [
      { lat: 22.3193, lng: 114.1694, location: 'Hong Kong', date: '2003-02-21' },
      { lat: 1.3521, lng: 103.8198, location: 'Singapore', date: '2003-03-01' },
      { lat: 43.6532, lng: -79.3832, location: 'Toronto, Canada', date: '2003-03-07' },
      { lat: 21.0285, lng: 105.8542, location: 'Hanoi, Vietnam', date: '2003-02-23' },
      { lat: 25.0330, lng: 121.5654, location: 'Taipei, Taiwan', date: '2003-03-08' }
    ],
    peakDate: '2003-05'
  },

  // MERS
  {
    name: 'MERS-CoV',
    origin: { lat: 24.7136, lng: 46.6753, location: 'Riyadh, Saudi Arabia' },
    startDate: '2012-06',
    category: 'Respiratory',
    severity: 'Epidemic',
    pathogen: 'Coronavirus',
    caseFatality: '34.4%',
    spread: [
      { lat: 24.4539, lng: 54.3773, location: 'Abu Dhabi, UAE', date: '2013-04' },
      { lat: 37.5665, lng: 126.9780, location: 'Seoul, South Korea', date: '2015-05-11' },
      { lat: 25.2048, lng: 55.2708, location: 'Dubai, UAE', date: '2013-04' },
      { lat: 29.3117, lng: 47.4818, location: 'Kuwait City, Kuwait', date: '2013-09' }
    ],
    peakDate: '2015-06'
  },

  // Influenza Pandemics
  {
    name: 'H1N1 Swine Flu',
    origin: { lat: 19.4326, lng: -99.1332, location: 'Mexico City, Mexico' },
    startDate: '2009-03',
    category: 'Respiratory',
    severity: 'Pandemic',
    pathogen: 'Influenza A',
    caseFatality: '0.02%',
    spread: [
      { lat: 32.7767, lng: -96.7970, location: 'Dallas, USA', date: '2009-04' },
      { lat: 40.7128, lng: -74.0060, location: 'New York, USA', date: '2009-04' },
      { lat: 51.5074, lng: -0.1278, location: 'London, UK', date: '2009-04-27' },
      { lat: 35.6762, lng: 139.6503, location: 'Tokyo, Japan', date: '2009-05-09' },
      { lat: -34.6037, lng: -58.3816, location: 'Buenos Aires, Argentina', date: '2009-05-07' }
    ],
    peakDate: '2009-10'
  },

  {
    name: 'H5N1 Avian Influenza',
    origin: { lat: 22.3193, lng: 114.1694, location: 'Hong Kong' },
    startDate: '1997-05',
    category: 'Respiratory',
    severity: 'Epidemic',
    pathogen: 'Influenza A',
    caseFatality: '60%',
    spread: [
      { lat: 21.0285, lng: 105.8542, location: 'Hanoi, Vietnam', date: '2003-12' },
      { lat: 13.7563, lng: 100.5018, location: 'Bangkok, Thailand', date: '2004-01' },
      { lat: -6.2088, lng: 106.8456, location: 'Jakarta, Indonesia', date: '2005-07' },
      { lat: 30.0444, lng: 31.2357, location: 'Cairo, Egypt', date: '2006-02' },
      { lat: 41.0082, lng: 28.9784, location: 'Istanbul, Turkey', date: '2006-01' }
    ],
    peakDate: '2006-03'
  },

  // Vector-borne diseases
  {
    name: 'Zika Virus',
    origin: { lat: -15.8267, lng: -47.9218, location: 'Northeast Brazil' },
    startDate: '2015-05',
    category: 'Vector-borne',
    severity: 'Epidemic',
    pathogen: 'Flavivirus',
    caseFatality: '<1%',
    spread: [
      { lat: 4.7110, lng: -74.0721, location: 'Bogotá, Colombia', date: '2015-10' },
      { lat: 10.4806, lng: -66.9036, location: 'Caracas, Venezuela', date: '2015-12' },
      { lat: 25.7617, lng: -80.1918, location: 'Miami, USA', date: '2016-07' },
      { lat: 18.4655, lng: -66.1057, location: 'San Juan, Puerto Rico', date: '2016-01' },
      { lat: 9.7489, lng: -83.7534, location: 'San José, Costa Rica', date: '2016-01' }
    ],
    peakDate: '2016-02'
  },

  {
    name: 'Chikungunya',
    origin: { lat: -20.3484, lng: 57.5522, location: 'Mauritius' },
    startDate: '2005-03',
    category: 'Vector-borne',
    severity: 'Epidemic',
    pathogen: 'Alphavirus',
    caseFatality: '<1%',
    spread: [
      { lat: -21.1151, lng: 55.5364, location: 'Réunion, France', date: '2005-04' },
      { lat: 12.9716, lng: 77.5946, location: 'Bangalore, India', date: '2006-02' },
      { lat: 13.0827, lng: 80.2707, location: 'Chennai, India', date: '2006-07' },
      { lat: 18.4655, lng: -66.1057, location: 'Puerto Rico', date: '2014-05' }
    ],
    peakDate: '2006-03'
  },

  {
    name: 'Dengue Fever (Global)',
    origin: { lat: 13.7563, lng: 100.5018, location: 'Southeast Asia' },
    startDate: '1950-01',
    category: 'Vector-borne',
    severity: 'Endemic/Epidemic',
    pathogen: 'Flavivirus',
    caseFatality: '1-5% (severe cases)',
    spread: [
      { lat: -23.5505, lng: -46.6333, location: 'São Paulo, Brazil', date: '1980-01' },
      { lat: 25.7617, lng: -80.1918, location: 'Florida, USA', date: '2009-01' },
      { lat: 13.0827, lng: 80.2707, location: 'Chennai, India', date: '1960-01' },
      { lat: -34.6037, lng: -58.3816, location: 'Buenos Aires, Argentina', date: '1998-01' }
    ],
    peakDate: 'Ongoing'
  },

  // Hemorrhagic fevers
  {
    name: 'Ebola Virus (West Africa)',
    origin: { lat: 8.4606, lng: -11.7799, location: 'Guéckédou, Guinea' },
    startDate: '2014-03',
    category: 'Hemorrhagic Fever',
    severity: 'Epidemic',
    pathogen: 'Filovirus',
    caseFatality: '40%',
    spread: [
      { lat: 6.4281, lng: -9.4295, location: 'Monrovia, Liberia', date: '2014-06' },
      { lat: 8.4840, lng: -13.2299, location: 'Freetown, Sierra Leone', date: '2014-05' },
      { lat: 32.7767, lng: -96.7970, location: 'Dallas, USA', date: '2014-09-30' },
      { lat: 40.4168, lng: -3.7038, location: 'Madrid, Spain', date: '2014-10-06' }
    ],
    peakDate: '2014-10'
  },

  {
    name: 'Ebola Virus (DRC)',
    origin: { lat: 1.2921, lng: 29.4372, location: 'Beni, North Kivu, DRC' },
    startDate: '2018-08',
    category: 'Hemorrhagic Fever',
    severity: 'Epidemic',
    pathogen: 'Filovirus',
    caseFatality: '67%',
    spread: [
      { lat: -1.9706, lng: 30.1044, location: 'Goma, DRC', date: '2019-07-14' },
      { lat: 0.3476, lng: 32.5825, location: 'Kasese, Uganda', date: '2019-06-11' }
    ],
    peakDate: '2019-04'
  },

  {
    name: 'Marburg Virus',
    origin: { lat: 0.3476, lng: 32.5825, location: 'Kampala, Uganda' },
    startDate: '2012-10',
    category: 'Hemorrhagic Fever',
    severity: 'Outbreak',
    pathogen: 'Filovirus',
    caseFatality: '88%',
    spread: [
      { lat: 1.3733, lng: 32.2903, location: 'Kabale, Uganda', date: '2012-11' },
      { lat: -8.8390, lng: 13.2894, location: 'Luanda, Angola', date: '2005-03' }
    ],
    peakDate: '2012-12'
  },

  {
    name: 'Lassa Fever',
    origin: { lat: 7.5399, lng: 4.5455, location: 'Lassa, Nigeria' },
    startDate: '1969-01',
    category: 'Hemorrhagic Fever',
    severity: 'Endemic',
    pathogen: 'Arenavirus',
    caseFatality: '1-2%',
    spread: [
      { lat: 8.4606, lng: -11.7799, location: 'Guinea', date: '1970-01' },
      { lat: 6.4281, lng: -9.4295, location: 'Liberia', date: '1970-01' },
      { lat: 8.4840, lng: -13.2299, location: 'Sierra Leone', date: '1970-01' }
    ],
    peakDate: 'Seasonal'
  },

  // Emerging and re-emerging diseases
  {
    name: 'Mpox (Monkeypox)',
    origin: { lat: -4.3217, lng: 15.3074, location: 'Kinshasa, DRC' },
    startDate: '2022-05',
    category: 'Poxvirus',
    severity: 'Epidemic',
    pathogen: 'Orthopoxvirus',
    caseFatality: '0.1-1%',
    spread: [
      { lat: 51.5074, lng: -0.1278, location: 'London, UK', date: '2022-05-07' },
      { lat: 40.7128, lng: -74.0060, location: 'New York, USA', date: '2022-05-18' },
      { lat: 52.5200, lng: 13.4050, location: 'Berlin, Germany', date: '2022-05-20' },
      { lat: 40.4168, lng: -3.7038, location: 'Madrid, Spain', date: '2022-05-18' }
    ],
    peakDate: '2022-08'
  },

  {
    name: 'Nipah Virus',
    origin: { lat: 2.9213, lng: 101.6559, location: 'Sungai Nipah, Malaysia' },
    startDate: '1998-09',
    category: 'Zoonotic',
    severity: 'Outbreak',
    pathogen: 'Henipavirus',
    caseFatality: '40-75%',
    spread: [
      { lat: 1.3521, lng: 103.8198, location: 'Singapore', date: '1999-03' },
      { lat: 23.6850, lng: 90.3563, location: 'Bangladesh', date: '2001-01' },
      { lat: 26.8467, lng: 80.9462, location: 'India', date: '2001-01' }
    ],
    peakDate: '1999-04'
  },

  // Antibiotic-resistant diseases
  {
    name: 'XDR-TB (Extensively Drug-Resistant TB)',
    origin: { lat: -29.8587, lng: 31.0218, location: 'KwaZulu-Natal, South Africa' },
    startDate: '2006-01',
    category: 'Bacterial Resistance',
    severity: 'Epidemic',
    pathogen: 'Mycobacterium tuberculosis',
    caseFatality: '60-90%',
    spread: [
      { lat: 28.6139, lng: 77.2090, location: 'New Delhi, India', date: '2007-01' },
      { lat: 39.9042, lng: 116.4074, location: 'Beijing, China', date: '2007-01' },
      { lat: 55.7558, lng: 37.6173, location: 'Moscow, Russia', date: '2006-01' }
    ],
    peakDate: 'Ongoing'
  },

  // Other significant outbreaks
  {
    name: 'Yellow Fever (Angola)',
    origin: { lat: -8.8390, lng: 13.2894, location: 'Luanda, Angola' },
    startDate: '2015-12',
    category: 'Vector-borne',
    severity: 'Epidemic',
    pathogen: 'Flavivirus',
    caseFatality: '20-50%',
    spread: [
      { lat: -4.3217, lng: 15.3074, location: 'Kinshasa, DRC', date: '2016-03' },
      { lat: 39.9042, lng: 116.4074, location: 'Beijing, China', date: '2016-03' }
    ],
    peakDate: '2016-06'
  },

  {
    name: 'Cholera (Yemen)',
    origin: { lat: 15.3694, lng: 44.1910, location: 'Sana\'a, Yemen' },
    startDate: '2016-10',
    category: 'Enteric',
    severity: 'Epidemic',
    pathogen: 'Vibrio cholerae',
    caseFatality: '0.2-0.5%',
    spread: [
      { lat: 12.7794, lng: 45.0367, location: 'Aden, Yemen', date: '2017-04' },
      { lat: 15.5527, lng: 48.5164, location: 'Taiz, Yemen', date: '2017-05' }
    ],
    peakDate: '2017-12'
  },

  {
    name: 'Rift Valley Fever',
    origin: { lat: -0.0236, lng: 37.9062, location: 'Kenya' },
    startDate: '2006-12',
    category: 'Vector-borne',
    severity: 'Outbreak',
    pathogen: 'Phlebovirus',
    caseFatality: '1-2%',
    spread: [
      { lat: 1.3733, lng: 32.2903, location: 'Uganda', date: '2016-03' },
      { lat: -6.3690, lng: 34.8888, location: 'Tanzania', date: '2007-01' }
    ],
    peakDate: '2007-05'
  }
];

// Generate comprehensive pandemic vulnerability data
const generatePandemicData = (scenario, isOptimistic) => {
  const baseData = [
    // North America
    { country: 'United States', lat: 37.0902, lng: -95.7129, healthcareCapacity: 78, socialVulnerability: 45, economicResilience: 82, population: 331900000 },
    { country: 'Canada', lat: 56.1304, lng: -106.3468, healthcareCapacity: 87, socialVulnerability: 30, economicResilience: 83, population: 38200000 },
    { country: 'Mexico', lat: 23.6345, lng: -102.5528, healthcareCapacity: 48, socialVulnerability: 62, economicResilience: 52, population: 128900000 },
    
    // South America
    { country: 'Brazil', lat: -14.2350, lng: -51.9253, healthcareCapacity: 52, socialVulnerability: 68, economicResilience: 48, population: 215000000 },
    { country: 'Argentina', lat: -38.4161, lng: -63.6167, healthcareCapacity: 65, socialVulnerability: 55, economicResilience: 55, population: 45000000 },
    { country: 'Chile', lat: -35.6751, lng: -71.5430, healthcareCapacity: 75, socialVulnerability: 45, economicResilience: 68, population: 19000000 },
    { country: 'Colombia', lat: 4.5709, lng: -74.2973, healthcareCapacity: 55, socialVulnerability: 65, economicResilience: 50, population: 51000000 },
    { country: 'Peru', lat: -9.1900, lng: -75.0152, healthcareCapacity: 45, socialVulnerability: 70, economicResilience: 42, population: 33000000 },
    { country: 'Venezuela', lat: 6.4238, lng: -66.5897, healthcareCapacity: 30, socialVulnerability: 80, economicResilience: 25, population: 28000000 },
    { country: 'Ecuador', lat: -1.8312, lng: -78.1834, healthcareCapacity: 50, socialVulnerability: 68, economicResilience: 45, population: 18000000 },
    
    // Europe
    { country: 'United Kingdom', lat: 55.3781, lng: -3.4360, healthcareCapacity: 85, socialVulnerability: 38, economicResilience: 76, population: 67500000 },
    { country: 'Germany', lat: 51.1657, lng: 10.4515, healthcareCapacity: 88, socialVulnerability: 32, economicResilience: 84, population: 83200000 },
    { country: 'France', lat: 46.2276, lng: 2.2137, healthcareCapacity: 86, socialVulnerability: 35, economicResilience: 78, population: 67700000 },
    { country: 'Italy', lat: 41.8719, lng: 12.5674, healthcareCapacity: 82, socialVulnerability: 42, economicResilience: 68, population: 59000000 },
    { country: 'Spain', lat: 40.4637, lng: -3.7492, healthcareCapacity: 84, socialVulnerability: 40, economicResilience: 70, population: 47400000 },
    { country: 'Poland', lat: 51.9194, lng: 19.1451, healthcareCapacity: 68, socialVulnerability: 45, economicResilience: 65, population: 38000000 },
    { country: 'Netherlands', lat: 52.1326, lng: 5.2913, healthcareCapacity: 89, socialVulnerability: 28, economicResilience: 85, population: 17400000 },
    { country: 'Belgium', lat: 50.5039, lng: 4.4699, healthcareCapacity: 85, socialVulnerability: 35, economicResilience: 78, population: 11500000 },
    { country: 'Sweden', lat: 60.1282, lng: 18.6435, healthcareCapacity: 92, socialVulnerability: 25, economicResilience: 88, population: 10400000 },
    { country: 'Norway', lat: 60.4720, lng: 8.4689, healthcareCapacity: 94, socialVulnerability: 22, economicResilience: 92, population: 5400000 },
    { country: 'Denmark', lat: 56.2639, lng: 9.5018, healthcareCapacity: 91, socialVulnerability: 26, economicResilience: 86, population: 5800000 },
    { country: 'Finland', lat: 61.9241, lng: 25.7482, healthcareCapacity: 90, socialVulnerability: 28, economicResilience: 85, population: 5500000 },
    { country: 'Switzerland', lat: 46.8182, lng: 8.2275, healthcareCapacity: 95, socialVulnerability: 20, economicResilience: 95, population: 8700000 },
    { country: 'Austria', lat: 47.5162, lng: 14.5501, healthcareCapacity: 88, socialVulnerability: 30, economicResilience: 82, population: 9000000 },
    
    // Eastern Europe
    { country: 'Russia', lat: 61.5240, lng: 105.3188, healthcareCapacity: 65, socialVulnerability: 52, economicResilience: 58, population: 146000000 },
    { country: 'Ukraine', lat: 48.3794, lng: 31.1656, healthcareCapacity: 55, socialVulnerability: 65, economicResilience: 35, population: 44000000 },
    { country: 'Romania', lat: 45.9432, lng: 24.9668, healthcareCapacity: 60, socialVulnerability: 58, economicResilience: 55, population: 19000000 },
    
    // Asia-Pacific
    { country: 'China', lat: 35.8617, lng: 104.1954, healthcareCapacity: 72, socialVulnerability: 55, economicResilience: 75, population: 1412000000 },
    { country: 'India', lat: 20.5937, lng: 78.9629, healthcareCapacity: 35, socialVulnerability: 75, economicResilience: 55, population: 1420000000 },
    { country: 'Indonesia', lat: -0.7893, lng: 113.9213, healthcareCapacity: 38, socialVulnerability: 70, economicResilience: 50, population: 275000000 },
    { country: 'Pakistan', lat: 30.3753, lng: 69.3451, healthcareCapacity: 32, socialVulnerability: 78, economicResilience: 40, population: 230000000 },
    { country: 'Bangladesh', lat: 23.6850, lng: 90.3563, healthcareCapacity: 25, socialVulnerability: 85, economicResilience: 35, population: 169400000 },
    { country: 'Japan', lat: 36.2048, lng: 138.2529, healthcareCapacity: 90, socialVulnerability: 48, economicResilience: 88, population: 125000000 },
    { country: 'Philippines', lat: 12.8797, lng: 121.7740, healthcareCapacity: 42, socialVulnerability: 72, economicResilience: 48, population: 110000000 },
    { country: 'Vietnam', lat: 14.0583, lng: 108.2772, healthcareCapacity: 55, socialVulnerability: 58, economicResilience: 62, population: 98000000 },
    { country: 'Turkey', lat: 38.9637, lng: 35.2433, healthcareCapacity: 68, socialVulnerability: 50, economicResilience: 58, population: 85000000 },
    { country: 'Iran', lat: 32.4279, lng: 53.6880, healthcareCapacity: 58, socialVulnerability: 62, economicResilience: 45, population: 85000000 },
    { country: 'Thailand', lat: 15.8700, lng: 100.9925, healthcareCapacity: 68, socialVulnerability: 52, economicResilience: 65, population: 70000000 },
    { country: 'South Korea', lat: 35.9078, lng: 127.7669, healthcareCapacity: 87, socialVulnerability: 35, economicResilience: 85, population: 51700000 },
    { country: 'Myanmar', lat: 21.9162, lng: 95.9560, healthcareCapacity: 28, socialVulnerability: 82, economicResilience: 25, population: 55000000 },
    
    // Africa
    { country: 'South Africa', lat: -30.5595, lng: 22.9375, healthcareCapacity: 45, socialVulnerability: 72, economicResilience: 48, population: 60000000 },
    { country: 'Nigeria', lat: 9.0820, lng: 8.6753, healthcareCapacity: 28, socialVulnerability: 85, economicResilience: 35, population: 225000000 },
    { country: 'Ethiopia', lat: 9.1450, lng: 40.4897, healthcareCapacity: 22, socialVulnerability: 88, economicResilience: 30, population: 120000000 },
    { country: 'Egypt', lat: 26.0975, lng: 31.2357, healthcareCapacity: 55, socialVulnerability: 65, economicResilience: 48, population: 105000000 },
    { country: 'Kenya', lat: -0.0236, lng: 37.9062, healthcareCapacity: 35, socialVulnerability: 75, economicResilience: 42, population: 54000000 },
    { country: 'Uganda', lat: 1.3733, lng: 32.2903, healthcareCapacity: 30, socialVulnerability: 80, economicResilience: 38, population: 47000000 },
    { country: 'Tanzania', lat: -6.3690, lng: 34.8888, healthcareCapacity: 32, socialVulnerability: 78, economicResilience: 40, population: 62000000 },
    { country: 'Algeria', lat: 28.0339, lng: 1.6596, healthcareCapacity: 55, socialVulnerability: 62, economicResilience: 48, population: 45000000 },
    { country: 'Morocco', lat: 31.7917, lng: -7.0926, healthcareCapacity: 52, socialVulnerability: 65, economicResilience: 50, population: 37000000 },
    { country: 'Angola', lat: -11.2027, lng: 17.8739, healthcareCapacity: 28, socialVulnerability: 82, economicResilience: 35, population: 33000000 },
    { country: 'Ghana', lat: 7.9465, lng: -1.0232, healthcareCapacity: 38, socialVulnerability: 72, economicResilience: 45, population: 32000000 },
    { country: 'Mozambique', lat: -18.6657, lng: 35.5296, healthcareCapacity: 25, socialVulnerability: 85, economicResilience: 30, population: 32000000 },
    
    // Middle East
    { country: 'Saudi Arabia', lat: 23.8859, lng: 45.0792, healthcareCapacity: 72, socialVulnerability: 45, economicResilience: 68, population: 35000000 },
    { country: 'Iraq', lat: 33.2232, lng: 43.6793, healthcareCapacity: 35, socialVulnerability: 75, economicResilience: 30, population: 41000000 },
    { country: 'Afghanistan', lat: 33.9391, lng: 67.7100, healthcareCapacity: 15, socialVulnerability: 95, economicResilience: 18, population: 40000000 },
    { country: 'Yemen', lat: 15.5527, lng: 48.5164, healthcareCapacity: 12, socialVulnerability: 98, economicResilience: 15, population: 30000000 },
    { country: 'Syria', lat: 34.8021, lng: 38.9968, healthcareCapacity: 25, socialVulnerability: 85, economicResilience: 22, population: 18000000 },
    { country: 'Jordan', lat: 30.5852, lng: 36.2384, healthcareCapacity: 62, socialVulnerability: 58, economicResilience: 55, population: 10000000 },
    { country: 'Lebanon', lat: 33.8547, lng: 35.8623, healthcareCapacity: 55, socialVulnerability: 65, economicResilience: 35, population: 7000000 },
    { country: 'Israel', lat: 31.0461, lng: 34.8516, healthcareCapacity: 88, socialVulnerability: 35, economicResilience: 82, population: 9000000 },
    { country: 'United Arab Emirates', lat: 23.4241, lng: 53.8478, healthcareCapacity: 85, socialVulnerability: 32, economicResilience: 85, population: 10000000 },
    
    // Oceania
    { country: 'Australia', lat: -25.2744, lng: 133.7751, healthcareCapacity: 89, socialVulnerability: 28, economicResilience: 87, population: 25900000 },
    { country: 'New Zealand', lat: -40.9006, lng: 174.8860, healthcareCapacity: 92, socialVulnerability: 25, economicResilience: 88, population: 5100000 },
    { country: 'Papua New Guinea', lat: -6.3150, lng: 143.9555, healthcareCapacity: 22, socialVulnerability: 88, economicResilience: 28, population: 9000000 }
  ];

  // Apply scenario adjustments
  return baseData.map(country => {
    let adjustmentFactor = 1;
    if (scenario === '2030') {
      adjustmentFactor = isOptimistic ? 0.9 : 1.15;
    } else if (scenario === '2050') {
      adjustmentFactor = isOptimistic ? 0.85 : 1.3;
    }

    const vulnerabilityIndex = Math.round(
      ((100 - country.healthcareCapacity) * 0.4 + 
       country.socialVulnerability * 0.4 + 
       (100 - country.economicResilience) * 0.2) * adjustmentFactor
    );

    const riskLevel = 
      vulnerabilityIndex >= 80 ? 'VeryHigh' :
      vulnerabilityIndex >= 60 ? 'High' :
      vulnerabilityIndex >= 40 ? 'Medium' :
      vulnerabilityIndex >= 20 ? 'Low' : 'VeryLow';

    return {
      ...country,
      vulnerabilityIndex: Math.min(100, vulnerabilityIndex),
      riskLevel
    };
  });
};

export default function EnhancedPandemicMap({ scenario, isOptimistic, onCountrySelect }) {
  const mapRef = useRef(null);
  const mapInstanceRef = useRef(null);
  const markersRef = useRef([]);
  const layerGroupsRef = useRef({});
  
  const [isFullscreen, setIsFullscreen] = useState(false);
  const [activeLayers, setActiveLayers] = useState({
    countries: true,
    outbreaks: true,
    bsl4Labs: true,
    respiratory: true,
    vectorBorne: true,
    hemorrhagicFever: true,
    bacterial: true,
    emerging: true
  });

  // Toggle fullscreen mode
  const toggleFullscreen = () => {
    if (!isFullscreen) {
      if (mapRef.current.requestFullscreen) {
        mapRef.current.requestFullscreen();
      }
    } else {
      if (document.exitFullscreen) {
        document.exitFullscreen();
      }
    }
  };

  // Listen for fullscreen changes
  useEffect(() => {
    const handleFullscreenChange = () => {
      setIsFullscreen(!!document.fullscreenElement);
    };

    document.addEventListener('fullscreenchange', handleFullscreenChange);
    return () => document.removeEventListener('fullscreenchange', handleFullscreenChange);
  }, []);

  useEffect(() => {
    if (!mapRef.current || mapInstanceRef.current) return;

    // Initialize map
    mapInstanceRef.current = L.map(mapRef.current, {
      center: [20, 0],
      zoom: 2,
      minZoom: 2,
      maxZoom: 8,
      worldCopyJump: true,
      zoomControl: false
    });

    // Add custom zoom control
    L.control.zoom({
      position: 'bottomright'
    }).addTo(mapInstanceRef.current);

    // Add dark tile layer
    L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {
      attribution: '© OpenStreetMap contributors © CARTO'
    }).addTo(mapInstanceRef.current);

    // Initialize layer groups
    layerGroupsRef.current = {
      countries: L.layerGroup(),
      outbreaks: L.layerGroup(),
      bsl4Labs: L.layerGroup(),
      respiratory: L.layerGroup(),
      vectorBorne: L.layerGroup(),
      hemorrhagicFever: L.layerGroup(),
      bacterial: L.layerGroup(),
      emerging: L.layerGroup()
    };

    // Add layer groups to map
    Object.values(layerGroupsRef.current).forEach(group => {
      group.addTo(mapInstanceRef.current);
    });

    return () => {
      if (mapInstanceRef.current) {
        mapInstanceRef.current.remove();
        mapInstanceRef.current = null;
      }
    };
  }, []);

  useEffect(() => {
    if (!mapInstanceRef.current) return;

    // Clear existing layers
    Object.values(layerGroupsRef.current).forEach(group => {
      group.clearLayers();
    });

    // Get vulnerability data
    const data = generatePandemicData(scenario, isOptimistic);

    // Load country boundaries if countries layer is active
    if (activeLayers.countries) {
      fetch('https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_110m_admin_0_countries.geojson')
        .then(response => response.json())
        .then(geoData => {
          const countryLayer = L.geoJSON(geoData, {
            style: function(feature) {
              const countryName = feature.properties.NAME || feature.properties.NAME_EN || feature.properties.ADMIN;
              const countryData = findCountryInData(countryName, data);
              
              if (countryData) {
                const color = getVulnerabilityColor(countryData.vulnerabilityIndex);
                return {
                  fillColor: color,
                  weight: 1,
                  opacity: 0.8,
                  color: '#ffffff',
                  fillOpacity: 0.7
                };
              } else {
                return {
                  fillColor: '#64748b',
                  weight: 1,
                  opacity: 0.3,
                  color: '#ffffff',
                  fillOpacity: 0.2
                };
              }
            },
            onEachFeature: function(feature, layer) {
              const countryName = feature.properties.NAME || feature.properties.NAME_EN || feature.properties.ADMIN;
              const countryData = findCountryInData(countryName, data);
              
              if (countryData) {
                const color = getVulnerabilityColor(countryData.vulnerabilityIndex);
                layer.bindPopup(`
                  <div style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; min-width: 280px; padding: 15px;">
                    <h3 style="margin: 0 0 12px 0; color: #121625; font-size: 18px;">🌍 ${countryData.country}</h3>
                    <div style="font-size: 14px; line-height: 1.6; color: #1a1f35;">
                      <div style="margin-bottom: 8px;"><strong>Vulnerability Index:</strong> <span style="color: ${color}; font-weight: 600;">${countryData.vulnerabilityIndex}/100</span></div>
                      <div style="margin-bottom: 8px;"><strong>Healthcare Capacity:</strong> ${countryData.healthcareCapacity}/100</div>
                      <div style="margin-bottom: 8px;"><strong>Social Vulnerability:</strong> ${countryData.socialVulnerability}/100</div>
                      <div style="margin-bottom: 8px;"><strong>Economic Resilience:</strong> ${countryData.economicResilience}/100</div>
                      <div style="margin-bottom: 8px;"><strong>Population:</strong> ${(countryData.population/1000000).toFixed(1)}M</div>
                      <div style="margin-top: 12px; padding: 8px; background: #f8f9fa; border-radius: 4px;">
                        <strong>Risk Level:</strong> <span style="color: ${color}; font-weight: 600;">${formatRiskLevel(countryData.riskLevel)}</span>
                      </div>
                    </div>
                  </div>
                `);

                // Add click handler
                layer.on('click', () => {
                  onCountrySelect({
                    name: countryData.country,
                    healthcareCapacity: countryData.healthcareCapacity,
                    socialVulnerability: countryData.socialVulnerability,
                    economicResilience: countryData.economicResilience,
                    riskLevel: countryData.riskLevel,
                    vulnerabilityIndex: countryData.vulnerabilityIndex
                  });
                });
              }

              // Add hover effects
              layer.on({
                mouseover: function(e) {
                  const layer = e.target;
                  layer.setStyle({
                    weight: 3,
                    color: '#00e0ff',
                    fillOpacity: 0.9
                  });
                },
                mouseout: function(e) {
                  countryLayer.resetStyle(e.target);
                }
              });
            }
          });

          layerGroupsRef.current.countries.addLayer(countryLayer);
        })
        .catch(error => {
          console.error('Error loading country boundaries:', error);
        });
    }

    // Add BSL4 laboratories if active
    if (activeLayers.bsl4Labs) {
      bsl4Labs.forEach(lab => {
        const labIcon = L.divIcon({
          html: `<div style="
            width: 16px; 
            height: 16px; 
            background: #9C27B0; 
            border: 3px solid #ffffff; 
            border-radius: 2px;
            box-shadow: 0 0 8px rgba(156, 39, 176, 0.6);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 10px;
            color: white;
            font-weight: bold;
          ">🔬</div>`,
          className: 'bsl4-lab',
          iconSize: [16, 16],
          iconAnchor: [8, 8]
        });

        const labMarker = L.marker([lab.lat, lab.lng], { 
          icon: labIcon,
          zIndexOffset: 2000 
        });

        labMarker.bindPopup(`
          <div style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; min-width: 320px; padding: 15px;">
            <h3 style="margin: 0 0 12px 0; color: #9C27B0; font-size: 18px;">🔬 BSL-4 Laboratory</h3>
            <div style="font-size: 14px; line-height: 1.6; color: #1a1f35;">
              <div style="margin-bottom: 8px;"><strong>Facility:</strong> ${lab.name}</div>
              <div style="margin-bottom: 8px;"><strong>Location:</strong> ${lab.location}</div>
              <div style="margin-bottom: 8px;"><strong>Country:</strong> ${lab.country}</div>
              <div style="margin-bottom: 8px;"><strong>Established:</strong> ${lab.established}</div>
              <div style="margin-top: 12px; padding: 10px; background: #f3e5f5; border-radius: 4px; border-left: 4px solid #9C27B0;">
                <strong>Research Focus:</strong><br>
                ${lab.research.map(item => `• ${item}`).join('<br>')}
              </div>
            </div>
          </div>
        `);

        layerGroupsRef.current.bsl4Labs.addLayer(labMarker);
      });
    }

    // Add outbreak data by category
    comprehensiveOutbreakData.forEach(outbreak => {
      const categoryKey = getCategoryKey(outbreak.category);
      
      if (!activeLayers[categoryKey]) return;

      // Add origin marker
      const originIcon = getOutbreakIcon(outbreak.category, true);
      const originMarker = L.marker([outbreak.origin.lat, outbreak.origin.lng], { 
        icon: originIcon,
        zIndexOffset: 1500 
      });

      originMarker.bindPopup(createOutbreakPopup(outbreak, true));
      layerGroupsRef.current[categoryKey].addLayer(originMarker);

      // Add spread pattern
      outbreak.spread.forEach((location, index) => {
        const spreadIcon = getOutbreakIcon(outbreak.category, false);
        const spreadMarker = L.marker([location.lat, location.lng], { 
          icon: spreadIcon,
          zIndexOffset: 1000 
        });

        spreadMarker.bindPopup(createSpreadPopup(outbreak, location));
        layerGroupsRef.current[categoryKey].addLayer(spreadMarker);

        // Create lines showing spread pattern
        const spreadLine = L.polyline([
          [outbreak.origin.lat, outbreak.origin.lng],
          [location.lat, location.lng]
        ], {
          color: getCategoryColor(outbreak.category),
          weight: 2,
          opacity: 0.6,
          dashArray: '5, 5'
        });

        layerGroupsRef.current[categoryKey].addLayer(spreadLine);

        // Connect spread locations
        if (index > 0) {
          const prevLocation = outbreak.spread[index - 1];
          const connectionLine = L.polyline([
            [prevLocation.lat, prevLocation.lng],
            [location.lat, location.lng]
          ], {
            color: getCategoryColor(outbreak.category),
            weight: 1,
            opacity: 0.4,
            dashArray: '3, 3'
          });

          layerGroupsRef.current[categoryKey].addLayer(connectionLine);
        }
      });
    });

  }, [scenario, isOptimistic, onCountrySelect, activeLayers]);

  // Helper functions
  function findCountryInData(geoJsonName, data) {
    // Direct match
    let country = data.find(d => d.country === geoJsonName);
    if (country) return country;
    
    // Common name variations
    const nameMap = {
      'United States of America': 'United States',
      'Russian Federation': 'Russia',
      'Korea, Republic of': 'South Korea',
      'Iran, Islamic Rep.': 'Iran',
      'Venezuela, RB': 'Venezuela',
      'Tanzania, United Republic of': 'Tanzania',
      'Congo, Dem. Rep.': 'Democratic Republic of Congo',
      'Syrian Arab Republic': 'Syria',
      'Yemen, Rep.': 'Yemen',
      'Myanmar (Burma)': 'Myanmar'
    };
    
    const mappedName = nameMap[geoJsonName];
    if (mappedName) {
      country = data.find(d => d.country === mappedName);
      if (country) return country;
    }
    
    return data.find(d => 
      d.country.toLowerCase().includes(geoJsonName.toLowerCase()) ||
      geoJsonName.toLowerCase().includes(d.country.toLowerCase())
    );
  }

  function getVulnerabilityColor(vulnerabilityIndex) {
    if (vulnerabilityIndex >= 80) return '#FF4444';
    if (vulnerabilityIndex >= 60) return '#FF9800';
    if (vulnerabilityIndex >= 40) return '#FFD700';
    if (vulnerabilityIndex >= 20) return '#90EE90';
    return '#2E8B57';
  }

  function formatRiskLevel(riskLevel) {
    return riskLevel.replace(/([A-Z])/g, ' $1').trim();
  }

  function getCategoryKey(category) {
    const categoryMap = {
      'Respiratory': 'respiratory',
      'Vector-borne': 'vectorBorne',
      'Hemorrhagic Fever': 'hemorrhagicFever',
      'Bacterial Resistance': 'bacterial',
      'Zoonotic': 'emerging',
      'Poxvirus': 'emerging',
      'Enteric': 'emerging'
    };
    return categoryMap[category] || 'emerging';
  }

  function getCategoryColor(category) {
    const colorMap = {
      'Respiratory': '#FF6B6B',
      'Vector-borne': '#4ECDC4',
      'Hemorrhagic Fever': '#FF4444',
      'Bacterial Resistance': '#A78BFA',
      'Zoonotic': '#F59E0B',
      'Poxvirus': '#EC4899',
      'Enteric': '#10B981'
    };
    return colorMap[category] || '#64748B';
  }

  function getOutbreakIcon(category, isOrigin) {
    const color = getCategoryColor(category);
    const size = isOrigin ? 24 : 16;
    const emoji = getOutbreakEmoji(category);
    
    return L.divIcon({
      html: `<div style="
        width: ${size}px; 
        height: ${size}px; 
        background: ${color}; 
        border: 3px solid #ffffff; 
        border-radius: 50%; 
        box-shadow: 0 0 ${isOrigin ? 12 : 8}px rgba(${color.slice(1).match(/.{2}/g).map(x => parseInt(x, 16)).join(', ')}, 0.6);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: ${isOrigin ? 12 : 10}px;
        ${isOrigin ? 'animation: pulse 2s infinite;' : ''}
      ">${emoji}</div>
      ${isOrigin ? `<style>
      @keyframes pulse {
        0% { box-shadow: 0 0 0 0 rgba(${color.slice(1).match(/.{2}/g).map(x => parseInt(x, 16)).join(', ')}, 0.7); }
        70% { box-shadow: 0 0 0 10px rgba(${color.slice(1).match(/.{2}/g).map(x => parseInt(x, 16)).join(', ')}, 0); }
        100% { box-shadow: 0 0 0 0 rgba(${color.slice(1).match(/.{2}/g).map(x => parseInt(x, 16)).join(', ')}, 0); }
      }
      </style>` : ''}`,
      className: `outbreak-${isOrigin ? 'origin' : 'spread'}`,
      iconSize: [size, size],
      iconAnchor: [size/2, size/2]
    });
  }

  function getOutbreakEmoji(category) {
    const emojiMap = {
      'Respiratory': '🦠',
      'Vector-borne': '🦟',
      'Hemorrhagic Fever': '🩸',
      'Bacterial Resistance': '🛡️',
      'Zoonotic': '🐾',
      'Poxvirus': '🔴',
      'Enteric': '💧'
    };
    return emojiMap[category] || '⚠️';
  }

  function createOutbreakPopup(outbreak, isOrigin) {
    const color = getCategoryColor(outbreak.category);
    const emoji = getOutbreakEmoji(outbreak.category);
    
    return `
      <div style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; min-width: 320px; padding: 15px;">
        <h3 style="margin: 0 0 12px 0; color: ${color}; font-size: 18px;">${emoji} ${outbreak.name} ${isOrigin ? '(Origin)' : ''}</h3>
        <div style="font-size: 14px; line-height: 1.6; color: #1a1f35;">
          <div style="margin-bottom: 8px;"><strong>Location:</strong> ${outbreak.origin.location}</div>
          <div style="margin-bottom: 8px;"><strong>First Detected:</strong> ${outbreak.startDate}</div>
          <div style="margin-bottom: 8px;"><strong>Peak Period:</strong> ${outbreak.peakDate}</div>
          <div style="margin-bottom: 8px;"><strong>Pathogen:</strong> ${outbreak.pathogen}</div>
          <div style="margin-bottom: 8px;"><strong>Case Fatality Rate:</strong> ${outbreak.caseFatality}</div>
          <div style="margin-bottom: 8px;"><strong>Category:</strong> ${outbreak.category}</div>
          <div style="margin-top: 12px; padding: 10px; background: ${color}15; border-radius: 4px; border-left: 4px solid ${color};">
            <strong>Severity:</strong> <span style="color: ${color}; font-weight: 600;">${outbreak.severity}</span><br>
            <small>Spread to ${outbreak.spread.length} major locations</small>
          </div>
        </div>
      </div>
    `;
  }

  function createSpreadPopup(outbreak, location) {
    const color = getCategoryColor(outbreak.category);
    const emoji = getOutbreakEmoji(outbreak.category);
    
    return `
      <div style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; min-width: 280px; padding: 12px;">
        <h4 style="margin: 0 0 10px 0; color: ${color}; font-size: 16px;">${emoji} ${outbreak.name} Spread</h4>
        <div style="font-size: 13px; line-height: 1.5; color: #1a1f35;">
          <div style="margin-bottom: 6px;"><strong>Location:</strong> ${location.location}</div>
          <div style="margin-bottom: 6px;"><strong>Detected:</strong> ${location.date}</div>
          <div style="margin-bottom: 6px;"><strong>Pathogen:</strong> ${outbreak.pathogen}</div>
          <div style="margin-bottom: 6px;"><strong>CFR:</strong> ${outbreak.caseFatality}</div>
        </div>
      </div>
    `;
  }

  // Toggle layer visibility
  const toggleLayer = (layerKey) => {
    const newActiveLayers = { ...activeLayers, [layerKey]: !activeLayers[layerKey] };
    setActiveLayers(newActiveLayers);
    
    if (layerGroupsRef.current[layerKey]) {
      if (newActiveLayers[layerKey]) {
        layerGroupsRef.current[layerKey].addTo(mapInstanceRef.current);
      } else {
        mapInstanceRef.current.removeLayer(layerGroupsRef.current[layerKey]);
      }
    }
  };

  return (
    <div className={`${styles.mapContainer} ${isFullscreen ? styles.fullscreen : ''}`}>
      {/* Layer Controls */}
      <div className={styles.layerControls}>
        <div className={styles.controlGroup}>
          <h4>🌍 Base Layers</h4>
          <label>
            <input 
              type="checkbox" 
              checked={activeLayers.countries}
              onChange={() => toggleLayer('countries')}
            />
            Country Vulnerability
          </label>
          <label>
            <input 
              type="checkbox" 
              checked={activeLayers.bsl4Labs}
              onChange={() => toggleLayer('bsl4Labs')}
            />
            🔬 BSL-4 Laboratories
          </label>
        </div>

        <div className={styles.controlGroup}>
          <h4>🦠 Disease Categories</h4>
          <label>
            <input 
              type="checkbox" 
              checked={activeLayers.respiratory}
              onChange={() => toggleLayer('respiratory')}
            />
            🦠 Respiratory Diseases
          </label>
          <label>
            <input 
              type="checkbox" 
              checked={activeLayers.vectorBorne}
              onChange={() => toggleLayer('vectorBorne')}
            />
            🦟 Vector-Borne Diseases
          </label>
          <label>
            <input 
              type="checkbox" 
              checked={activeLayers.hemorrhagicFever}
              onChange={() => toggleLayer('hemorrhagicFever')}
            />
            🩸 Hemorrhagic Fevers
          </label>
          <label>
            <input 
              type="checkbox" 
              checked={activeLayers.bacterial}
              onChange={() => toggleLayer('bacterial')}
            />
            🛡️ Resistant Bacteria
          </label>
          <label>
            <input 
              type="checkbox" 
              checked={activeLayers.emerging}
              onChange={() => toggleLayer('emerging')}
            />
            ⚠️ Emerging Threats
          </label>
        </div>
      </div>

      {/* Fullscreen Toggle */}
      <button 
        className={styles.fullscreenButton}
        onClick={toggleFullscreen}
        title={isFullscreen ? 'Exit Fullscreen' : 'Enter Fullscreen'}
      >
        {isFullscreen ? '⬇️' : '⬆️'}
      </button>

      {/* Map Legend */}
      <div className={styles.mapLegend}>
        <h4>🎯 Risk Levels</h4>
        <div className={styles.legendItem}>
          <span className={styles.legendColor} style={{backgroundColor: '#FF4444'}}></span>
          Very High (80-100)
        </div>
        <div className={styles.legendItem}>
          <span className={styles.legendColor} style={{backgroundColor: '#FF9800'}}></span>
          High (60-79)
        </div>
        <div className={styles.legendItem}>
          <span className={styles.legendColor} style={{backgroundColor: '#FFD700'}}></span>
          Medium (40-59)
        </div>
        <div className={styles.legendItem}>
          <span className={styles.legendColor} style={{backgroundColor: '#90EE90'}}></span>
          Low (20-39)
        </div>
        <div className={styles.legendItem}>
          <span className={styles.legendColor} style={{backgroundColor: '#2E8B57'}}></span>
          Very Low (0-19)
        </div>
      </div>

      {/* Map */}
      <div ref={mapRef} className={styles.map} />
    </div>
  );
}